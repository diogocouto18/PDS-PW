
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type AdministradorPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Administrador"
  objects: {
    Anuncio: AnuncioPayload<ExtArgs>[]
    Evento: EventoPayload<ExtArgs>[]
    MensagemSuporte: MensagemSuportePayload<ExtArgs>[]
    Notificacao: NotificacaoPayload<ExtArgs>[]
    Rifa: RifaPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    username: string
    nome: string
    email: string
    password_hash: string
  }, ExtArgs["result"]["administrador"]>
  composites: {}
}

/**
 * Model Administrador
 * 
 */
export type Administrador = runtime.Types.DefaultSelection<AdministradorPayload>
export type AnuncioPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Anuncio"
  objects: {
    Administrador: AdministradorPayload<ExtArgs>
    Evento: EventoPayload<ExtArgs>
    CandidaturaVoluntariado: CandidaturaVoluntariadoPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    cargo: string
    descricao: string
    data_publicacao: Date | null
    id_administrador: number
    id_evento: number
  }, ExtArgs["result"]["anuncio"]>
  composites: {}
}

/**
 * Model Anuncio
 * 
 */
export type Anuncio = runtime.Types.DefaultSelection<AnuncioPayload>
export type AvaliacaoEventoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "AvaliacaoEvento"
  objects: {
    Utilizador: UtilizadorPayload<ExtArgs>
    Evento: EventoPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    id_utilizador: number
    id_evento: number
    nota: number | null
    data_avaliacao: Date | null
  }, ExtArgs["result"]["avaliacaoEvento"]>
  composites: {}
}

/**
 * Model AvaliacaoEvento
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type AvaliacaoEvento = runtime.Types.DefaultSelection<AvaliacaoEventoPayload>
export type CandidaturaVoluntariadoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "CandidaturaVoluntariado"
  objects: {
    Utilizador: UtilizadorPayload<ExtArgs>
    Anuncio: AnuncioPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    id_utilizador: number
    id_anuncio: number
    estado: CandidaturaVoluntariado_estado | null
  }, ExtArgs["result"]["candidaturaVoluntariado"]>
  composites: {}
}

/**
 * Model CandidaturaVoluntariado
 * 
 */
export type CandidaturaVoluntariado = runtime.Types.DefaultSelection<CandidaturaVoluntariadoPayload>
export type CategoriaEventoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "CategoriaEvento"
  objects: {
    Evento: EventoPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    nome: string
  }, ExtArgs["result"]["categoriaEvento"]>
  composites: {}
}

/**
 * Model CategoriaEvento
 * 
 */
export type CategoriaEvento = runtime.Types.DefaultSelection<CategoriaEventoPayload>
export type CompraRifaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "CompraRifa"
  objects: {
    Utilizador: UtilizadorPayload<ExtArgs>
    Rifa: RifaPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    id_utilizador: number
    id_rifa: number
    quantidade: number
    data_compra: Date | null
    estado: CompraRifa_estado | null
  }, ExtArgs["result"]["compraRifa"]>
  composites: {}
}

/**
 * Model CompraRifa
 * 
 */
export type CompraRifa = runtime.Types.DefaultSelection<CompraRifaPayload>
export type DoacaoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Doacao"
  objects: {
    Utilizador: UtilizadorPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    id_utilizador: number
    valor: Prisma.Decimal
    data_doacao: Date | null
    metodo_pagamento: Doacao_metodo_pagamento
  }, ExtArgs["result"]["doacao"]>
  composites: {}
}

/**
 * Model Doacao
 * 
 */
export type Doacao = runtime.Types.DefaultSelection<DoacaoPayload>
export type EventoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Evento"
  objects: {
    Anuncio: AnuncioPayload<ExtArgs>[]
    AvaliacaoEvento: AvaliacaoEventoPayload<ExtArgs>[]
    Administrador: AdministradorPayload<ExtArgs>
    CategoriaEvento: CategoriaEventoPayload<ExtArgs>
    Rifa: RifaPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    titulo: string
    localizacao: string
    descricao: string | null
    data_evento: Date
    fotografia: string
    estado: Evento_estado | null
    id_administrador: number
    id_categoria: number
  }, ExtArgs["result"]["evento"]>
  composites: {}
}

/**
 * Model Evento
 * 
 */
export type Evento = runtime.Types.DefaultSelection<EventoPayload>
export type MensagemSuportePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "MensagemSuporte"
  objects: {
    Utilizador: UtilizadorPayload<ExtArgs>
    Administrador: AdministradorPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    id_utilizador: number
    id_administrador: number
    mensagem: string
    data_abertura: Date | null
    data_encerramento: Date | null
    estado: MensagemSuporte_estado | null
  }, ExtArgs["result"]["mensagemSuporte"]>
  composites: {}
}

/**
 * Model MensagemSuporte
 * 
 */
export type MensagemSuporte = runtime.Types.DefaultSelection<MensagemSuportePayload>
export type NotificacaoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Notificacao"
  objects: {
    Utilizador: UtilizadorPayload<ExtArgs>
    Administrador: AdministradorPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    id_utilizador: number
    id_administrador: number
    mensagem: string
    data_envio: Date | null
    estado: Notificacao_estado | null
  }, ExtArgs["result"]["notificacao"]>
  composites: {}
}

/**
 * Model Notificacao
 * 
 */
export type Notificacao = runtime.Types.DefaultSelection<NotificacaoPayload>
export type PagamentoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Pagamento"
  objects: {
    Utilizador: UtilizadorPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    id_utilizador: number
    valor: Prisma.Decimal
    metodo_pagamento: Pagamento_metodo_pagamento
    estado: Pagamento_estado | null
    data_pagamento: Date | null
  }, ExtArgs["result"]["pagamento"]>
  composites: {}
}

/**
 * Model Pagamento
 * 
 */
export type Pagamento = runtime.Types.DefaultSelection<PagamentoPayload>
export type RifaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Rifa"
  objects: {
    CompraRifa: CompraRifaPayload<ExtArgs>[]
    Administrador: AdministradorPayload<ExtArgs>
    Evento: EventoPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    nome: string
    preco: Prisma.Decimal
    quantidade: number
    descricao: string
    premio: string
    data_sorteio: Date
    id_administrador: number
    id_evento: number
  }, ExtArgs["result"]["rifa"]>
  composites: {}
}

/**
 * Model Rifa
 * 
 */
export type Rifa = runtime.Types.DefaultSelection<RifaPayload>
export type SuportePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Suporte"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    artigo: string
    descricao: string
  }, ExtArgs["result"]["suporte"]>
  composites: {}
}

/**
 * Model Suporte
 * 
 */
export type Suporte = runtime.Types.DefaultSelection<SuportePayload>
export type UtilizadorPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Utilizador"
  objects: {
    AvaliacaoEvento: AvaliacaoEventoPayload<ExtArgs>[]
    CandidaturaVoluntariado: CandidaturaVoluntariadoPayload<ExtArgs>[]
    CompraRifa: CompraRifaPayload<ExtArgs>[]
    Doacao: DoacaoPayload<ExtArgs>[]
    MensagemSuporte: MensagemSuportePayload<ExtArgs>[]
    Notificacao: NotificacaoPayload<ExtArgs>[]
    Pagamento: PagamentoPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada: string | null
  }, ExtArgs["result"]["utilizador"]>
  composites: {}
}

/**
 * Model Utilizador
 * 
 */
export type Utilizador = runtime.Types.DefaultSelection<UtilizadorPayload>

/**
 * Enums
 */

export const CandidaturaVoluntariado_estado: {
  Pendente: 'Pendente',
  Aceite: 'Aceite',
  Rejeitado: 'Rejeitado'
};

export type CandidaturaVoluntariado_estado = (typeof CandidaturaVoluntariado_estado)[keyof typeof CandidaturaVoluntariado_estado]


export const CompraRifa_estado: {
  Vencedor: 'Vencedor',
  SegundoLugar: 'SegundoLugar',
  TerceiroLugar: 'TerceiroLugar',
  Perdedor: 'Perdedor',
  Pendente: 'Pendente'
};

export type CompraRifa_estado = (typeof CompraRifa_estado)[keyof typeof CompraRifa_estado]


export const Doacao_metodo_pagamento: {
  MBWAY: 'MBWAY',
  Cart_o: 'Cart_o',
  Paypal: 'Paypal'
};

export type Doacao_metodo_pagamento = (typeof Doacao_metodo_pagamento)[keyof typeof Doacao_metodo_pagamento]


export const Evento_estado: {
  Terminado: 'Terminado',
  Ativo: 'Ativo'
};

export type Evento_estado = (typeof Evento_estado)[keyof typeof Evento_estado]


export const MensagemSuporte_estado: {
  Aberto: 'Aberto',
  Fechado: 'Fechado'
};

export type MensagemSuporte_estado = (typeof MensagemSuporte_estado)[keyof typeof MensagemSuporte_estado]


export const Notificacao_estado: {
  Por_abrir: 'Por_abrir',
  Aberto: 'Aberto'
};

export type Notificacao_estado = (typeof Notificacao_estado)[keyof typeof Notificacao_estado]


export const Pagamento_metodo_pagamento: {
  MBWAY: 'MBWAY',
  Cart_o: 'Cart_o',
  Paypal: 'Paypal'
};

export type Pagamento_metodo_pagamento = (typeof Pagamento_metodo_pagamento)[keyof typeof Pagamento_metodo_pagamento]


export const Pagamento_estado: {
  Pendente: 'Pendente',
  Pago: 'Pago',
  Falhado: 'Falhado'
};

export type Pagamento_estado = (typeof Pagamento_estado)[keyof typeof Pagamento_estado]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Administradors
 * const administradors = await prisma.administrador.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Administradors
   * const administradors = await prisma.administrador.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.administrador`: Exposes CRUD operations for the **Administrador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Administradors
    * const administradors = await prisma.administrador.findMany()
    * ```
    */
  get administrador(): Prisma.AdministradorDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.anuncio`: Exposes CRUD operations for the **Anuncio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Anuncios
    * const anuncios = await prisma.anuncio.findMany()
    * ```
    */
  get anuncio(): Prisma.AnuncioDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.avaliacaoEvento`: Exposes CRUD operations for the **AvaliacaoEvento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AvaliacaoEventos
    * const avaliacaoEventos = await prisma.avaliacaoEvento.findMany()
    * ```
    */
  get avaliacaoEvento(): Prisma.AvaliacaoEventoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.candidaturaVoluntariado`: Exposes CRUD operations for the **CandidaturaVoluntariado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CandidaturaVoluntariados
    * const candidaturaVoluntariados = await prisma.candidaturaVoluntariado.findMany()
    * ```
    */
  get candidaturaVoluntariado(): Prisma.CandidaturaVoluntariadoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.categoriaEvento`: Exposes CRUD operations for the **CategoriaEvento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoriaEventos
    * const categoriaEventos = await prisma.categoriaEvento.findMany()
    * ```
    */
  get categoriaEvento(): Prisma.CategoriaEventoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.compraRifa`: Exposes CRUD operations for the **CompraRifa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompraRifas
    * const compraRifas = await prisma.compraRifa.findMany()
    * ```
    */
  get compraRifa(): Prisma.CompraRifaDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.doacao`: Exposes CRUD operations for the **Doacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doacaos
    * const doacaos = await prisma.doacao.findMany()
    * ```
    */
  get doacao(): Prisma.DoacaoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.evento`: Exposes CRUD operations for the **Evento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Eventos
    * const eventos = await prisma.evento.findMany()
    * ```
    */
  get evento(): Prisma.EventoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.mensagemSuporte`: Exposes CRUD operations for the **MensagemSuporte** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MensagemSuportes
    * const mensagemSuportes = await prisma.mensagemSuporte.findMany()
    * ```
    */
  get mensagemSuporte(): Prisma.MensagemSuporteDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.notificacao`: Exposes CRUD operations for the **Notificacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notificacaos
    * const notificacaos = await prisma.notificacao.findMany()
    * ```
    */
  get notificacao(): Prisma.NotificacaoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.pagamento`: Exposes CRUD operations for the **Pagamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pagamentos
    * const pagamentos = await prisma.pagamento.findMany()
    * ```
    */
  get pagamento(): Prisma.PagamentoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.rifa`: Exposes CRUD operations for the **Rifa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rifas
    * const rifas = await prisma.rifa.findMany()
    * ```
    */
  get rifa(): Prisma.RifaDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.suporte`: Exposes CRUD operations for the **Suporte** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Suportes
    * const suportes = await prisma.suporte.findMany()
    * ```
    */
  get suporte(): Prisma.SuporteDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.utilizador`: Exposes CRUD operations for the **Utilizador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Utilizadors
    * const utilizadors = await prisma.utilizador.findMany()
    * ```
    */
  get utilizador(): Prisma.UtilizadorDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Administrador: 'Administrador',
    Anuncio: 'Anuncio',
    AvaliacaoEvento: 'AvaliacaoEvento',
    CandidaturaVoluntariado: 'CandidaturaVoluntariado',
    CategoriaEvento: 'CategoriaEvento',
    CompraRifa: 'CompraRifa',
    Doacao: 'Doacao',
    Evento: 'Evento',
    MensagemSuporte: 'MensagemSuporte',
    Notificacao: 'Notificacao',
    Pagamento: 'Pagamento',
    Rifa: 'Rifa',
    Suporte: 'Suporte',
    Utilizador: 'Utilizador'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'administrador' | 'anuncio' | 'avaliacaoEvento' | 'candidaturaVoluntariado' | 'categoriaEvento' | 'compraRifa' | 'doacao' | 'evento' | 'mensagemSuporte' | 'notificacao' | 'pagamento' | 'rifa' | 'suporte' | 'utilizador'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Administrador: {
        payload: AdministradorPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AdministradorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministradorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdministradorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministradorPayload>
          }
          findFirst: {
            args: Prisma.AdministradorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministradorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdministradorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministradorPayload>
          }
          findMany: {
            args: Prisma.AdministradorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministradorPayload>[]
          }
          create: {
            args: Prisma.AdministradorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministradorPayload>
          }
          createMany: {
            args: Prisma.AdministradorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdministradorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministradorPayload>
          }
          update: {
            args: Prisma.AdministradorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministradorPayload>
          }
          deleteMany: {
            args: Prisma.AdministradorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdministradorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdministradorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministradorPayload>
          }
          aggregate: {
            args: Prisma.AdministradorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdministrador>
          }
          groupBy: {
            args: Prisma.AdministradorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdministradorGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdministradorCountArgs<ExtArgs>,
            result: $Utils.Optional<AdministradorCountAggregateOutputType> | number
          }
        }
      }
      Anuncio: {
        payload: AnuncioPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AnuncioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnuncioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnuncioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnuncioPayload>
          }
          findFirst: {
            args: Prisma.AnuncioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnuncioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnuncioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnuncioPayload>
          }
          findMany: {
            args: Prisma.AnuncioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnuncioPayload>[]
          }
          create: {
            args: Prisma.AnuncioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnuncioPayload>
          }
          createMany: {
            args: Prisma.AnuncioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AnuncioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnuncioPayload>
          }
          update: {
            args: Prisma.AnuncioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnuncioPayload>
          }
          deleteMany: {
            args: Prisma.AnuncioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AnuncioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AnuncioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AnuncioPayload>
          }
          aggregate: {
            args: Prisma.AnuncioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAnuncio>
          }
          groupBy: {
            args: Prisma.AnuncioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AnuncioGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnuncioCountArgs<ExtArgs>,
            result: $Utils.Optional<AnuncioCountAggregateOutputType> | number
          }
        }
      }
      AvaliacaoEvento: {
        payload: AvaliacaoEventoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AvaliacaoEventoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AvaliacaoEventoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AvaliacaoEventoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AvaliacaoEventoPayload>
          }
          findFirst: {
            args: Prisma.AvaliacaoEventoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AvaliacaoEventoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AvaliacaoEventoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AvaliacaoEventoPayload>
          }
          findMany: {
            args: Prisma.AvaliacaoEventoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AvaliacaoEventoPayload>[]
          }
          create: {
            args: Prisma.AvaliacaoEventoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AvaliacaoEventoPayload>
          }
          createMany: {
            args: Prisma.AvaliacaoEventoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AvaliacaoEventoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AvaliacaoEventoPayload>
          }
          update: {
            args: Prisma.AvaliacaoEventoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AvaliacaoEventoPayload>
          }
          deleteMany: {
            args: Prisma.AvaliacaoEventoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AvaliacaoEventoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AvaliacaoEventoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AvaliacaoEventoPayload>
          }
          aggregate: {
            args: Prisma.AvaliacaoEventoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAvaliacaoEvento>
          }
          groupBy: {
            args: Prisma.AvaliacaoEventoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AvaliacaoEventoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AvaliacaoEventoCountArgs<ExtArgs>,
            result: $Utils.Optional<AvaliacaoEventoCountAggregateOutputType> | number
          }
        }
      }
      CandidaturaVoluntariado: {
        payload: CandidaturaVoluntariadoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.CandidaturaVoluntariadoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CandidaturaVoluntariadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidaturaVoluntariadoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CandidaturaVoluntariadoPayload>
          }
          findFirst: {
            args: Prisma.CandidaturaVoluntariadoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CandidaturaVoluntariadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidaturaVoluntariadoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CandidaturaVoluntariadoPayload>
          }
          findMany: {
            args: Prisma.CandidaturaVoluntariadoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CandidaturaVoluntariadoPayload>[]
          }
          create: {
            args: Prisma.CandidaturaVoluntariadoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CandidaturaVoluntariadoPayload>
          }
          createMany: {
            args: Prisma.CandidaturaVoluntariadoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CandidaturaVoluntariadoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CandidaturaVoluntariadoPayload>
          }
          update: {
            args: Prisma.CandidaturaVoluntariadoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CandidaturaVoluntariadoPayload>
          }
          deleteMany: {
            args: Prisma.CandidaturaVoluntariadoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CandidaturaVoluntariadoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CandidaturaVoluntariadoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CandidaturaVoluntariadoPayload>
          }
          aggregate: {
            args: Prisma.CandidaturaVoluntariadoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCandidaturaVoluntariado>
          }
          groupBy: {
            args: Prisma.CandidaturaVoluntariadoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CandidaturaVoluntariadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidaturaVoluntariadoCountArgs<ExtArgs>,
            result: $Utils.Optional<CandidaturaVoluntariadoCountAggregateOutputType> | number
          }
        }
      }
      CategoriaEvento: {
        payload: CategoriaEventoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.CategoriaEventoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CategoriaEventoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriaEventoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CategoriaEventoPayload>
          }
          findFirst: {
            args: Prisma.CategoriaEventoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CategoriaEventoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriaEventoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CategoriaEventoPayload>
          }
          findMany: {
            args: Prisma.CategoriaEventoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CategoriaEventoPayload>[]
          }
          create: {
            args: Prisma.CategoriaEventoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CategoriaEventoPayload>
          }
          createMany: {
            args: Prisma.CategoriaEventoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoriaEventoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CategoriaEventoPayload>
          }
          update: {
            args: Prisma.CategoriaEventoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CategoriaEventoPayload>
          }
          deleteMany: {
            args: Prisma.CategoriaEventoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriaEventoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoriaEventoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CategoriaEventoPayload>
          }
          aggregate: {
            args: Prisma.CategoriaEventoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategoriaEvento>
          }
          groupBy: {
            args: Prisma.CategoriaEventoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaEventoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriaEventoCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaEventoCountAggregateOutputType> | number
          }
        }
      }
      CompraRifa: {
        payload: CompraRifaPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.CompraRifaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompraRifaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompraRifaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompraRifaPayload>
          }
          findFirst: {
            args: Prisma.CompraRifaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompraRifaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompraRifaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompraRifaPayload>
          }
          findMany: {
            args: Prisma.CompraRifaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompraRifaPayload>[]
          }
          create: {
            args: Prisma.CompraRifaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompraRifaPayload>
          }
          createMany: {
            args: Prisma.CompraRifaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CompraRifaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompraRifaPayload>
          }
          update: {
            args: Prisma.CompraRifaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompraRifaPayload>
          }
          deleteMany: {
            args: Prisma.CompraRifaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CompraRifaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CompraRifaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompraRifaPayload>
          }
          aggregate: {
            args: Prisma.CompraRifaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompraRifa>
          }
          groupBy: {
            args: Prisma.CompraRifaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CompraRifaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompraRifaCountArgs<ExtArgs>,
            result: $Utils.Optional<CompraRifaCountAggregateOutputType> | number
          }
        }
      }
      Doacao: {
        payload: DoacaoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.DoacaoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoacaoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoacaoPayload>
          }
          findFirst: {
            args: Prisma.DoacaoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoacaoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoacaoPayload>
          }
          findMany: {
            args: Prisma.DoacaoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoacaoPayload>[]
          }
          create: {
            args: Prisma.DoacaoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoacaoPayload>
          }
          createMany: {
            args: Prisma.DoacaoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DoacaoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoacaoPayload>
          }
          update: {
            args: Prisma.DoacaoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoacaoPayload>
          }
          deleteMany: {
            args: Prisma.DoacaoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DoacaoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DoacaoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoacaoPayload>
          }
          aggregate: {
            args: Prisma.DoacaoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDoacao>
          }
          groupBy: {
            args: Prisma.DoacaoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DoacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoacaoCountArgs<ExtArgs>,
            result: $Utils.Optional<DoacaoCountAggregateOutputType> | number
          }
        }
      }
      Evento: {
        payload: EventoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.EventoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventoPayload>
          }
          findFirst: {
            args: Prisma.EventoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventoPayload>
          }
          findMany: {
            args: Prisma.EventoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventoPayload>[]
          }
          create: {
            args: Prisma.EventoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventoPayload>
          }
          createMany: {
            args: Prisma.EventoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EventoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventoPayload>
          }
          update: {
            args: Prisma.EventoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventoPayload>
          }
          deleteMany: {
            args: Prisma.EventoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EventoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EventoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EventoPayload>
          }
          aggregate: {
            args: Prisma.EventoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEvento>
          }
          groupBy: {
            args: Prisma.EventoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EventoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventoCountArgs<ExtArgs>,
            result: $Utils.Optional<EventoCountAggregateOutputType> | number
          }
        }
      }
      MensagemSuporte: {
        payload: MensagemSuportePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.MensagemSuporteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MensagemSuportePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MensagemSuporteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MensagemSuportePayload>
          }
          findFirst: {
            args: Prisma.MensagemSuporteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MensagemSuportePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MensagemSuporteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MensagemSuportePayload>
          }
          findMany: {
            args: Prisma.MensagemSuporteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MensagemSuportePayload>[]
          }
          create: {
            args: Prisma.MensagemSuporteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MensagemSuportePayload>
          }
          createMany: {
            args: Prisma.MensagemSuporteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MensagemSuporteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MensagemSuportePayload>
          }
          update: {
            args: Prisma.MensagemSuporteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MensagemSuportePayload>
          }
          deleteMany: {
            args: Prisma.MensagemSuporteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MensagemSuporteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MensagemSuporteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MensagemSuportePayload>
          }
          aggregate: {
            args: Prisma.MensagemSuporteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMensagemSuporte>
          }
          groupBy: {
            args: Prisma.MensagemSuporteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MensagemSuporteGroupByOutputType>[]
          }
          count: {
            args: Prisma.MensagemSuporteCountArgs<ExtArgs>,
            result: $Utils.Optional<MensagemSuporteCountAggregateOutputType> | number
          }
        }
      }
      Notificacao: {
        payload: NotificacaoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.NotificacaoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificacaoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificacaoPayload>
          }
          findFirst: {
            args: Prisma.NotificacaoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificacaoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificacaoPayload>
          }
          findMany: {
            args: Prisma.NotificacaoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificacaoPayload>[]
          }
          create: {
            args: Prisma.NotificacaoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificacaoPayload>
          }
          createMany: {
            args: Prisma.NotificacaoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificacaoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificacaoPayload>
          }
          update: {
            args: Prisma.NotificacaoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificacaoPayload>
          }
          deleteMany: {
            args: Prisma.NotificacaoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificacaoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificacaoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotificacaoPayload>
          }
          aggregate: {
            args: Prisma.NotificacaoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotificacao>
          }
          groupBy: {
            args: Prisma.NotificacaoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificacaoCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificacaoCountAggregateOutputType> | number
          }
        }
      }
      Pagamento: {
        payload: PagamentoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.PagamentoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagamentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PagamentoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagamentoPayload>
          }
          findFirst: {
            args: Prisma.PagamentoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagamentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PagamentoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagamentoPayload>
          }
          findMany: {
            args: Prisma.PagamentoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagamentoPayload>[]
          }
          create: {
            args: Prisma.PagamentoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagamentoPayload>
          }
          createMany: {
            args: Prisma.PagamentoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PagamentoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagamentoPayload>
          }
          update: {
            args: Prisma.PagamentoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagamentoPayload>
          }
          deleteMany: {
            args: Prisma.PagamentoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PagamentoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PagamentoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagamentoPayload>
          }
          aggregate: {
            args: Prisma.PagamentoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePagamento>
          }
          groupBy: {
            args: Prisma.PagamentoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PagamentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PagamentoCountArgs<ExtArgs>,
            result: $Utils.Optional<PagamentoCountAggregateOutputType> | number
          }
        }
      }
      Rifa: {
        payload: RifaPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.RifaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RifaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RifaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RifaPayload>
          }
          findFirst: {
            args: Prisma.RifaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RifaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RifaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RifaPayload>
          }
          findMany: {
            args: Prisma.RifaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RifaPayload>[]
          }
          create: {
            args: Prisma.RifaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RifaPayload>
          }
          createMany: {
            args: Prisma.RifaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RifaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RifaPayload>
          }
          update: {
            args: Prisma.RifaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RifaPayload>
          }
          deleteMany: {
            args: Prisma.RifaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RifaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RifaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RifaPayload>
          }
          aggregate: {
            args: Prisma.RifaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRifa>
          }
          groupBy: {
            args: Prisma.RifaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RifaGroupByOutputType>[]
          }
          count: {
            args: Prisma.RifaCountArgs<ExtArgs>,
            result: $Utils.Optional<RifaCountAggregateOutputType> | number
          }
        }
      }
      Suporte: {
        payload: SuportePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SuporteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuportePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SuporteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuportePayload>
          }
          findFirst: {
            args: Prisma.SuporteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuportePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SuporteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuportePayload>
          }
          findMany: {
            args: Prisma.SuporteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuportePayload>[]
          }
          create: {
            args: Prisma.SuporteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuportePayload>
          }
          createMany: {
            args: Prisma.SuporteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SuporteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuportePayload>
          }
          update: {
            args: Prisma.SuporteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuportePayload>
          }
          deleteMany: {
            args: Prisma.SuporteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SuporteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SuporteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuportePayload>
          }
          aggregate: {
            args: Prisma.SuporteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSuporte>
          }
          groupBy: {
            args: Prisma.SuporteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SuporteGroupByOutputType>[]
          }
          count: {
            args: Prisma.SuporteCountArgs<ExtArgs>,
            result: $Utils.Optional<SuporteCountAggregateOutputType> | number
          }
        }
      }
      Utilizador: {
        payload: UtilizadorPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UtilizadorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UtilizadorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UtilizadorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UtilizadorPayload>
          }
          findFirst: {
            args: Prisma.UtilizadorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UtilizadorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UtilizadorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UtilizadorPayload>
          }
          findMany: {
            args: Prisma.UtilizadorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UtilizadorPayload>[]
          }
          create: {
            args: Prisma.UtilizadorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UtilizadorPayload>
          }
          createMany: {
            args: Prisma.UtilizadorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UtilizadorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UtilizadorPayload>
          }
          update: {
            args: Prisma.UtilizadorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UtilizadorPayload>
          }
          deleteMany: {
            args: Prisma.UtilizadorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UtilizadorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UtilizadorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UtilizadorPayload>
          }
          aggregate: {
            args: Prisma.UtilizadorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUtilizador>
          }
          groupBy: {
            args: Prisma.UtilizadorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UtilizadorGroupByOutputType>[]
          }
          count: {
            args: Prisma.UtilizadorCountArgs<ExtArgs>,
            result: $Utils.Optional<UtilizadorCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AdministradorCountOutputType
   */


  export type AdministradorCountOutputType = {
    Anuncio: number
    Evento: number
    MensagemSuporte: number
    Notificacao: number
    Rifa: number
  }

  export type AdministradorCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Anuncio?: boolean | AdministradorCountOutputTypeCountAnuncioArgs
    Evento?: boolean | AdministradorCountOutputTypeCountEventoArgs
    MensagemSuporte?: boolean | AdministradorCountOutputTypeCountMensagemSuporteArgs
    Notificacao?: boolean | AdministradorCountOutputTypeCountNotificacaoArgs
    Rifa?: boolean | AdministradorCountOutputTypeCountRifaArgs
  }

  // Custom InputTypes

  /**
   * AdministradorCountOutputType without action
   */
  export type AdministradorCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdministradorCountOutputType
     */
    select?: AdministradorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AdministradorCountOutputType without action
   */
  export type AdministradorCountOutputTypeCountAnuncioArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AnuncioWhereInput
  }


  /**
   * AdministradorCountOutputType without action
   */
  export type AdministradorCountOutputTypeCountEventoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EventoWhereInput
  }


  /**
   * AdministradorCountOutputType without action
   */
  export type AdministradorCountOutputTypeCountMensagemSuporteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MensagemSuporteWhereInput
  }


  /**
   * AdministradorCountOutputType without action
   */
  export type AdministradorCountOutputTypeCountNotificacaoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NotificacaoWhereInput
  }


  /**
   * AdministradorCountOutputType without action
   */
  export type AdministradorCountOutputTypeCountRifaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RifaWhereInput
  }



  /**
   * Count Type AnuncioCountOutputType
   */


  export type AnuncioCountOutputType = {
    CandidaturaVoluntariado: number
  }

  export type AnuncioCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    CandidaturaVoluntariado?: boolean | AnuncioCountOutputTypeCountCandidaturaVoluntariadoArgs
  }

  // Custom InputTypes

  /**
   * AnuncioCountOutputType without action
   */
  export type AnuncioCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnuncioCountOutputType
     */
    select?: AnuncioCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AnuncioCountOutputType without action
   */
  export type AnuncioCountOutputTypeCountCandidaturaVoluntariadoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CandidaturaVoluntariadoWhereInput
  }



  /**
   * Count Type CategoriaEventoCountOutputType
   */


  export type CategoriaEventoCountOutputType = {
    Evento: number
  }

  export type CategoriaEventoCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Evento?: boolean | CategoriaEventoCountOutputTypeCountEventoArgs
  }

  // Custom InputTypes

  /**
   * CategoriaEventoCountOutputType without action
   */
  export type CategoriaEventoCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEventoCountOutputType
     */
    select?: CategoriaEventoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoriaEventoCountOutputType without action
   */
  export type CategoriaEventoCountOutputTypeCountEventoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EventoWhereInput
  }



  /**
   * Count Type EventoCountOutputType
   */


  export type EventoCountOutputType = {
    Anuncio: number
    AvaliacaoEvento: number
    Rifa: number
  }

  export type EventoCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Anuncio?: boolean | EventoCountOutputTypeCountAnuncioArgs
    AvaliacaoEvento?: boolean | EventoCountOutputTypeCountAvaliacaoEventoArgs
    Rifa?: boolean | EventoCountOutputTypeCountRifaArgs
  }

  // Custom InputTypes

  /**
   * EventoCountOutputType without action
   */
  export type EventoCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventoCountOutputType
     */
    select?: EventoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EventoCountOutputType without action
   */
  export type EventoCountOutputTypeCountAnuncioArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AnuncioWhereInput
  }


  /**
   * EventoCountOutputType without action
   */
  export type EventoCountOutputTypeCountAvaliacaoEventoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AvaliacaoEventoWhereInput
  }


  /**
   * EventoCountOutputType without action
   */
  export type EventoCountOutputTypeCountRifaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RifaWhereInput
  }



  /**
   * Count Type RifaCountOutputType
   */


  export type RifaCountOutputType = {
    CompraRifa: number
  }

  export type RifaCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    CompraRifa?: boolean | RifaCountOutputTypeCountCompraRifaArgs
  }

  // Custom InputTypes

  /**
   * RifaCountOutputType without action
   */
  export type RifaCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RifaCountOutputType
     */
    select?: RifaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RifaCountOutputType without action
   */
  export type RifaCountOutputTypeCountCompraRifaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CompraRifaWhereInput
  }



  /**
   * Count Type UtilizadorCountOutputType
   */


  export type UtilizadorCountOutputType = {
    AvaliacaoEvento: number
    CandidaturaVoluntariado: number
    CompraRifa: number
    Doacao: number
    MensagemSuporte: number
    Notificacao: number
    Pagamento: number
  }

  export type UtilizadorCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    AvaliacaoEvento?: boolean | UtilizadorCountOutputTypeCountAvaliacaoEventoArgs
    CandidaturaVoluntariado?: boolean | UtilizadorCountOutputTypeCountCandidaturaVoluntariadoArgs
    CompraRifa?: boolean | UtilizadorCountOutputTypeCountCompraRifaArgs
    Doacao?: boolean | UtilizadorCountOutputTypeCountDoacaoArgs
    MensagemSuporte?: boolean | UtilizadorCountOutputTypeCountMensagemSuporteArgs
    Notificacao?: boolean | UtilizadorCountOutputTypeCountNotificacaoArgs
    Pagamento?: boolean | UtilizadorCountOutputTypeCountPagamentoArgs
  }

  // Custom InputTypes

  /**
   * UtilizadorCountOutputType without action
   */
  export type UtilizadorCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UtilizadorCountOutputType
     */
    select?: UtilizadorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UtilizadorCountOutputType without action
   */
  export type UtilizadorCountOutputTypeCountAvaliacaoEventoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AvaliacaoEventoWhereInput
  }


  /**
   * UtilizadorCountOutputType without action
   */
  export type UtilizadorCountOutputTypeCountCandidaturaVoluntariadoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CandidaturaVoluntariadoWhereInput
  }


  /**
   * UtilizadorCountOutputType without action
   */
  export type UtilizadorCountOutputTypeCountCompraRifaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CompraRifaWhereInput
  }


  /**
   * UtilizadorCountOutputType without action
   */
  export type UtilizadorCountOutputTypeCountDoacaoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DoacaoWhereInput
  }


  /**
   * UtilizadorCountOutputType without action
   */
  export type UtilizadorCountOutputTypeCountMensagemSuporteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MensagemSuporteWhereInput
  }


  /**
   * UtilizadorCountOutputType without action
   */
  export type UtilizadorCountOutputTypeCountNotificacaoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NotificacaoWhereInput
  }


  /**
   * UtilizadorCountOutputType without action
   */
  export type UtilizadorCountOutputTypeCountPagamentoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PagamentoWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Administrador
   */


  export type AggregateAdministrador = {
    _count: AdministradorCountAggregateOutputType | null
    _avg: AdministradorAvgAggregateOutputType | null
    _sum: AdministradorSumAggregateOutputType | null
    _min: AdministradorMinAggregateOutputType | null
    _max: AdministradorMaxAggregateOutputType | null
  }

  export type AdministradorAvgAggregateOutputType = {
    id: number | null
  }

  export type AdministradorSumAggregateOutputType = {
    id: number | null
  }

  export type AdministradorMinAggregateOutputType = {
    id: number | null
    username: string | null
    nome: string | null
    email: string | null
    password_hash: string | null
  }

  export type AdministradorMaxAggregateOutputType = {
    id: number | null
    username: string | null
    nome: string | null
    email: string | null
    password_hash: string | null
  }

  export type AdministradorCountAggregateOutputType = {
    id: number
    username: number
    nome: number
    email: number
    password_hash: number
    _all: number
  }


  export type AdministradorAvgAggregateInputType = {
    id?: true
  }

  export type AdministradorSumAggregateInputType = {
    id?: true
  }

  export type AdministradorMinAggregateInputType = {
    id?: true
    username?: true
    nome?: true
    email?: true
    password_hash?: true
  }

  export type AdministradorMaxAggregateInputType = {
    id?: true
    username?: true
    nome?: true
    email?: true
    password_hash?: true
  }

  export type AdministradorCountAggregateInputType = {
    id?: true
    username?: true
    nome?: true
    email?: true
    password_hash?: true
    _all?: true
  }

  export type AdministradorAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Administrador to aggregate.
     */
    where?: AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administradors to fetch.
     */
    orderBy?: Enumerable<AdministradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Administradors
    **/
    _count?: true | AdministradorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdministradorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdministradorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdministradorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdministradorMaxAggregateInputType
  }

  export type GetAdministradorAggregateType<T extends AdministradorAggregateArgs> = {
        [P in keyof T & keyof AggregateAdministrador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdministrador[P]>
      : GetScalarType<T[P], AggregateAdministrador[P]>
  }




  export type AdministradorGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AdministradorWhereInput
    orderBy?: Enumerable<AdministradorOrderByWithAggregationInput>
    by: AdministradorScalarFieldEnum[]
    having?: AdministradorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdministradorCountAggregateInputType | true
    _avg?: AdministradorAvgAggregateInputType
    _sum?: AdministradorSumAggregateInputType
    _min?: AdministradorMinAggregateInputType
    _max?: AdministradorMaxAggregateInputType
  }


  export type AdministradorGroupByOutputType = {
    id: number
    username: string
    nome: string
    email: string
    password_hash: string
    _count: AdministradorCountAggregateOutputType | null
    _avg: AdministradorAvgAggregateOutputType | null
    _sum: AdministradorSumAggregateOutputType | null
    _min: AdministradorMinAggregateOutputType | null
    _max: AdministradorMaxAggregateOutputType | null
  }

  type GetAdministradorGroupByPayload<T extends AdministradorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AdministradorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdministradorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdministradorGroupByOutputType[P]>
            : GetScalarType<T[P], AdministradorGroupByOutputType[P]>
        }
      >
    >


  export type AdministradorSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    nome?: boolean
    email?: boolean
    password_hash?: boolean
    Anuncio?: boolean | Administrador$AnuncioArgs<ExtArgs>
    Evento?: boolean | Administrador$EventoArgs<ExtArgs>
    MensagemSuporte?: boolean | Administrador$MensagemSuporteArgs<ExtArgs>
    Notificacao?: boolean | Administrador$NotificacaoArgs<ExtArgs>
    Rifa?: boolean | Administrador$RifaArgs<ExtArgs>
    _count?: boolean | AdministradorCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["administrador"]>

  export type AdministradorSelectScalar = {
    id?: boolean
    username?: boolean
    nome?: boolean
    email?: boolean
    password_hash?: boolean
  }

  export type AdministradorInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Anuncio?: boolean | Administrador$AnuncioArgs<ExtArgs>
    Evento?: boolean | Administrador$EventoArgs<ExtArgs>
    MensagemSuporte?: boolean | Administrador$MensagemSuporteArgs<ExtArgs>
    Notificacao?: boolean | Administrador$NotificacaoArgs<ExtArgs>
    Rifa?: boolean | Administrador$RifaArgs<ExtArgs>
    _count?: boolean | AdministradorCountOutputTypeArgs<ExtArgs>
  }


  type AdministradorGetPayload<S extends boolean | null | undefined | AdministradorArgs> = $Types.GetResult<AdministradorPayload, S>

  type AdministradorCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AdministradorFindManyArgs, 'select' | 'include'> & {
      select?: AdministradorCountAggregateInputType | true
    }

  export interface AdministradorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Administrador'], meta: { name: 'Administrador' } }
    /**
     * Find zero or one Administrador that matches the filter.
     * @param {AdministradorFindUniqueArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdministradorFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AdministradorFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Administrador'> extends True ? Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Administrador that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdministradorFindUniqueOrThrowArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdministradorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdministradorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Administrador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorFindFirstArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdministradorFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AdministradorFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Administrador'> extends True ? Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Administrador that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorFindFirstOrThrowArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdministradorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdministradorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Administradors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Administradors
     * const administradors = await prisma.administrador.findMany()
     * 
     * // Get first 10 Administradors
     * const administradors = await prisma.administrador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const administradorWithIdOnly = await prisma.administrador.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdministradorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdministradorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Administrador.
     * @param {AdministradorCreateArgs} args - Arguments to create a Administrador.
     * @example
     * // Create one Administrador
     * const Administrador = await prisma.administrador.create({
     *   data: {
     *     // ... data to create a Administrador
     *   }
     * })
     * 
    **/
    create<T extends AdministradorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdministradorCreateArgs<ExtArgs>>
    ): Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Administradors.
     *     @param {AdministradorCreateManyArgs} args - Arguments to create many Administradors.
     *     @example
     *     // Create many Administradors
     *     const administrador = await prisma.administrador.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdministradorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdministradorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Administrador.
     * @param {AdministradorDeleteArgs} args - Arguments to delete one Administrador.
     * @example
     * // Delete one Administrador
     * const Administrador = await prisma.administrador.delete({
     *   where: {
     *     // ... filter to delete one Administrador
     *   }
     * })
     * 
    **/
    delete<T extends AdministradorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdministradorDeleteArgs<ExtArgs>>
    ): Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Administrador.
     * @param {AdministradorUpdateArgs} args - Arguments to update one Administrador.
     * @example
     * // Update one Administrador
     * const administrador = await prisma.administrador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdministradorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdministradorUpdateArgs<ExtArgs>>
    ): Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Administradors.
     * @param {AdministradorDeleteManyArgs} args - Arguments to filter Administradors to delete.
     * @example
     * // Delete a few Administradors
     * const { count } = await prisma.administrador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdministradorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdministradorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Administradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Administradors
     * const administrador = await prisma.administrador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdministradorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdministradorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Administrador.
     * @param {AdministradorUpsertArgs} args - Arguments to update or create a Administrador.
     * @example
     * // Update or create a Administrador
     * const administrador = await prisma.administrador.upsert({
     *   create: {
     *     // ... data to create a Administrador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Administrador we want to update
     *   }
     * })
    **/
    upsert<T extends AdministradorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdministradorUpsertArgs<ExtArgs>>
    ): Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Administradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorCountArgs} args - Arguments to filter Administradors to count.
     * @example
     * // Count the number of Administradors
     * const count = await prisma.administrador.count({
     *   where: {
     *     // ... the filter for the Administradors we want to count
     *   }
     * })
    **/
    count<T extends AdministradorCountArgs>(
      args?: Subset<T, AdministradorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdministradorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Administrador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdministradorAggregateArgs>(args: Subset<T, AdministradorAggregateArgs>): Prisma.PrismaPromise<GetAdministradorAggregateType<T>>

    /**
     * Group by Administrador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdministradorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdministradorGroupByArgs['orderBy'] }
        : { orderBy?: AdministradorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdministradorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdministradorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Administrador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AdministradorClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Anuncio<T extends Administrador$AnuncioArgs<ExtArgs> = {}>(args?: Subset<T, Administrador$AnuncioArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AnuncioPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Evento<T extends Administrador$EventoArgs<ExtArgs> = {}>(args?: Subset<T, Administrador$EventoArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<EventoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    MensagemSuporte<T extends Administrador$MensagemSuporteArgs<ExtArgs> = {}>(args?: Subset<T, Administrador$MensagemSuporteArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MensagemSuportePayload<ExtArgs>, T, 'findMany', never>| Null>;

    Notificacao<T extends Administrador$NotificacaoArgs<ExtArgs> = {}>(args?: Subset<T, Administrador$NotificacaoArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<NotificacaoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Rifa<T extends Administrador$RifaArgs<ExtArgs> = {}>(args?: Subset<T, Administrador$RifaArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<RifaPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Administrador base type for findUnique actions
   */
  export type AdministradorFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude<ExtArgs> | null
    /**
     * Filter, which Administrador to fetch.
     */
    where: AdministradorWhereUniqueInput
  }

  /**
   * Administrador findUnique
   */
  export interface AdministradorFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AdministradorFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Administrador findUniqueOrThrow
   */
  export type AdministradorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude<ExtArgs> | null
    /**
     * Filter, which Administrador to fetch.
     */
    where: AdministradorWhereUniqueInput
  }


  /**
   * Administrador base type for findFirst actions
   */
  export type AdministradorFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude<ExtArgs> | null
    /**
     * Filter, which Administrador to fetch.
     */
    where?: AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administradors to fetch.
     */
    orderBy?: Enumerable<AdministradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Administradors.
     */
    cursor?: AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Administradors.
     */
    distinct?: Enumerable<AdministradorScalarFieldEnum>
  }

  /**
   * Administrador findFirst
   */
  export interface AdministradorFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AdministradorFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Administrador findFirstOrThrow
   */
  export type AdministradorFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude<ExtArgs> | null
    /**
     * Filter, which Administrador to fetch.
     */
    where?: AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administradors to fetch.
     */
    orderBy?: Enumerable<AdministradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Administradors.
     */
    cursor?: AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Administradors.
     */
    distinct?: Enumerable<AdministradorScalarFieldEnum>
  }


  /**
   * Administrador findMany
   */
  export type AdministradorFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude<ExtArgs> | null
    /**
     * Filter, which Administradors to fetch.
     */
    where?: AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administradors to fetch.
     */
    orderBy?: Enumerable<AdministradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Administradors.
     */
    cursor?: AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administradors.
     */
    skip?: number
    distinct?: Enumerable<AdministradorScalarFieldEnum>
  }


  /**
   * Administrador create
   */
  export type AdministradorCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude<ExtArgs> | null
    /**
     * The data needed to create a Administrador.
     */
    data: XOR<AdministradorCreateInput, AdministradorUncheckedCreateInput>
  }


  /**
   * Administrador createMany
   */
  export type AdministradorCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Administradors.
     */
    data: Enumerable<AdministradorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Administrador update
   */
  export type AdministradorUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude<ExtArgs> | null
    /**
     * The data needed to update a Administrador.
     */
    data: XOR<AdministradorUpdateInput, AdministradorUncheckedUpdateInput>
    /**
     * Choose, which Administrador to update.
     */
    where: AdministradorWhereUniqueInput
  }


  /**
   * Administrador updateMany
   */
  export type AdministradorUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Administradors.
     */
    data: XOR<AdministradorUpdateManyMutationInput, AdministradorUncheckedUpdateManyInput>
    /**
     * Filter which Administradors to update
     */
    where?: AdministradorWhereInput
  }


  /**
   * Administrador upsert
   */
  export type AdministradorUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude<ExtArgs> | null
    /**
     * The filter to search for the Administrador to update in case it exists.
     */
    where: AdministradorWhereUniqueInput
    /**
     * In case the Administrador found by the `where` argument doesn't exist, create a new Administrador with this data.
     */
    create: XOR<AdministradorCreateInput, AdministradorUncheckedCreateInput>
    /**
     * In case the Administrador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdministradorUpdateInput, AdministradorUncheckedUpdateInput>
  }


  /**
   * Administrador delete
   */
  export type AdministradorDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude<ExtArgs> | null
    /**
     * Filter which Administrador to delete.
     */
    where: AdministradorWhereUniqueInput
  }


  /**
   * Administrador deleteMany
   */
  export type AdministradorDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Administradors to delete
     */
    where?: AdministradorWhereInput
  }


  /**
   * Administrador.Anuncio
   */
  export type Administrador$AnuncioArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anuncio
     */
    select?: AnuncioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnuncioInclude<ExtArgs> | null
    where?: AnuncioWhereInput
    orderBy?: Enumerable<AnuncioOrderByWithRelationInput>
    cursor?: AnuncioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AnuncioScalarFieldEnum>
  }


  /**
   * Administrador.Evento
   */
  export type Administrador$EventoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    where?: EventoWhereInput
    orderBy?: Enumerable<EventoOrderByWithRelationInput>
    cursor?: EventoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EventoScalarFieldEnum>
  }


  /**
   * Administrador.MensagemSuporte
   */
  export type Administrador$MensagemSuporteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemSuporte
     */
    select?: MensagemSuporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensagemSuporteInclude<ExtArgs> | null
    where?: MensagemSuporteWhereInput
    orderBy?: Enumerable<MensagemSuporteOrderByWithRelationInput>
    cursor?: MensagemSuporteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MensagemSuporteScalarFieldEnum>
  }


  /**
   * Administrador.Notificacao
   */
  export type Administrador$NotificacaoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificacaoInclude<ExtArgs> | null
    where?: NotificacaoWhereInput
    orderBy?: Enumerable<NotificacaoOrderByWithRelationInput>
    cursor?: NotificacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NotificacaoScalarFieldEnum>
  }


  /**
   * Administrador.Rifa
   */
  export type Administrador$RifaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rifa
     */
    select?: RifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RifaInclude<ExtArgs> | null
    where?: RifaWhereInput
    orderBy?: Enumerable<RifaOrderByWithRelationInput>
    cursor?: RifaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RifaScalarFieldEnum>
  }


  /**
   * Administrador without action
   */
  export type AdministradorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude<ExtArgs> | null
  }



  /**
   * Model Anuncio
   */


  export type AggregateAnuncio = {
    _count: AnuncioCountAggregateOutputType | null
    _avg: AnuncioAvgAggregateOutputType | null
    _sum: AnuncioSumAggregateOutputType | null
    _min: AnuncioMinAggregateOutputType | null
    _max: AnuncioMaxAggregateOutputType | null
  }

  export type AnuncioAvgAggregateOutputType = {
    id: number | null
    id_administrador: number | null
    id_evento: number | null
  }

  export type AnuncioSumAggregateOutputType = {
    id: number | null
    id_administrador: number | null
    id_evento: number | null
  }

  export type AnuncioMinAggregateOutputType = {
    id: number | null
    cargo: string | null
    descricao: string | null
    data_publicacao: Date | null
    id_administrador: number | null
    id_evento: number | null
  }

  export type AnuncioMaxAggregateOutputType = {
    id: number | null
    cargo: string | null
    descricao: string | null
    data_publicacao: Date | null
    id_administrador: number | null
    id_evento: number | null
  }

  export type AnuncioCountAggregateOutputType = {
    id: number
    cargo: number
    descricao: number
    data_publicacao: number
    id_administrador: number
    id_evento: number
    _all: number
  }


  export type AnuncioAvgAggregateInputType = {
    id?: true
    id_administrador?: true
    id_evento?: true
  }

  export type AnuncioSumAggregateInputType = {
    id?: true
    id_administrador?: true
    id_evento?: true
  }

  export type AnuncioMinAggregateInputType = {
    id?: true
    cargo?: true
    descricao?: true
    data_publicacao?: true
    id_administrador?: true
    id_evento?: true
  }

  export type AnuncioMaxAggregateInputType = {
    id?: true
    cargo?: true
    descricao?: true
    data_publicacao?: true
    id_administrador?: true
    id_evento?: true
  }

  export type AnuncioCountAggregateInputType = {
    id?: true
    cargo?: true
    descricao?: true
    data_publicacao?: true
    id_administrador?: true
    id_evento?: true
    _all?: true
  }

  export type AnuncioAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Anuncio to aggregate.
     */
    where?: AnuncioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anuncios to fetch.
     */
    orderBy?: Enumerable<AnuncioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnuncioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anuncios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anuncios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Anuncios
    **/
    _count?: true | AnuncioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnuncioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnuncioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnuncioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnuncioMaxAggregateInputType
  }

  export type GetAnuncioAggregateType<T extends AnuncioAggregateArgs> = {
        [P in keyof T & keyof AggregateAnuncio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnuncio[P]>
      : GetScalarType<T[P], AggregateAnuncio[P]>
  }




  export type AnuncioGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AnuncioWhereInput
    orderBy?: Enumerable<AnuncioOrderByWithAggregationInput>
    by: AnuncioScalarFieldEnum[]
    having?: AnuncioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnuncioCountAggregateInputType | true
    _avg?: AnuncioAvgAggregateInputType
    _sum?: AnuncioSumAggregateInputType
    _min?: AnuncioMinAggregateInputType
    _max?: AnuncioMaxAggregateInputType
  }


  export type AnuncioGroupByOutputType = {
    id: number
    cargo: string
    descricao: string
    data_publicacao: Date | null
    id_administrador: number
    id_evento: number
    _count: AnuncioCountAggregateOutputType | null
    _avg: AnuncioAvgAggregateOutputType | null
    _sum: AnuncioSumAggregateOutputType | null
    _min: AnuncioMinAggregateOutputType | null
    _max: AnuncioMaxAggregateOutputType | null
  }

  type GetAnuncioGroupByPayload<T extends AnuncioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AnuncioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnuncioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnuncioGroupByOutputType[P]>
            : GetScalarType<T[P], AnuncioGroupByOutputType[P]>
        }
      >
    >


  export type AnuncioSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cargo?: boolean
    descricao?: boolean
    data_publicacao?: boolean
    id_administrador?: boolean
    id_evento?: boolean
    Administrador?: boolean | AdministradorArgs<ExtArgs>
    Evento?: boolean | EventoArgs<ExtArgs>
    CandidaturaVoluntariado?: boolean | Anuncio$CandidaturaVoluntariadoArgs<ExtArgs>
    _count?: boolean | AnuncioCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["anuncio"]>

  export type AnuncioSelectScalar = {
    id?: boolean
    cargo?: boolean
    descricao?: boolean
    data_publicacao?: boolean
    id_administrador?: boolean
    id_evento?: boolean
  }

  export type AnuncioInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Administrador?: boolean | AdministradorArgs<ExtArgs>
    Evento?: boolean | EventoArgs<ExtArgs>
    CandidaturaVoluntariado?: boolean | Anuncio$CandidaturaVoluntariadoArgs<ExtArgs>
    _count?: boolean | AnuncioCountOutputTypeArgs<ExtArgs>
  }


  type AnuncioGetPayload<S extends boolean | null | undefined | AnuncioArgs> = $Types.GetResult<AnuncioPayload, S>

  type AnuncioCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AnuncioFindManyArgs, 'select' | 'include'> & {
      select?: AnuncioCountAggregateInputType | true
    }

  export interface AnuncioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Anuncio'], meta: { name: 'Anuncio' } }
    /**
     * Find zero or one Anuncio that matches the filter.
     * @param {AnuncioFindUniqueArgs} args - Arguments to find a Anuncio
     * @example
     * // Get one Anuncio
     * const anuncio = await prisma.anuncio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AnuncioFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AnuncioFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Anuncio'> extends True ? Prisma__AnuncioClient<$Types.GetResult<AnuncioPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AnuncioClient<$Types.GetResult<AnuncioPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Anuncio that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AnuncioFindUniqueOrThrowArgs} args - Arguments to find a Anuncio
     * @example
     * // Get one Anuncio
     * const anuncio = await prisma.anuncio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AnuncioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AnuncioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AnuncioClient<$Types.GetResult<AnuncioPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Anuncio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnuncioFindFirstArgs} args - Arguments to find a Anuncio
     * @example
     * // Get one Anuncio
     * const anuncio = await prisma.anuncio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AnuncioFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AnuncioFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Anuncio'> extends True ? Prisma__AnuncioClient<$Types.GetResult<AnuncioPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AnuncioClient<$Types.GetResult<AnuncioPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Anuncio that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnuncioFindFirstOrThrowArgs} args - Arguments to find a Anuncio
     * @example
     * // Get one Anuncio
     * const anuncio = await prisma.anuncio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AnuncioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AnuncioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AnuncioClient<$Types.GetResult<AnuncioPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Anuncios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnuncioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Anuncios
     * const anuncios = await prisma.anuncio.findMany()
     * 
     * // Get first 10 Anuncios
     * const anuncios = await prisma.anuncio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const anuncioWithIdOnly = await prisma.anuncio.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AnuncioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnuncioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AnuncioPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Anuncio.
     * @param {AnuncioCreateArgs} args - Arguments to create a Anuncio.
     * @example
     * // Create one Anuncio
     * const Anuncio = await prisma.anuncio.create({
     *   data: {
     *     // ... data to create a Anuncio
     *   }
     * })
     * 
    **/
    create<T extends AnuncioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AnuncioCreateArgs<ExtArgs>>
    ): Prisma__AnuncioClient<$Types.GetResult<AnuncioPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Anuncios.
     *     @param {AnuncioCreateManyArgs} args - Arguments to create many Anuncios.
     *     @example
     *     // Create many Anuncios
     *     const anuncio = await prisma.anuncio.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AnuncioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnuncioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Anuncio.
     * @param {AnuncioDeleteArgs} args - Arguments to delete one Anuncio.
     * @example
     * // Delete one Anuncio
     * const Anuncio = await prisma.anuncio.delete({
     *   where: {
     *     // ... filter to delete one Anuncio
     *   }
     * })
     * 
    **/
    delete<T extends AnuncioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AnuncioDeleteArgs<ExtArgs>>
    ): Prisma__AnuncioClient<$Types.GetResult<AnuncioPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Anuncio.
     * @param {AnuncioUpdateArgs} args - Arguments to update one Anuncio.
     * @example
     * // Update one Anuncio
     * const anuncio = await prisma.anuncio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AnuncioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AnuncioUpdateArgs<ExtArgs>>
    ): Prisma__AnuncioClient<$Types.GetResult<AnuncioPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Anuncios.
     * @param {AnuncioDeleteManyArgs} args - Arguments to filter Anuncios to delete.
     * @example
     * // Delete a few Anuncios
     * const { count } = await prisma.anuncio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AnuncioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AnuncioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anuncios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnuncioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Anuncios
     * const anuncio = await prisma.anuncio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AnuncioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AnuncioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Anuncio.
     * @param {AnuncioUpsertArgs} args - Arguments to update or create a Anuncio.
     * @example
     * // Update or create a Anuncio
     * const anuncio = await prisma.anuncio.upsert({
     *   create: {
     *     // ... data to create a Anuncio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Anuncio we want to update
     *   }
     * })
    **/
    upsert<T extends AnuncioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AnuncioUpsertArgs<ExtArgs>>
    ): Prisma__AnuncioClient<$Types.GetResult<AnuncioPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Anuncios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnuncioCountArgs} args - Arguments to filter Anuncios to count.
     * @example
     * // Count the number of Anuncios
     * const count = await prisma.anuncio.count({
     *   where: {
     *     // ... the filter for the Anuncios we want to count
     *   }
     * })
    **/
    count<T extends AnuncioCountArgs>(
      args?: Subset<T, AnuncioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnuncioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Anuncio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnuncioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnuncioAggregateArgs>(args: Subset<T, AnuncioAggregateArgs>): Prisma.PrismaPromise<GetAnuncioAggregateType<T>>

    /**
     * Group by Anuncio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnuncioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnuncioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnuncioGroupByArgs['orderBy'] }
        : { orderBy?: AnuncioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnuncioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnuncioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Anuncio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AnuncioClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Administrador<T extends AdministradorArgs<ExtArgs> = {}>(args?: Subset<T, AdministradorArgs<ExtArgs>>): Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Evento<T extends EventoArgs<ExtArgs> = {}>(args?: Subset<T, EventoArgs<ExtArgs>>): Prisma__EventoClient<$Types.GetResult<EventoPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    CandidaturaVoluntariado<T extends Anuncio$CandidaturaVoluntariadoArgs<ExtArgs> = {}>(args?: Subset<T, Anuncio$CandidaturaVoluntariadoArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CandidaturaVoluntariadoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Anuncio base type for findUnique actions
   */
  export type AnuncioFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anuncio
     */
    select?: AnuncioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnuncioInclude<ExtArgs> | null
    /**
     * Filter, which Anuncio to fetch.
     */
    where: AnuncioWhereUniqueInput
  }

  /**
   * Anuncio findUnique
   */
  export interface AnuncioFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AnuncioFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Anuncio findUniqueOrThrow
   */
  export type AnuncioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anuncio
     */
    select?: AnuncioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnuncioInclude<ExtArgs> | null
    /**
     * Filter, which Anuncio to fetch.
     */
    where: AnuncioWhereUniqueInput
  }


  /**
   * Anuncio base type for findFirst actions
   */
  export type AnuncioFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anuncio
     */
    select?: AnuncioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnuncioInclude<ExtArgs> | null
    /**
     * Filter, which Anuncio to fetch.
     */
    where?: AnuncioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anuncios to fetch.
     */
    orderBy?: Enumerable<AnuncioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anuncios.
     */
    cursor?: AnuncioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anuncios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anuncios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anuncios.
     */
    distinct?: Enumerable<AnuncioScalarFieldEnum>
  }

  /**
   * Anuncio findFirst
   */
  export interface AnuncioFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AnuncioFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Anuncio findFirstOrThrow
   */
  export type AnuncioFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anuncio
     */
    select?: AnuncioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnuncioInclude<ExtArgs> | null
    /**
     * Filter, which Anuncio to fetch.
     */
    where?: AnuncioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anuncios to fetch.
     */
    orderBy?: Enumerable<AnuncioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anuncios.
     */
    cursor?: AnuncioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anuncios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anuncios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anuncios.
     */
    distinct?: Enumerable<AnuncioScalarFieldEnum>
  }


  /**
   * Anuncio findMany
   */
  export type AnuncioFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anuncio
     */
    select?: AnuncioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnuncioInclude<ExtArgs> | null
    /**
     * Filter, which Anuncios to fetch.
     */
    where?: AnuncioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anuncios to fetch.
     */
    orderBy?: Enumerable<AnuncioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Anuncios.
     */
    cursor?: AnuncioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anuncios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anuncios.
     */
    skip?: number
    distinct?: Enumerable<AnuncioScalarFieldEnum>
  }


  /**
   * Anuncio create
   */
  export type AnuncioCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anuncio
     */
    select?: AnuncioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnuncioInclude<ExtArgs> | null
    /**
     * The data needed to create a Anuncio.
     */
    data: XOR<AnuncioCreateInput, AnuncioUncheckedCreateInput>
  }


  /**
   * Anuncio createMany
   */
  export type AnuncioCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Anuncios.
     */
    data: Enumerable<AnuncioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Anuncio update
   */
  export type AnuncioUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anuncio
     */
    select?: AnuncioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnuncioInclude<ExtArgs> | null
    /**
     * The data needed to update a Anuncio.
     */
    data: XOR<AnuncioUpdateInput, AnuncioUncheckedUpdateInput>
    /**
     * Choose, which Anuncio to update.
     */
    where: AnuncioWhereUniqueInput
  }


  /**
   * Anuncio updateMany
   */
  export type AnuncioUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Anuncios.
     */
    data: XOR<AnuncioUpdateManyMutationInput, AnuncioUncheckedUpdateManyInput>
    /**
     * Filter which Anuncios to update
     */
    where?: AnuncioWhereInput
  }


  /**
   * Anuncio upsert
   */
  export type AnuncioUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anuncio
     */
    select?: AnuncioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnuncioInclude<ExtArgs> | null
    /**
     * The filter to search for the Anuncio to update in case it exists.
     */
    where: AnuncioWhereUniqueInput
    /**
     * In case the Anuncio found by the `where` argument doesn't exist, create a new Anuncio with this data.
     */
    create: XOR<AnuncioCreateInput, AnuncioUncheckedCreateInput>
    /**
     * In case the Anuncio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnuncioUpdateInput, AnuncioUncheckedUpdateInput>
  }


  /**
   * Anuncio delete
   */
  export type AnuncioDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anuncio
     */
    select?: AnuncioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnuncioInclude<ExtArgs> | null
    /**
     * Filter which Anuncio to delete.
     */
    where: AnuncioWhereUniqueInput
  }


  /**
   * Anuncio deleteMany
   */
  export type AnuncioDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Anuncios to delete
     */
    where?: AnuncioWhereInput
  }


  /**
   * Anuncio.CandidaturaVoluntariado
   */
  export type Anuncio$CandidaturaVoluntariadoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaVoluntariado
     */
    select?: CandidaturaVoluntariadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidaturaVoluntariadoInclude<ExtArgs> | null
    where?: CandidaturaVoluntariadoWhereInput
    orderBy?: Enumerable<CandidaturaVoluntariadoOrderByWithRelationInput>
    cursor?: CandidaturaVoluntariadoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CandidaturaVoluntariadoScalarFieldEnum>
  }


  /**
   * Anuncio without action
   */
  export type AnuncioArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anuncio
     */
    select?: AnuncioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnuncioInclude<ExtArgs> | null
  }



  /**
   * Model AvaliacaoEvento
   */


  export type AggregateAvaliacaoEvento = {
    _count: AvaliacaoEventoCountAggregateOutputType | null
    _avg: AvaliacaoEventoAvgAggregateOutputType | null
    _sum: AvaliacaoEventoSumAggregateOutputType | null
    _min: AvaliacaoEventoMinAggregateOutputType | null
    _max: AvaliacaoEventoMaxAggregateOutputType | null
  }

  export type AvaliacaoEventoAvgAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_evento: number | null
    nota: number | null
  }

  export type AvaliacaoEventoSumAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_evento: number | null
    nota: number | null
  }

  export type AvaliacaoEventoMinAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_evento: number | null
    nota: number | null
    data_avaliacao: Date | null
  }

  export type AvaliacaoEventoMaxAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_evento: number | null
    nota: number | null
    data_avaliacao: Date | null
  }

  export type AvaliacaoEventoCountAggregateOutputType = {
    id: number
    id_utilizador: number
    id_evento: number
    nota: number
    data_avaliacao: number
    _all: number
  }


  export type AvaliacaoEventoAvgAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_evento?: true
    nota?: true
  }

  export type AvaliacaoEventoSumAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_evento?: true
    nota?: true
  }

  export type AvaliacaoEventoMinAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_evento?: true
    nota?: true
    data_avaliacao?: true
  }

  export type AvaliacaoEventoMaxAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_evento?: true
    nota?: true
    data_avaliacao?: true
  }

  export type AvaliacaoEventoCountAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_evento?: true
    nota?: true
    data_avaliacao?: true
    _all?: true
  }

  export type AvaliacaoEventoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AvaliacaoEvento to aggregate.
     */
    where?: AvaliacaoEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AvaliacaoEventos to fetch.
     */
    orderBy?: Enumerable<AvaliacaoEventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AvaliacaoEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AvaliacaoEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AvaliacaoEventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AvaliacaoEventos
    **/
    _count?: true | AvaliacaoEventoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AvaliacaoEventoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AvaliacaoEventoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AvaliacaoEventoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AvaliacaoEventoMaxAggregateInputType
  }

  export type GetAvaliacaoEventoAggregateType<T extends AvaliacaoEventoAggregateArgs> = {
        [P in keyof T & keyof AggregateAvaliacaoEvento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvaliacaoEvento[P]>
      : GetScalarType<T[P], AggregateAvaliacaoEvento[P]>
  }




  export type AvaliacaoEventoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AvaliacaoEventoWhereInput
    orderBy?: Enumerable<AvaliacaoEventoOrderByWithAggregationInput>
    by: AvaliacaoEventoScalarFieldEnum[]
    having?: AvaliacaoEventoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AvaliacaoEventoCountAggregateInputType | true
    _avg?: AvaliacaoEventoAvgAggregateInputType
    _sum?: AvaliacaoEventoSumAggregateInputType
    _min?: AvaliacaoEventoMinAggregateInputType
    _max?: AvaliacaoEventoMaxAggregateInputType
  }


  export type AvaliacaoEventoGroupByOutputType = {
    id: number
    id_utilizador: number
    id_evento: number
    nota: number | null
    data_avaliacao: Date | null
    _count: AvaliacaoEventoCountAggregateOutputType | null
    _avg: AvaliacaoEventoAvgAggregateOutputType | null
    _sum: AvaliacaoEventoSumAggregateOutputType | null
    _min: AvaliacaoEventoMinAggregateOutputType | null
    _max: AvaliacaoEventoMaxAggregateOutputType | null
  }

  type GetAvaliacaoEventoGroupByPayload<T extends AvaliacaoEventoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AvaliacaoEventoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AvaliacaoEventoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AvaliacaoEventoGroupByOutputType[P]>
            : GetScalarType<T[P], AvaliacaoEventoGroupByOutputType[P]>
        }
      >
    >


  export type AvaliacaoEventoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_utilizador?: boolean
    id_evento?: boolean
    nota?: boolean
    data_avaliacao?: boolean
    Utilizador?: boolean | UtilizadorArgs<ExtArgs>
    Evento?: boolean | EventoArgs<ExtArgs>
  }, ExtArgs["result"]["avaliacaoEvento"]>

  export type AvaliacaoEventoSelectScalar = {
    id?: boolean
    id_utilizador?: boolean
    id_evento?: boolean
    nota?: boolean
    data_avaliacao?: boolean
  }

  export type AvaliacaoEventoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Utilizador?: boolean | UtilizadorArgs<ExtArgs>
    Evento?: boolean | EventoArgs<ExtArgs>
  }


  type AvaliacaoEventoGetPayload<S extends boolean | null | undefined | AvaliacaoEventoArgs> = $Types.GetResult<AvaliacaoEventoPayload, S>

  type AvaliacaoEventoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AvaliacaoEventoFindManyArgs, 'select' | 'include'> & {
      select?: AvaliacaoEventoCountAggregateInputType | true
    }

  export interface AvaliacaoEventoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AvaliacaoEvento'], meta: { name: 'AvaliacaoEvento' } }
    /**
     * Find zero or one AvaliacaoEvento that matches the filter.
     * @param {AvaliacaoEventoFindUniqueArgs} args - Arguments to find a AvaliacaoEvento
     * @example
     * // Get one AvaliacaoEvento
     * const avaliacaoEvento = await prisma.avaliacaoEvento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AvaliacaoEventoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AvaliacaoEventoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AvaliacaoEvento'> extends True ? Prisma__AvaliacaoEventoClient<$Types.GetResult<AvaliacaoEventoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AvaliacaoEventoClient<$Types.GetResult<AvaliacaoEventoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one AvaliacaoEvento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AvaliacaoEventoFindUniqueOrThrowArgs} args - Arguments to find a AvaliacaoEvento
     * @example
     * // Get one AvaliacaoEvento
     * const avaliacaoEvento = await prisma.avaliacaoEvento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AvaliacaoEventoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AvaliacaoEventoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AvaliacaoEventoClient<$Types.GetResult<AvaliacaoEventoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first AvaliacaoEvento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacaoEventoFindFirstArgs} args - Arguments to find a AvaliacaoEvento
     * @example
     * // Get one AvaliacaoEvento
     * const avaliacaoEvento = await prisma.avaliacaoEvento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AvaliacaoEventoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AvaliacaoEventoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AvaliacaoEvento'> extends True ? Prisma__AvaliacaoEventoClient<$Types.GetResult<AvaliacaoEventoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AvaliacaoEventoClient<$Types.GetResult<AvaliacaoEventoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first AvaliacaoEvento that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacaoEventoFindFirstOrThrowArgs} args - Arguments to find a AvaliacaoEvento
     * @example
     * // Get one AvaliacaoEvento
     * const avaliacaoEvento = await prisma.avaliacaoEvento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AvaliacaoEventoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AvaliacaoEventoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AvaliacaoEventoClient<$Types.GetResult<AvaliacaoEventoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more AvaliacaoEventos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacaoEventoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AvaliacaoEventos
     * const avaliacaoEventos = await prisma.avaliacaoEvento.findMany()
     * 
     * // Get first 10 AvaliacaoEventos
     * const avaliacaoEventos = await prisma.avaliacaoEvento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const avaliacaoEventoWithIdOnly = await prisma.avaliacaoEvento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AvaliacaoEventoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AvaliacaoEventoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AvaliacaoEventoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a AvaliacaoEvento.
     * @param {AvaliacaoEventoCreateArgs} args - Arguments to create a AvaliacaoEvento.
     * @example
     * // Create one AvaliacaoEvento
     * const AvaliacaoEvento = await prisma.avaliacaoEvento.create({
     *   data: {
     *     // ... data to create a AvaliacaoEvento
     *   }
     * })
     * 
    **/
    create<T extends AvaliacaoEventoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AvaliacaoEventoCreateArgs<ExtArgs>>
    ): Prisma__AvaliacaoEventoClient<$Types.GetResult<AvaliacaoEventoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many AvaliacaoEventos.
     *     @param {AvaliacaoEventoCreateManyArgs} args - Arguments to create many AvaliacaoEventos.
     *     @example
     *     // Create many AvaliacaoEventos
     *     const avaliacaoEvento = await prisma.avaliacaoEvento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AvaliacaoEventoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AvaliacaoEventoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AvaliacaoEvento.
     * @param {AvaliacaoEventoDeleteArgs} args - Arguments to delete one AvaliacaoEvento.
     * @example
     * // Delete one AvaliacaoEvento
     * const AvaliacaoEvento = await prisma.avaliacaoEvento.delete({
     *   where: {
     *     // ... filter to delete one AvaliacaoEvento
     *   }
     * })
     * 
    **/
    delete<T extends AvaliacaoEventoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AvaliacaoEventoDeleteArgs<ExtArgs>>
    ): Prisma__AvaliacaoEventoClient<$Types.GetResult<AvaliacaoEventoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one AvaliacaoEvento.
     * @param {AvaliacaoEventoUpdateArgs} args - Arguments to update one AvaliacaoEvento.
     * @example
     * // Update one AvaliacaoEvento
     * const avaliacaoEvento = await prisma.avaliacaoEvento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AvaliacaoEventoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AvaliacaoEventoUpdateArgs<ExtArgs>>
    ): Prisma__AvaliacaoEventoClient<$Types.GetResult<AvaliacaoEventoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more AvaliacaoEventos.
     * @param {AvaliacaoEventoDeleteManyArgs} args - Arguments to filter AvaliacaoEventos to delete.
     * @example
     * // Delete a few AvaliacaoEventos
     * const { count } = await prisma.avaliacaoEvento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AvaliacaoEventoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AvaliacaoEventoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AvaliacaoEventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacaoEventoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AvaliacaoEventos
     * const avaliacaoEvento = await prisma.avaliacaoEvento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AvaliacaoEventoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AvaliacaoEventoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AvaliacaoEvento.
     * @param {AvaliacaoEventoUpsertArgs} args - Arguments to update or create a AvaliacaoEvento.
     * @example
     * // Update or create a AvaliacaoEvento
     * const avaliacaoEvento = await prisma.avaliacaoEvento.upsert({
     *   create: {
     *     // ... data to create a AvaliacaoEvento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AvaliacaoEvento we want to update
     *   }
     * })
    **/
    upsert<T extends AvaliacaoEventoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AvaliacaoEventoUpsertArgs<ExtArgs>>
    ): Prisma__AvaliacaoEventoClient<$Types.GetResult<AvaliacaoEventoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of AvaliacaoEventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacaoEventoCountArgs} args - Arguments to filter AvaliacaoEventos to count.
     * @example
     * // Count the number of AvaliacaoEventos
     * const count = await prisma.avaliacaoEvento.count({
     *   where: {
     *     // ... the filter for the AvaliacaoEventos we want to count
     *   }
     * })
    **/
    count<T extends AvaliacaoEventoCountArgs>(
      args?: Subset<T, AvaliacaoEventoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AvaliacaoEventoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AvaliacaoEvento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacaoEventoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AvaliacaoEventoAggregateArgs>(args: Subset<T, AvaliacaoEventoAggregateArgs>): Prisma.PrismaPromise<GetAvaliacaoEventoAggregateType<T>>

    /**
     * Group by AvaliacaoEvento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacaoEventoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AvaliacaoEventoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AvaliacaoEventoGroupByArgs['orderBy'] }
        : { orderBy?: AvaliacaoEventoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AvaliacaoEventoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvaliacaoEventoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for AvaliacaoEvento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AvaliacaoEventoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Utilizador<T extends UtilizadorArgs<ExtArgs> = {}>(args?: Subset<T, UtilizadorArgs<ExtArgs>>): Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Evento<T extends EventoArgs<ExtArgs> = {}>(args?: Subset<T, EventoArgs<ExtArgs>>): Prisma__EventoClient<$Types.GetResult<EventoPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * AvaliacaoEvento base type for findUnique actions
   */
  export type AvaliacaoEventoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvaliacaoEvento
     */
    select?: AvaliacaoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvaliacaoEventoInclude<ExtArgs> | null
    /**
     * Filter, which AvaliacaoEvento to fetch.
     */
    where: AvaliacaoEventoWhereUniqueInput
  }

  /**
   * AvaliacaoEvento findUnique
   */
  export interface AvaliacaoEventoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AvaliacaoEventoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AvaliacaoEvento findUniqueOrThrow
   */
  export type AvaliacaoEventoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvaliacaoEvento
     */
    select?: AvaliacaoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvaliacaoEventoInclude<ExtArgs> | null
    /**
     * Filter, which AvaliacaoEvento to fetch.
     */
    where: AvaliacaoEventoWhereUniqueInput
  }


  /**
   * AvaliacaoEvento base type for findFirst actions
   */
  export type AvaliacaoEventoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvaliacaoEvento
     */
    select?: AvaliacaoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvaliacaoEventoInclude<ExtArgs> | null
    /**
     * Filter, which AvaliacaoEvento to fetch.
     */
    where?: AvaliacaoEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AvaliacaoEventos to fetch.
     */
    orderBy?: Enumerable<AvaliacaoEventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AvaliacaoEventos.
     */
    cursor?: AvaliacaoEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AvaliacaoEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AvaliacaoEventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AvaliacaoEventos.
     */
    distinct?: Enumerable<AvaliacaoEventoScalarFieldEnum>
  }

  /**
   * AvaliacaoEvento findFirst
   */
  export interface AvaliacaoEventoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AvaliacaoEventoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AvaliacaoEvento findFirstOrThrow
   */
  export type AvaliacaoEventoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvaliacaoEvento
     */
    select?: AvaliacaoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvaliacaoEventoInclude<ExtArgs> | null
    /**
     * Filter, which AvaliacaoEvento to fetch.
     */
    where?: AvaliacaoEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AvaliacaoEventos to fetch.
     */
    orderBy?: Enumerable<AvaliacaoEventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AvaliacaoEventos.
     */
    cursor?: AvaliacaoEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AvaliacaoEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AvaliacaoEventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AvaliacaoEventos.
     */
    distinct?: Enumerable<AvaliacaoEventoScalarFieldEnum>
  }


  /**
   * AvaliacaoEvento findMany
   */
  export type AvaliacaoEventoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvaliacaoEvento
     */
    select?: AvaliacaoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvaliacaoEventoInclude<ExtArgs> | null
    /**
     * Filter, which AvaliacaoEventos to fetch.
     */
    where?: AvaliacaoEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AvaliacaoEventos to fetch.
     */
    orderBy?: Enumerable<AvaliacaoEventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AvaliacaoEventos.
     */
    cursor?: AvaliacaoEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AvaliacaoEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AvaliacaoEventos.
     */
    skip?: number
    distinct?: Enumerable<AvaliacaoEventoScalarFieldEnum>
  }


  /**
   * AvaliacaoEvento create
   */
  export type AvaliacaoEventoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvaliacaoEvento
     */
    select?: AvaliacaoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvaliacaoEventoInclude<ExtArgs> | null
    /**
     * The data needed to create a AvaliacaoEvento.
     */
    data: XOR<AvaliacaoEventoCreateInput, AvaliacaoEventoUncheckedCreateInput>
  }


  /**
   * AvaliacaoEvento createMany
   */
  export type AvaliacaoEventoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AvaliacaoEventos.
     */
    data: Enumerable<AvaliacaoEventoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AvaliacaoEvento update
   */
  export type AvaliacaoEventoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvaliacaoEvento
     */
    select?: AvaliacaoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvaliacaoEventoInclude<ExtArgs> | null
    /**
     * The data needed to update a AvaliacaoEvento.
     */
    data: XOR<AvaliacaoEventoUpdateInput, AvaliacaoEventoUncheckedUpdateInput>
    /**
     * Choose, which AvaliacaoEvento to update.
     */
    where: AvaliacaoEventoWhereUniqueInput
  }


  /**
   * AvaliacaoEvento updateMany
   */
  export type AvaliacaoEventoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AvaliacaoEventos.
     */
    data: XOR<AvaliacaoEventoUpdateManyMutationInput, AvaliacaoEventoUncheckedUpdateManyInput>
    /**
     * Filter which AvaliacaoEventos to update
     */
    where?: AvaliacaoEventoWhereInput
  }


  /**
   * AvaliacaoEvento upsert
   */
  export type AvaliacaoEventoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvaliacaoEvento
     */
    select?: AvaliacaoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvaliacaoEventoInclude<ExtArgs> | null
    /**
     * The filter to search for the AvaliacaoEvento to update in case it exists.
     */
    where: AvaliacaoEventoWhereUniqueInput
    /**
     * In case the AvaliacaoEvento found by the `where` argument doesn't exist, create a new AvaliacaoEvento with this data.
     */
    create: XOR<AvaliacaoEventoCreateInput, AvaliacaoEventoUncheckedCreateInput>
    /**
     * In case the AvaliacaoEvento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AvaliacaoEventoUpdateInput, AvaliacaoEventoUncheckedUpdateInput>
  }


  /**
   * AvaliacaoEvento delete
   */
  export type AvaliacaoEventoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvaliacaoEvento
     */
    select?: AvaliacaoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvaliacaoEventoInclude<ExtArgs> | null
    /**
     * Filter which AvaliacaoEvento to delete.
     */
    where: AvaliacaoEventoWhereUniqueInput
  }


  /**
   * AvaliacaoEvento deleteMany
   */
  export type AvaliacaoEventoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AvaliacaoEventos to delete
     */
    where?: AvaliacaoEventoWhereInput
  }


  /**
   * AvaliacaoEvento without action
   */
  export type AvaliacaoEventoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvaliacaoEvento
     */
    select?: AvaliacaoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvaliacaoEventoInclude<ExtArgs> | null
  }



  /**
   * Model CandidaturaVoluntariado
   */


  export type AggregateCandidaturaVoluntariado = {
    _count: CandidaturaVoluntariadoCountAggregateOutputType | null
    _avg: CandidaturaVoluntariadoAvgAggregateOutputType | null
    _sum: CandidaturaVoluntariadoSumAggregateOutputType | null
    _min: CandidaturaVoluntariadoMinAggregateOutputType | null
    _max: CandidaturaVoluntariadoMaxAggregateOutputType | null
  }

  export type CandidaturaVoluntariadoAvgAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_anuncio: number | null
  }

  export type CandidaturaVoluntariadoSumAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_anuncio: number | null
  }

  export type CandidaturaVoluntariadoMinAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_anuncio: number | null
    estado: CandidaturaVoluntariado_estado | null
  }

  export type CandidaturaVoluntariadoMaxAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_anuncio: number | null
    estado: CandidaturaVoluntariado_estado | null
  }

  export type CandidaturaVoluntariadoCountAggregateOutputType = {
    id: number
    id_utilizador: number
    id_anuncio: number
    estado: number
    _all: number
  }


  export type CandidaturaVoluntariadoAvgAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_anuncio?: true
  }

  export type CandidaturaVoluntariadoSumAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_anuncio?: true
  }

  export type CandidaturaVoluntariadoMinAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_anuncio?: true
    estado?: true
  }

  export type CandidaturaVoluntariadoMaxAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_anuncio?: true
    estado?: true
  }

  export type CandidaturaVoluntariadoCountAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_anuncio?: true
    estado?: true
    _all?: true
  }

  export type CandidaturaVoluntariadoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidaturaVoluntariado to aggregate.
     */
    where?: CandidaturaVoluntariadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidaturaVoluntariados to fetch.
     */
    orderBy?: Enumerable<CandidaturaVoluntariadoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidaturaVoluntariadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidaturaVoluntariados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidaturaVoluntariados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CandidaturaVoluntariados
    **/
    _count?: true | CandidaturaVoluntariadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidaturaVoluntariadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidaturaVoluntariadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidaturaVoluntariadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidaturaVoluntariadoMaxAggregateInputType
  }

  export type GetCandidaturaVoluntariadoAggregateType<T extends CandidaturaVoluntariadoAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidaturaVoluntariado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidaturaVoluntariado[P]>
      : GetScalarType<T[P], AggregateCandidaturaVoluntariado[P]>
  }




  export type CandidaturaVoluntariadoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CandidaturaVoluntariadoWhereInput
    orderBy?: Enumerable<CandidaturaVoluntariadoOrderByWithAggregationInput>
    by: CandidaturaVoluntariadoScalarFieldEnum[]
    having?: CandidaturaVoluntariadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidaturaVoluntariadoCountAggregateInputType | true
    _avg?: CandidaturaVoluntariadoAvgAggregateInputType
    _sum?: CandidaturaVoluntariadoSumAggregateInputType
    _min?: CandidaturaVoluntariadoMinAggregateInputType
    _max?: CandidaturaVoluntariadoMaxAggregateInputType
  }


  export type CandidaturaVoluntariadoGroupByOutputType = {
    id: number
    id_utilizador: number
    id_anuncio: number
    estado: CandidaturaVoluntariado_estado | null
    _count: CandidaturaVoluntariadoCountAggregateOutputType | null
    _avg: CandidaturaVoluntariadoAvgAggregateOutputType | null
    _sum: CandidaturaVoluntariadoSumAggregateOutputType | null
    _min: CandidaturaVoluntariadoMinAggregateOutputType | null
    _max: CandidaturaVoluntariadoMaxAggregateOutputType | null
  }

  type GetCandidaturaVoluntariadoGroupByPayload<T extends CandidaturaVoluntariadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CandidaturaVoluntariadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidaturaVoluntariadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidaturaVoluntariadoGroupByOutputType[P]>
            : GetScalarType<T[P], CandidaturaVoluntariadoGroupByOutputType[P]>
        }
      >
    >


  export type CandidaturaVoluntariadoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_utilizador?: boolean
    id_anuncio?: boolean
    estado?: boolean
    Utilizador?: boolean | UtilizadorArgs<ExtArgs>
    Anuncio?: boolean | AnuncioArgs<ExtArgs>
  }, ExtArgs["result"]["candidaturaVoluntariado"]>

  export type CandidaturaVoluntariadoSelectScalar = {
    id?: boolean
    id_utilizador?: boolean
    id_anuncio?: boolean
    estado?: boolean
  }

  export type CandidaturaVoluntariadoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Utilizador?: boolean | UtilizadorArgs<ExtArgs>
    Anuncio?: boolean | AnuncioArgs<ExtArgs>
  }


  type CandidaturaVoluntariadoGetPayload<S extends boolean | null | undefined | CandidaturaVoluntariadoArgs> = $Types.GetResult<CandidaturaVoluntariadoPayload, S>

  type CandidaturaVoluntariadoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CandidaturaVoluntariadoFindManyArgs, 'select' | 'include'> & {
      select?: CandidaturaVoluntariadoCountAggregateInputType | true
    }

  export interface CandidaturaVoluntariadoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CandidaturaVoluntariado'], meta: { name: 'CandidaturaVoluntariado' } }
    /**
     * Find zero or one CandidaturaVoluntariado that matches the filter.
     * @param {CandidaturaVoluntariadoFindUniqueArgs} args - Arguments to find a CandidaturaVoluntariado
     * @example
     * // Get one CandidaturaVoluntariado
     * const candidaturaVoluntariado = await prisma.candidaturaVoluntariado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CandidaturaVoluntariadoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CandidaturaVoluntariadoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CandidaturaVoluntariado'> extends True ? Prisma__CandidaturaVoluntariadoClient<$Types.GetResult<CandidaturaVoluntariadoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CandidaturaVoluntariadoClient<$Types.GetResult<CandidaturaVoluntariadoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one CandidaturaVoluntariado that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CandidaturaVoluntariadoFindUniqueOrThrowArgs} args - Arguments to find a CandidaturaVoluntariado
     * @example
     * // Get one CandidaturaVoluntariado
     * const candidaturaVoluntariado = await prisma.candidaturaVoluntariado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CandidaturaVoluntariadoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidaturaVoluntariadoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CandidaturaVoluntariadoClient<$Types.GetResult<CandidaturaVoluntariadoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first CandidaturaVoluntariado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidaturaVoluntariadoFindFirstArgs} args - Arguments to find a CandidaturaVoluntariado
     * @example
     * // Get one CandidaturaVoluntariado
     * const candidaturaVoluntariado = await prisma.candidaturaVoluntariado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CandidaturaVoluntariadoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CandidaturaVoluntariadoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CandidaturaVoluntariado'> extends True ? Prisma__CandidaturaVoluntariadoClient<$Types.GetResult<CandidaturaVoluntariadoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CandidaturaVoluntariadoClient<$Types.GetResult<CandidaturaVoluntariadoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first CandidaturaVoluntariado that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidaturaVoluntariadoFindFirstOrThrowArgs} args - Arguments to find a CandidaturaVoluntariado
     * @example
     * // Get one CandidaturaVoluntariado
     * const candidaturaVoluntariado = await prisma.candidaturaVoluntariado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CandidaturaVoluntariadoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidaturaVoluntariadoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CandidaturaVoluntariadoClient<$Types.GetResult<CandidaturaVoluntariadoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more CandidaturaVoluntariados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidaturaVoluntariadoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CandidaturaVoluntariados
     * const candidaturaVoluntariados = await prisma.candidaturaVoluntariado.findMany()
     * 
     * // Get first 10 CandidaturaVoluntariados
     * const candidaturaVoluntariados = await prisma.candidaturaVoluntariado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidaturaVoluntariadoWithIdOnly = await prisma.candidaturaVoluntariado.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CandidaturaVoluntariadoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidaturaVoluntariadoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CandidaturaVoluntariadoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a CandidaturaVoluntariado.
     * @param {CandidaturaVoluntariadoCreateArgs} args - Arguments to create a CandidaturaVoluntariado.
     * @example
     * // Create one CandidaturaVoluntariado
     * const CandidaturaVoluntariado = await prisma.candidaturaVoluntariado.create({
     *   data: {
     *     // ... data to create a CandidaturaVoluntariado
     *   }
     * })
     * 
    **/
    create<T extends CandidaturaVoluntariadoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CandidaturaVoluntariadoCreateArgs<ExtArgs>>
    ): Prisma__CandidaturaVoluntariadoClient<$Types.GetResult<CandidaturaVoluntariadoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many CandidaturaVoluntariados.
     *     @param {CandidaturaVoluntariadoCreateManyArgs} args - Arguments to create many CandidaturaVoluntariados.
     *     @example
     *     // Create many CandidaturaVoluntariados
     *     const candidaturaVoluntariado = await prisma.candidaturaVoluntariado.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CandidaturaVoluntariadoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidaturaVoluntariadoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CandidaturaVoluntariado.
     * @param {CandidaturaVoluntariadoDeleteArgs} args - Arguments to delete one CandidaturaVoluntariado.
     * @example
     * // Delete one CandidaturaVoluntariado
     * const CandidaturaVoluntariado = await prisma.candidaturaVoluntariado.delete({
     *   where: {
     *     // ... filter to delete one CandidaturaVoluntariado
     *   }
     * })
     * 
    **/
    delete<T extends CandidaturaVoluntariadoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CandidaturaVoluntariadoDeleteArgs<ExtArgs>>
    ): Prisma__CandidaturaVoluntariadoClient<$Types.GetResult<CandidaturaVoluntariadoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one CandidaturaVoluntariado.
     * @param {CandidaturaVoluntariadoUpdateArgs} args - Arguments to update one CandidaturaVoluntariado.
     * @example
     * // Update one CandidaturaVoluntariado
     * const candidaturaVoluntariado = await prisma.candidaturaVoluntariado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CandidaturaVoluntariadoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CandidaturaVoluntariadoUpdateArgs<ExtArgs>>
    ): Prisma__CandidaturaVoluntariadoClient<$Types.GetResult<CandidaturaVoluntariadoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more CandidaturaVoluntariados.
     * @param {CandidaturaVoluntariadoDeleteManyArgs} args - Arguments to filter CandidaturaVoluntariados to delete.
     * @example
     * // Delete a few CandidaturaVoluntariados
     * const { count } = await prisma.candidaturaVoluntariado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CandidaturaVoluntariadoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidaturaVoluntariadoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidaturaVoluntariados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidaturaVoluntariadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CandidaturaVoluntariados
     * const candidaturaVoluntariado = await prisma.candidaturaVoluntariado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CandidaturaVoluntariadoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CandidaturaVoluntariadoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CandidaturaVoluntariado.
     * @param {CandidaturaVoluntariadoUpsertArgs} args - Arguments to update or create a CandidaturaVoluntariado.
     * @example
     * // Update or create a CandidaturaVoluntariado
     * const candidaturaVoluntariado = await prisma.candidaturaVoluntariado.upsert({
     *   create: {
     *     // ... data to create a CandidaturaVoluntariado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CandidaturaVoluntariado we want to update
     *   }
     * })
    **/
    upsert<T extends CandidaturaVoluntariadoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CandidaturaVoluntariadoUpsertArgs<ExtArgs>>
    ): Prisma__CandidaturaVoluntariadoClient<$Types.GetResult<CandidaturaVoluntariadoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of CandidaturaVoluntariados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidaturaVoluntariadoCountArgs} args - Arguments to filter CandidaturaVoluntariados to count.
     * @example
     * // Count the number of CandidaturaVoluntariados
     * const count = await prisma.candidaturaVoluntariado.count({
     *   where: {
     *     // ... the filter for the CandidaturaVoluntariados we want to count
     *   }
     * })
    **/
    count<T extends CandidaturaVoluntariadoCountArgs>(
      args?: Subset<T, CandidaturaVoluntariadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidaturaVoluntariadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CandidaturaVoluntariado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidaturaVoluntariadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidaturaVoluntariadoAggregateArgs>(args: Subset<T, CandidaturaVoluntariadoAggregateArgs>): Prisma.PrismaPromise<GetCandidaturaVoluntariadoAggregateType<T>>

    /**
     * Group by CandidaturaVoluntariado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidaturaVoluntariadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidaturaVoluntariadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidaturaVoluntariadoGroupByArgs['orderBy'] }
        : { orderBy?: CandidaturaVoluntariadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidaturaVoluntariadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidaturaVoluntariadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CandidaturaVoluntariado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CandidaturaVoluntariadoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Utilizador<T extends UtilizadorArgs<ExtArgs> = {}>(args?: Subset<T, UtilizadorArgs<ExtArgs>>): Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Anuncio<T extends AnuncioArgs<ExtArgs> = {}>(args?: Subset<T, AnuncioArgs<ExtArgs>>): Prisma__AnuncioClient<$Types.GetResult<AnuncioPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CandidaturaVoluntariado base type for findUnique actions
   */
  export type CandidaturaVoluntariadoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaVoluntariado
     */
    select?: CandidaturaVoluntariadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidaturaVoluntariadoInclude<ExtArgs> | null
    /**
     * Filter, which CandidaturaVoluntariado to fetch.
     */
    where: CandidaturaVoluntariadoWhereUniqueInput
  }

  /**
   * CandidaturaVoluntariado findUnique
   */
  export interface CandidaturaVoluntariadoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CandidaturaVoluntariadoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CandidaturaVoluntariado findUniqueOrThrow
   */
  export type CandidaturaVoluntariadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaVoluntariado
     */
    select?: CandidaturaVoluntariadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidaturaVoluntariadoInclude<ExtArgs> | null
    /**
     * Filter, which CandidaturaVoluntariado to fetch.
     */
    where: CandidaturaVoluntariadoWhereUniqueInput
  }


  /**
   * CandidaturaVoluntariado base type for findFirst actions
   */
  export type CandidaturaVoluntariadoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaVoluntariado
     */
    select?: CandidaturaVoluntariadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidaturaVoluntariadoInclude<ExtArgs> | null
    /**
     * Filter, which CandidaturaVoluntariado to fetch.
     */
    where?: CandidaturaVoluntariadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidaturaVoluntariados to fetch.
     */
    orderBy?: Enumerable<CandidaturaVoluntariadoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidaturaVoluntariados.
     */
    cursor?: CandidaturaVoluntariadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidaturaVoluntariados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidaturaVoluntariados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidaturaVoluntariados.
     */
    distinct?: Enumerable<CandidaturaVoluntariadoScalarFieldEnum>
  }

  /**
   * CandidaturaVoluntariado findFirst
   */
  export interface CandidaturaVoluntariadoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CandidaturaVoluntariadoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CandidaturaVoluntariado findFirstOrThrow
   */
  export type CandidaturaVoluntariadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaVoluntariado
     */
    select?: CandidaturaVoluntariadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidaturaVoluntariadoInclude<ExtArgs> | null
    /**
     * Filter, which CandidaturaVoluntariado to fetch.
     */
    where?: CandidaturaVoluntariadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidaturaVoluntariados to fetch.
     */
    orderBy?: Enumerable<CandidaturaVoluntariadoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidaturaVoluntariados.
     */
    cursor?: CandidaturaVoluntariadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidaturaVoluntariados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidaturaVoluntariados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidaturaVoluntariados.
     */
    distinct?: Enumerable<CandidaturaVoluntariadoScalarFieldEnum>
  }


  /**
   * CandidaturaVoluntariado findMany
   */
  export type CandidaturaVoluntariadoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaVoluntariado
     */
    select?: CandidaturaVoluntariadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidaturaVoluntariadoInclude<ExtArgs> | null
    /**
     * Filter, which CandidaturaVoluntariados to fetch.
     */
    where?: CandidaturaVoluntariadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidaturaVoluntariados to fetch.
     */
    orderBy?: Enumerable<CandidaturaVoluntariadoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CandidaturaVoluntariados.
     */
    cursor?: CandidaturaVoluntariadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidaturaVoluntariados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidaturaVoluntariados.
     */
    skip?: number
    distinct?: Enumerable<CandidaturaVoluntariadoScalarFieldEnum>
  }


  /**
   * CandidaturaVoluntariado create
   */
  export type CandidaturaVoluntariadoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaVoluntariado
     */
    select?: CandidaturaVoluntariadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidaturaVoluntariadoInclude<ExtArgs> | null
    /**
     * The data needed to create a CandidaturaVoluntariado.
     */
    data: XOR<CandidaturaVoluntariadoCreateInput, CandidaturaVoluntariadoUncheckedCreateInput>
  }


  /**
   * CandidaturaVoluntariado createMany
   */
  export type CandidaturaVoluntariadoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CandidaturaVoluntariados.
     */
    data: Enumerable<CandidaturaVoluntariadoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CandidaturaVoluntariado update
   */
  export type CandidaturaVoluntariadoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaVoluntariado
     */
    select?: CandidaturaVoluntariadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidaturaVoluntariadoInclude<ExtArgs> | null
    /**
     * The data needed to update a CandidaturaVoluntariado.
     */
    data: XOR<CandidaturaVoluntariadoUpdateInput, CandidaturaVoluntariadoUncheckedUpdateInput>
    /**
     * Choose, which CandidaturaVoluntariado to update.
     */
    where: CandidaturaVoluntariadoWhereUniqueInput
  }


  /**
   * CandidaturaVoluntariado updateMany
   */
  export type CandidaturaVoluntariadoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CandidaturaVoluntariados.
     */
    data: XOR<CandidaturaVoluntariadoUpdateManyMutationInput, CandidaturaVoluntariadoUncheckedUpdateManyInput>
    /**
     * Filter which CandidaturaVoluntariados to update
     */
    where?: CandidaturaVoluntariadoWhereInput
  }


  /**
   * CandidaturaVoluntariado upsert
   */
  export type CandidaturaVoluntariadoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaVoluntariado
     */
    select?: CandidaturaVoluntariadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidaturaVoluntariadoInclude<ExtArgs> | null
    /**
     * The filter to search for the CandidaturaVoluntariado to update in case it exists.
     */
    where: CandidaturaVoluntariadoWhereUniqueInput
    /**
     * In case the CandidaturaVoluntariado found by the `where` argument doesn't exist, create a new CandidaturaVoluntariado with this data.
     */
    create: XOR<CandidaturaVoluntariadoCreateInput, CandidaturaVoluntariadoUncheckedCreateInput>
    /**
     * In case the CandidaturaVoluntariado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidaturaVoluntariadoUpdateInput, CandidaturaVoluntariadoUncheckedUpdateInput>
  }


  /**
   * CandidaturaVoluntariado delete
   */
  export type CandidaturaVoluntariadoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaVoluntariado
     */
    select?: CandidaturaVoluntariadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidaturaVoluntariadoInclude<ExtArgs> | null
    /**
     * Filter which CandidaturaVoluntariado to delete.
     */
    where: CandidaturaVoluntariadoWhereUniqueInput
  }


  /**
   * CandidaturaVoluntariado deleteMany
   */
  export type CandidaturaVoluntariadoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidaturaVoluntariados to delete
     */
    where?: CandidaturaVoluntariadoWhereInput
  }


  /**
   * CandidaturaVoluntariado without action
   */
  export type CandidaturaVoluntariadoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaVoluntariado
     */
    select?: CandidaturaVoluntariadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidaturaVoluntariadoInclude<ExtArgs> | null
  }



  /**
   * Model CategoriaEvento
   */


  export type AggregateCategoriaEvento = {
    _count: CategoriaEventoCountAggregateOutputType | null
    _avg: CategoriaEventoAvgAggregateOutputType | null
    _sum: CategoriaEventoSumAggregateOutputType | null
    _min: CategoriaEventoMinAggregateOutputType | null
    _max: CategoriaEventoMaxAggregateOutputType | null
  }

  export type CategoriaEventoAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriaEventoSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriaEventoMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type CategoriaEventoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type CategoriaEventoCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type CategoriaEventoAvgAggregateInputType = {
    id?: true
  }

  export type CategoriaEventoSumAggregateInputType = {
    id?: true
  }

  export type CategoriaEventoMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type CategoriaEventoMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type CategoriaEventoCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type CategoriaEventoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoriaEvento to aggregate.
     */
    where?: CategoriaEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaEventos to fetch.
     */
    orderBy?: Enumerable<CategoriaEventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaEventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoriaEventos
    **/
    _count?: true | CategoriaEventoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaEventoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaEventoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaEventoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaEventoMaxAggregateInputType
  }

  export type GetCategoriaEventoAggregateType<T extends CategoriaEventoAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoriaEvento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoriaEvento[P]>
      : GetScalarType<T[P], AggregateCategoriaEvento[P]>
  }




  export type CategoriaEventoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CategoriaEventoWhereInput
    orderBy?: Enumerable<CategoriaEventoOrderByWithAggregationInput>
    by: CategoriaEventoScalarFieldEnum[]
    having?: CategoriaEventoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaEventoCountAggregateInputType | true
    _avg?: CategoriaEventoAvgAggregateInputType
    _sum?: CategoriaEventoSumAggregateInputType
    _min?: CategoriaEventoMinAggregateInputType
    _max?: CategoriaEventoMaxAggregateInputType
  }


  export type CategoriaEventoGroupByOutputType = {
    id: number
    nome: string
    _count: CategoriaEventoCountAggregateOutputType | null
    _avg: CategoriaEventoAvgAggregateOutputType | null
    _sum: CategoriaEventoSumAggregateOutputType | null
    _min: CategoriaEventoMinAggregateOutputType | null
    _max: CategoriaEventoMaxAggregateOutputType | null
  }

  type GetCategoriaEventoGroupByPayload<T extends CategoriaEventoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CategoriaEventoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaEventoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaEventoGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaEventoGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaEventoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    Evento?: boolean | CategoriaEvento$EventoArgs<ExtArgs>
    _count?: boolean | CategoriaEventoCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["categoriaEvento"]>

  export type CategoriaEventoSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type CategoriaEventoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Evento?: boolean | CategoriaEvento$EventoArgs<ExtArgs>
    _count?: boolean | CategoriaEventoCountOutputTypeArgs<ExtArgs>
  }


  type CategoriaEventoGetPayload<S extends boolean | null | undefined | CategoriaEventoArgs> = $Types.GetResult<CategoriaEventoPayload, S>

  type CategoriaEventoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CategoriaEventoFindManyArgs, 'select' | 'include'> & {
      select?: CategoriaEventoCountAggregateInputType | true
    }

  export interface CategoriaEventoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CategoriaEvento'], meta: { name: 'CategoriaEvento' } }
    /**
     * Find zero or one CategoriaEvento that matches the filter.
     * @param {CategoriaEventoFindUniqueArgs} args - Arguments to find a CategoriaEvento
     * @example
     * // Get one CategoriaEvento
     * const categoriaEvento = await prisma.categoriaEvento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriaEventoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoriaEventoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CategoriaEvento'> extends True ? Prisma__CategoriaEventoClient<$Types.GetResult<CategoriaEventoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CategoriaEventoClient<$Types.GetResult<CategoriaEventoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one CategoriaEvento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoriaEventoFindUniqueOrThrowArgs} args - Arguments to find a CategoriaEvento
     * @example
     * // Get one CategoriaEvento
     * const categoriaEvento = await prisma.categoriaEvento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoriaEventoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaEventoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriaEventoClient<$Types.GetResult<CategoriaEventoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first CategoriaEvento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaEventoFindFirstArgs} args - Arguments to find a CategoriaEvento
     * @example
     * // Get one CategoriaEvento
     * const categoriaEvento = await prisma.categoriaEvento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriaEventoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoriaEventoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CategoriaEvento'> extends True ? Prisma__CategoriaEventoClient<$Types.GetResult<CategoriaEventoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CategoriaEventoClient<$Types.GetResult<CategoriaEventoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first CategoriaEvento that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaEventoFindFirstOrThrowArgs} args - Arguments to find a CategoriaEvento
     * @example
     * // Get one CategoriaEvento
     * const categoriaEvento = await prisma.categoriaEvento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoriaEventoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaEventoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriaEventoClient<$Types.GetResult<CategoriaEventoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more CategoriaEventos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaEventoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoriaEventos
     * const categoriaEventos = await prisma.categoriaEvento.findMany()
     * 
     * // Get first 10 CategoriaEventos
     * const categoriaEventos = await prisma.categoriaEvento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaEventoWithIdOnly = await prisma.categoriaEvento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoriaEventoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaEventoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CategoriaEventoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a CategoriaEvento.
     * @param {CategoriaEventoCreateArgs} args - Arguments to create a CategoriaEvento.
     * @example
     * // Create one CategoriaEvento
     * const CategoriaEvento = await prisma.categoriaEvento.create({
     *   data: {
     *     // ... data to create a CategoriaEvento
     *   }
     * })
     * 
    **/
    create<T extends CategoriaEventoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaEventoCreateArgs<ExtArgs>>
    ): Prisma__CategoriaEventoClient<$Types.GetResult<CategoriaEventoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many CategoriaEventos.
     *     @param {CategoriaEventoCreateManyArgs} args - Arguments to create many CategoriaEventos.
     *     @example
     *     // Create many CategoriaEventos
     *     const categoriaEvento = await prisma.categoriaEvento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoriaEventoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaEventoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CategoriaEvento.
     * @param {CategoriaEventoDeleteArgs} args - Arguments to delete one CategoriaEvento.
     * @example
     * // Delete one CategoriaEvento
     * const CategoriaEvento = await prisma.categoriaEvento.delete({
     *   where: {
     *     // ... filter to delete one CategoriaEvento
     *   }
     * })
     * 
    **/
    delete<T extends CategoriaEventoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaEventoDeleteArgs<ExtArgs>>
    ): Prisma__CategoriaEventoClient<$Types.GetResult<CategoriaEventoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one CategoriaEvento.
     * @param {CategoriaEventoUpdateArgs} args - Arguments to update one CategoriaEvento.
     * @example
     * // Update one CategoriaEvento
     * const categoriaEvento = await prisma.categoriaEvento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriaEventoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaEventoUpdateArgs<ExtArgs>>
    ): Prisma__CategoriaEventoClient<$Types.GetResult<CategoriaEventoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more CategoriaEventos.
     * @param {CategoriaEventoDeleteManyArgs} args - Arguments to filter CategoriaEventos to delete.
     * @example
     * // Delete a few CategoriaEventos
     * const { count } = await prisma.categoriaEvento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriaEventoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaEventoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoriaEventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaEventoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoriaEventos
     * const categoriaEvento = await prisma.categoriaEvento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriaEventoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaEventoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CategoriaEvento.
     * @param {CategoriaEventoUpsertArgs} args - Arguments to update or create a CategoriaEvento.
     * @example
     * // Update or create a CategoriaEvento
     * const categoriaEvento = await prisma.categoriaEvento.upsert({
     *   create: {
     *     // ... data to create a CategoriaEvento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoriaEvento we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriaEventoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaEventoUpsertArgs<ExtArgs>>
    ): Prisma__CategoriaEventoClient<$Types.GetResult<CategoriaEventoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of CategoriaEventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaEventoCountArgs} args - Arguments to filter CategoriaEventos to count.
     * @example
     * // Count the number of CategoriaEventos
     * const count = await prisma.categoriaEvento.count({
     *   where: {
     *     // ... the filter for the CategoriaEventos we want to count
     *   }
     * })
    **/
    count<T extends CategoriaEventoCountArgs>(
      args?: Subset<T, CategoriaEventoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaEventoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoriaEvento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaEventoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaEventoAggregateArgs>(args: Subset<T, CategoriaEventoAggregateArgs>): Prisma.PrismaPromise<GetCategoriaEventoAggregateType<T>>

    /**
     * Group by CategoriaEvento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaEventoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaEventoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaEventoGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaEventoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaEventoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaEventoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoriaEvento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoriaEventoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Evento<T extends CategoriaEvento$EventoArgs<ExtArgs> = {}>(args?: Subset<T, CategoriaEvento$EventoArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<EventoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CategoriaEvento base type for findUnique actions
   */
  export type CategoriaEventoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaEvento to fetch.
     */
    where: CategoriaEventoWhereUniqueInput
  }

  /**
   * CategoriaEvento findUnique
   */
  export interface CategoriaEventoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CategoriaEventoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CategoriaEvento findUniqueOrThrow
   */
  export type CategoriaEventoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaEvento to fetch.
     */
    where: CategoriaEventoWhereUniqueInput
  }


  /**
   * CategoriaEvento base type for findFirst actions
   */
  export type CategoriaEventoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaEvento to fetch.
     */
    where?: CategoriaEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaEventos to fetch.
     */
    orderBy?: Enumerable<CategoriaEventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoriaEventos.
     */
    cursor?: CategoriaEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaEventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoriaEventos.
     */
    distinct?: Enumerable<CategoriaEventoScalarFieldEnum>
  }

  /**
   * CategoriaEvento findFirst
   */
  export interface CategoriaEventoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CategoriaEventoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CategoriaEvento findFirstOrThrow
   */
  export type CategoriaEventoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaEvento to fetch.
     */
    where?: CategoriaEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaEventos to fetch.
     */
    orderBy?: Enumerable<CategoriaEventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoriaEventos.
     */
    cursor?: CategoriaEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaEventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoriaEventos.
     */
    distinct?: Enumerable<CategoriaEventoScalarFieldEnum>
  }


  /**
   * CategoriaEvento findMany
   */
  export type CategoriaEventoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaEventos to fetch.
     */
    where?: CategoriaEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaEventos to fetch.
     */
    orderBy?: Enumerable<CategoriaEventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoriaEventos.
     */
    cursor?: CategoriaEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaEventos.
     */
    skip?: number
    distinct?: Enumerable<CategoriaEventoScalarFieldEnum>
  }


  /**
   * CategoriaEvento create
   */
  export type CategoriaEventoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * The data needed to create a CategoriaEvento.
     */
    data: XOR<CategoriaEventoCreateInput, CategoriaEventoUncheckedCreateInput>
  }


  /**
   * CategoriaEvento createMany
   */
  export type CategoriaEventoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CategoriaEventos.
     */
    data: Enumerable<CategoriaEventoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CategoriaEvento update
   */
  export type CategoriaEventoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * The data needed to update a CategoriaEvento.
     */
    data: XOR<CategoriaEventoUpdateInput, CategoriaEventoUncheckedUpdateInput>
    /**
     * Choose, which CategoriaEvento to update.
     */
    where: CategoriaEventoWhereUniqueInput
  }


  /**
   * CategoriaEvento updateMany
   */
  export type CategoriaEventoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CategoriaEventos.
     */
    data: XOR<CategoriaEventoUpdateManyMutationInput, CategoriaEventoUncheckedUpdateManyInput>
    /**
     * Filter which CategoriaEventos to update
     */
    where?: CategoriaEventoWhereInput
  }


  /**
   * CategoriaEvento upsert
   */
  export type CategoriaEventoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * The filter to search for the CategoriaEvento to update in case it exists.
     */
    where: CategoriaEventoWhereUniqueInput
    /**
     * In case the CategoriaEvento found by the `where` argument doesn't exist, create a new CategoriaEvento with this data.
     */
    create: XOR<CategoriaEventoCreateInput, CategoriaEventoUncheckedCreateInput>
    /**
     * In case the CategoriaEvento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaEventoUpdateInput, CategoriaEventoUncheckedUpdateInput>
  }


  /**
   * CategoriaEvento delete
   */
  export type CategoriaEventoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * Filter which CategoriaEvento to delete.
     */
    where: CategoriaEventoWhereUniqueInput
  }


  /**
   * CategoriaEvento deleteMany
   */
  export type CategoriaEventoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoriaEventos to delete
     */
    where?: CategoriaEventoWhereInput
  }


  /**
   * CategoriaEvento.Evento
   */
  export type CategoriaEvento$EventoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    where?: EventoWhereInput
    orderBy?: Enumerable<EventoOrderByWithRelationInput>
    cursor?: EventoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EventoScalarFieldEnum>
  }


  /**
   * CategoriaEvento without action
   */
  export type CategoriaEventoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
  }



  /**
   * Model CompraRifa
   */


  export type AggregateCompraRifa = {
    _count: CompraRifaCountAggregateOutputType | null
    _avg: CompraRifaAvgAggregateOutputType | null
    _sum: CompraRifaSumAggregateOutputType | null
    _min: CompraRifaMinAggregateOutputType | null
    _max: CompraRifaMaxAggregateOutputType | null
  }

  export type CompraRifaAvgAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_rifa: number | null
    quantidade: number | null
  }

  export type CompraRifaSumAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_rifa: number | null
    quantidade: number | null
  }

  export type CompraRifaMinAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_rifa: number | null
    quantidade: number | null
    data_compra: Date | null
    estado: CompraRifa_estado | null
  }

  export type CompraRifaMaxAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_rifa: number | null
    quantidade: number | null
    data_compra: Date | null
    estado: CompraRifa_estado | null
  }

  export type CompraRifaCountAggregateOutputType = {
    id: number
    id_utilizador: number
    id_rifa: number
    quantidade: number
    data_compra: number
    estado: number
    _all: number
  }


  export type CompraRifaAvgAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_rifa?: true
    quantidade?: true
  }

  export type CompraRifaSumAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_rifa?: true
    quantidade?: true
  }

  export type CompraRifaMinAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_rifa?: true
    quantidade?: true
    data_compra?: true
    estado?: true
  }

  export type CompraRifaMaxAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_rifa?: true
    quantidade?: true
    data_compra?: true
    estado?: true
  }

  export type CompraRifaCountAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_rifa?: true
    quantidade?: true
    data_compra?: true
    estado?: true
    _all?: true
  }

  export type CompraRifaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompraRifa to aggregate.
     */
    where?: CompraRifaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraRifas to fetch.
     */
    orderBy?: Enumerable<CompraRifaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompraRifaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraRifas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraRifas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompraRifas
    **/
    _count?: true | CompraRifaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompraRifaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompraRifaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompraRifaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompraRifaMaxAggregateInputType
  }

  export type GetCompraRifaAggregateType<T extends CompraRifaAggregateArgs> = {
        [P in keyof T & keyof AggregateCompraRifa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompraRifa[P]>
      : GetScalarType<T[P], AggregateCompraRifa[P]>
  }




  export type CompraRifaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CompraRifaWhereInput
    orderBy?: Enumerable<CompraRifaOrderByWithAggregationInput>
    by: CompraRifaScalarFieldEnum[]
    having?: CompraRifaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompraRifaCountAggregateInputType | true
    _avg?: CompraRifaAvgAggregateInputType
    _sum?: CompraRifaSumAggregateInputType
    _min?: CompraRifaMinAggregateInputType
    _max?: CompraRifaMaxAggregateInputType
  }


  export type CompraRifaGroupByOutputType = {
    id: number
    id_utilizador: number
    id_rifa: number
    quantidade: number
    data_compra: Date | null
    estado: CompraRifa_estado | null
    _count: CompraRifaCountAggregateOutputType | null
    _avg: CompraRifaAvgAggregateOutputType | null
    _sum: CompraRifaSumAggregateOutputType | null
    _min: CompraRifaMinAggregateOutputType | null
    _max: CompraRifaMaxAggregateOutputType | null
  }

  type GetCompraRifaGroupByPayload<T extends CompraRifaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompraRifaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompraRifaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompraRifaGroupByOutputType[P]>
            : GetScalarType<T[P], CompraRifaGroupByOutputType[P]>
        }
      >
    >


  export type CompraRifaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_utilizador?: boolean
    id_rifa?: boolean
    quantidade?: boolean
    data_compra?: boolean
    estado?: boolean
    Utilizador?: boolean | UtilizadorArgs<ExtArgs>
    Rifa?: boolean | RifaArgs<ExtArgs>
  }, ExtArgs["result"]["compraRifa"]>

  export type CompraRifaSelectScalar = {
    id?: boolean
    id_utilizador?: boolean
    id_rifa?: boolean
    quantidade?: boolean
    data_compra?: boolean
    estado?: boolean
  }

  export type CompraRifaInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Utilizador?: boolean | UtilizadorArgs<ExtArgs>
    Rifa?: boolean | RifaArgs<ExtArgs>
  }


  type CompraRifaGetPayload<S extends boolean | null | undefined | CompraRifaArgs> = $Types.GetResult<CompraRifaPayload, S>

  type CompraRifaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CompraRifaFindManyArgs, 'select' | 'include'> & {
      select?: CompraRifaCountAggregateInputType | true
    }

  export interface CompraRifaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompraRifa'], meta: { name: 'CompraRifa' } }
    /**
     * Find zero or one CompraRifa that matches the filter.
     * @param {CompraRifaFindUniqueArgs} args - Arguments to find a CompraRifa
     * @example
     * // Get one CompraRifa
     * const compraRifa = await prisma.compraRifa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompraRifaFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompraRifaFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CompraRifa'> extends True ? Prisma__CompraRifaClient<$Types.GetResult<CompraRifaPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CompraRifaClient<$Types.GetResult<CompraRifaPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one CompraRifa that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompraRifaFindUniqueOrThrowArgs} args - Arguments to find a CompraRifa
     * @example
     * // Get one CompraRifa
     * const compraRifa = await prisma.compraRifa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompraRifaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompraRifaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CompraRifaClient<$Types.GetResult<CompraRifaPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first CompraRifa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraRifaFindFirstArgs} args - Arguments to find a CompraRifa
     * @example
     * // Get one CompraRifa
     * const compraRifa = await prisma.compraRifa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompraRifaFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompraRifaFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CompraRifa'> extends True ? Prisma__CompraRifaClient<$Types.GetResult<CompraRifaPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CompraRifaClient<$Types.GetResult<CompraRifaPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first CompraRifa that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraRifaFindFirstOrThrowArgs} args - Arguments to find a CompraRifa
     * @example
     * // Get one CompraRifa
     * const compraRifa = await prisma.compraRifa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompraRifaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompraRifaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CompraRifaClient<$Types.GetResult<CompraRifaPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more CompraRifas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraRifaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompraRifas
     * const compraRifas = await prisma.compraRifa.findMany()
     * 
     * // Get first 10 CompraRifas
     * const compraRifas = await prisma.compraRifa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compraRifaWithIdOnly = await prisma.compraRifa.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompraRifaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompraRifaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CompraRifaPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a CompraRifa.
     * @param {CompraRifaCreateArgs} args - Arguments to create a CompraRifa.
     * @example
     * // Create one CompraRifa
     * const CompraRifa = await prisma.compraRifa.create({
     *   data: {
     *     // ... data to create a CompraRifa
     *   }
     * })
     * 
    **/
    create<T extends CompraRifaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CompraRifaCreateArgs<ExtArgs>>
    ): Prisma__CompraRifaClient<$Types.GetResult<CompraRifaPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many CompraRifas.
     *     @param {CompraRifaCreateManyArgs} args - Arguments to create many CompraRifas.
     *     @example
     *     // Create many CompraRifas
     *     const compraRifa = await prisma.compraRifa.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompraRifaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompraRifaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CompraRifa.
     * @param {CompraRifaDeleteArgs} args - Arguments to delete one CompraRifa.
     * @example
     * // Delete one CompraRifa
     * const CompraRifa = await prisma.compraRifa.delete({
     *   where: {
     *     // ... filter to delete one CompraRifa
     *   }
     * })
     * 
    **/
    delete<T extends CompraRifaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CompraRifaDeleteArgs<ExtArgs>>
    ): Prisma__CompraRifaClient<$Types.GetResult<CompraRifaPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one CompraRifa.
     * @param {CompraRifaUpdateArgs} args - Arguments to update one CompraRifa.
     * @example
     * // Update one CompraRifa
     * const compraRifa = await prisma.compraRifa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompraRifaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CompraRifaUpdateArgs<ExtArgs>>
    ): Prisma__CompraRifaClient<$Types.GetResult<CompraRifaPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more CompraRifas.
     * @param {CompraRifaDeleteManyArgs} args - Arguments to filter CompraRifas to delete.
     * @example
     * // Delete a few CompraRifas
     * const { count } = await prisma.compraRifa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompraRifaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompraRifaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompraRifas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraRifaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompraRifas
     * const compraRifa = await prisma.compraRifa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompraRifaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CompraRifaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CompraRifa.
     * @param {CompraRifaUpsertArgs} args - Arguments to update or create a CompraRifa.
     * @example
     * // Update or create a CompraRifa
     * const compraRifa = await prisma.compraRifa.upsert({
     *   create: {
     *     // ... data to create a CompraRifa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompraRifa we want to update
     *   }
     * })
    **/
    upsert<T extends CompraRifaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CompraRifaUpsertArgs<ExtArgs>>
    ): Prisma__CompraRifaClient<$Types.GetResult<CompraRifaPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of CompraRifas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraRifaCountArgs} args - Arguments to filter CompraRifas to count.
     * @example
     * // Count the number of CompraRifas
     * const count = await prisma.compraRifa.count({
     *   where: {
     *     // ... the filter for the CompraRifas we want to count
     *   }
     * })
    **/
    count<T extends CompraRifaCountArgs>(
      args?: Subset<T, CompraRifaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompraRifaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompraRifa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraRifaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompraRifaAggregateArgs>(args: Subset<T, CompraRifaAggregateArgs>): Prisma.PrismaPromise<GetCompraRifaAggregateType<T>>

    /**
     * Group by CompraRifa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraRifaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompraRifaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompraRifaGroupByArgs['orderBy'] }
        : { orderBy?: CompraRifaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompraRifaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompraRifaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CompraRifa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompraRifaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Utilizador<T extends UtilizadorArgs<ExtArgs> = {}>(args?: Subset<T, UtilizadorArgs<ExtArgs>>): Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Rifa<T extends RifaArgs<ExtArgs> = {}>(args?: Subset<T, RifaArgs<ExtArgs>>): Prisma__RifaClient<$Types.GetResult<RifaPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CompraRifa base type for findUnique actions
   */
  export type CompraRifaFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraRifa
     */
    select?: CompraRifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRifaInclude<ExtArgs> | null
    /**
     * Filter, which CompraRifa to fetch.
     */
    where: CompraRifaWhereUniqueInput
  }

  /**
   * CompraRifa findUnique
   */
  export interface CompraRifaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CompraRifaFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CompraRifa findUniqueOrThrow
   */
  export type CompraRifaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraRifa
     */
    select?: CompraRifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRifaInclude<ExtArgs> | null
    /**
     * Filter, which CompraRifa to fetch.
     */
    where: CompraRifaWhereUniqueInput
  }


  /**
   * CompraRifa base type for findFirst actions
   */
  export type CompraRifaFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraRifa
     */
    select?: CompraRifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRifaInclude<ExtArgs> | null
    /**
     * Filter, which CompraRifa to fetch.
     */
    where?: CompraRifaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraRifas to fetch.
     */
    orderBy?: Enumerable<CompraRifaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompraRifas.
     */
    cursor?: CompraRifaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraRifas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraRifas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompraRifas.
     */
    distinct?: Enumerable<CompraRifaScalarFieldEnum>
  }

  /**
   * CompraRifa findFirst
   */
  export interface CompraRifaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CompraRifaFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CompraRifa findFirstOrThrow
   */
  export type CompraRifaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraRifa
     */
    select?: CompraRifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRifaInclude<ExtArgs> | null
    /**
     * Filter, which CompraRifa to fetch.
     */
    where?: CompraRifaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraRifas to fetch.
     */
    orderBy?: Enumerable<CompraRifaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompraRifas.
     */
    cursor?: CompraRifaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraRifas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraRifas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompraRifas.
     */
    distinct?: Enumerable<CompraRifaScalarFieldEnum>
  }


  /**
   * CompraRifa findMany
   */
  export type CompraRifaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraRifa
     */
    select?: CompraRifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRifaInclude<ExtArgs> | null
    /**
     * Filter, which CompraRifas to fetch.
     */
    where?: CompraRifaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompraRifas to fetch.
     */
    orderBy?: Enumerable<CompraRifaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompraRifas.
     */
    cursor?: CompraRifaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompraRifas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompraRifas.
     */
    skip?: number
    distinct?: Enumerable<CompraRifaScalarFieldEnum>
  }


  /**
   * CompraRifa create
   */
  export type CompraRifaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraRifa
     */
    select?: CompraRifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRifaInclude<ExtArgs> | null
    /**
     * The data needed to create a CompraRifa.
     */
    data: XOR<CompraRifaCreateInput, CompraRifaUncheckedCreateInput>
  }


  /**
   * CompraRifa createMany
   */
  export type CompraRifaCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompraRifas.
     */
    data: Enumerable<CompraRifaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CompraRifa update
   */
  export type CompraRifaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraRifa
     */
    select?: CompraRifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRifaInclude<ExtArgs> | null
    /**
     * The data needed to update a CompraRifa.
     */
    data: XOR<CompraRifaUpdateInput, CompraRifaUncheckedUpdateInput>
    /**
     * Choose, which CompraRifa to update.
     */
    where: CompraRifaWhereUniqueInput
  }


  /**
   * CompraRifa updateMany
   */
  export type CompraRifaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompraRifas.
     */
    data: XOR<CompraRifaUpdateManyMutationInput, CompraRifaUncheckedUpdateManyInput>
    /**
     * Filter which CompraRifas to update
     */
    where?: CompraRifaWhereInput
  }


  /**
   * CompraRifa upsert
   */
  export type CompraRifaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraRifa
     */
    select?: CompraRifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRifaInclude<ExtArgs> | null
    /**
     * The filter to search for the CompraRifa to update in case it exists.
     */
    where: CompraRifaWhereUniqueInput
    /**
     * In case the CompraRifa found by the `where` argument doesn't exist, create a new CompraRifa with this data.
     */
    create: XOR<CompraRifaCreateInput, CompraRifaUncheckedCreateInput>
    /**
     * In case the CompraRifa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompraRifaUpdateInput, CompraRifaUncheckedUpdateInput>
  }


  /**
   * CompraRifa delete
   */
  export type CompraRifaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraRifa
     */
    select?: CompraRifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRifaInclude<ExtArgs> | null
    /**
     * Filter which CompraRifa to delete.
     */
    where: CompraRifaWhereUniqueInput
  }


  /**
   * CompraRifa deleteMany
   */
  export type CompraRifaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompraRifas to delete
     */
    where?: CompraRifaWhereInput
  }


  /**
   * CompraRifa without action
   */
  export type CompraRifaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraRifa
     */
    select?: CompraRifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRifaInclude<ExtArgs> | null
  }



  /**
   * Model Doacao
   */


  export type AggregateDoacao = {
    _count: DoacaoCountAggregateOutputType | null
    _avg: DoacaoAvgAggregateOutputType | null
    _sum: DoacaoSumAggregateOutputType | null
    _min: DoacaoMinAggregateOutputType | null
    _max: DoacaoMaxAggregateOutputType | null
  }

  export type DoacaoAvgAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    valor: Decimal | null
  }

  export type DoacaoSumAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    valor: Decimal | null
  }

  export type DoacaoMinAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    valor: Decimal | null
    data_doacao: Date | null
    metodo_pagamento: Doacao_metodo_pagamento | null
  }

  export type DoacaoMaxAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    valor: Decimal | null
    data_doacao: Date | null
    metodo_pagamento: Doacao_metodo_pagamento | null
  }

  export type DoacaoCountAggregateOutputType = {
    id: number
    id_utilizador: number
    valor: number
    data_doacao: number
    metodo_pagamento: number
    _all: number
  }


  export type DoacaoAvgAggregateInputType = {
    id?: true
    id_utilizador?: true
    valor?: true
  }

  export type DoacaoSumAggregateInputType = {
    id?: true
    id_utilizador?: true
    valor?: true
  }

  export type DoacaoMinAggregateInputType = {
    id?: true
    id_utilizador?: true
    valor?: true
    data_doacao?: true
    metodo_pagamento?: true
  }

  export type DoacaoMaxAggregateInputType = {
    id?: true
    id_utilizador?: true
    valor?: true
    data_doacao?: true
    metodo_pagamento?: true
  }

  export type DoacaoCountAggregateInputType = {
    id?: true
    id_utilizador?: true
    valor?: true
    data_doacao?: true
    metodo_pagamento?: true
    _all?: true
  }

  export type DoacaoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doacao to aggregate.
     */
    where?: DoacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doacaos to fetch.
     */
    orderBy?: Enumerable<DoacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doacaos
    **/
    _count?: true | DoacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoacaoMaxAggregateInputType
  }

  export type GetDoacaoAggregateType<T extends DoacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateDoacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoacao[P]>
      : GetScalarType<T[P], AggregateDoacao[P]>
  }




  export type DoacaoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DoacaoWhereInput
    orderBy?: Enumerable<DoacaoOrderByWithAggregationInput>
    by: DoacaoScalarFieldEnum[]
    having?: DoacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoacaoCountAggregateInputType | true
    _avg?: DoacaoAvgAggregateInputType
    _sum?: DoacaoSumAggregateInputType
    _min?: DoacaoMinAggregateInputType
    _max?: DoacaoMaxAggregateInputType
  }


  export type DoacaoGroupByOutputType = {
    id: number
    id_utilizador: number
    valor: Decimal
    data_doacao: Date | null
    metodo_pagamento: Doacao_metodo_pagamento
    _count: DoacaoCountAggregateOutputType | null
    _avg: DoacaoAvgAggregateOutputType | null
    _sum: DoacaoSumAggregateOutputType | null
    _min: DoacaoMinAggregateOutputType | null
    _max: DoacaoMaxAggregateOutputType | null
  }

  type GetDoacaoGroupByPayload<T extends DoacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DoacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoacaoGroupByOutputType[P]>
            : GetScalarType<T[P], DoacaoGroupByOutputType[P]>
        }
      >
    >


  export type DoacaoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_utilizador?: boolean
    valor?: boolean
    data_doacao?: boolean
    metodo_pagamento?: boolean
    Utilizador?: boolean | UtilizadorArgs<ExtArgs>
  }, ExtArgs["result"]["doacao"]>

  export type DoacaoSelectScalar = {
    id?: boolean
    id_utilizador?: boolean
    valor?: boolean
    data_doacao?: boolean
    metodo_pagamento?: boolean
  }

  export type DoacaoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Utilizador?: boolean | UtilizadorArgs<ExtArgs>
  }


  type DoacaoGetPayload<S extends boolean | null | undefined | DoacaoArgs> = $Types.GetResult<DoacaoPayload, S>

  type DoacaoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DoacaoFindManyArgs, 'select' | 'include'> & {
      select?: DoacaoCountAggregateInputType | true
    }

  export interface DoacaoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doacao'], meta: { name: 'Doacao' } }
    /**
     * Find zero or one Doacao that matches the filter.
     * @param {DoacaoFindUniqueArgs} args - Arguments to find a Doacao
     * @example
     * // Get one Doacao
     * const doacao = await prisma.doacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DoacaoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DoacaoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Doacao'> extends True ? Prisma__DoacaoClient<$Types.GetResult<DoacaoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__DoacaoClient<$Types.GetResult<DoacaoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Doacao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DoacaoFindUniqueOrThrowArgs} args - Arguments to find a Doacao
     * @example
     * // Get one Doacao
     * const doacao = await prisma.doacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DoacaoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DoacaoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DoacaoClient<$Types.GetResult<DoacaoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Doacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoacaoFindFirstArgs} args - Arguments to find a Doacao
     * @example
     * // Get one Doacao
     * const doacao = await prisma.doacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DoacaoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DoacaoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Doacao'> extends True ? Prisma__DoacaoClient<$Types.GetResult<DoacaoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__DoacaoClient<$Types.GetResult<DoacaoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Doacao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoacaoFindFirstOrThrowArgs} args - Arguments to find a Doacao
     * @example
     * // Get one Doacao
     * const doacao = await prisma.doacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DoacaoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DoacaoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DoacaoClient<$Types.GetResult<DoacaoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Doacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoacaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doacaos
     * const doacaos = await prisma.doacao.findMany()
     * 
     * // Get first 10 Doacaos
     * const doacaos = await prisma.doacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doacaoWithIdOnly = await prisma.doacao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DoacaoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoacaoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<DoacaoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Doacao.
     * @param {DoacaoCreateArgs} args - Arguments to create a Doacao.
     * @example
     * // Create one Doacao
     * const Doacao = await prisma.doacao.create({
     *   data: {
     *     // ... data to create a Doacao
     *   }
     * })
     * 
    **/
    create<T extends DoacaoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DoacaoCreateArgs<ExtArgs>>
    ): Prisma__DoacaoClient<$Types.GetResult<DoacaoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Doacaos.
     *     @param {DoacaoCreateManyArgs} args - Arguments to create many Doacaos.
     *     @example
     *     // Create many Doacaos
     *     const doacao = await prisma.doacao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DoacaoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoacaoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Doacao.
     * @param {DoacaoDeleteArgs} args - Arguments to delete one Doacao.
     * @example
     * // Delete one Doacao
     * const Doacao = await prisma.doacao.delete({
     *   where: {
     *     // ... filter to delete one Doacao
     *   }
     * })
     * 
    **/
    delete<T extends DoacaoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DoacaoDeleteArgs<ExtArgs>>
    ): Prisma__DoacaoClient<$Types.GetResult<DoacaoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Doacao.
     * @param {DoacaoUpdateArgs} args - Arguments to update one Doacao.
     * @example
     * // Update one Doacao
     * const doacao = await prisma.doacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DoacaoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DoacaoUpdateArgs<ExtArgs>>
    ): Prisma__DoacaoClient<$Types.GetResult<DoacaoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Doacaos.
     * @param {DoacaoDeleteManyArgs} args - Arguments to filter Doacaos to delete.
     * @example
     * // Delete a few Doacaos
     * const { count } = await prisma.doacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DoacaoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoacaoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doacaos
     * const doacao = await prisma.doacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DoacaoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DoacaoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doacao.
     * @param {DoacaoUpsertArgs} args - Arguments to update or create a Doacao.
     * @example
     * // Update or create a Doacao
     * const doacao = await prisma.doacao.upsert({
     *   create: {
     *     // ... data to create a Doacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doacao we want to update
     *   }
     * })
    **/
    upsert<T extends DoacaoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DoacaoUpsertArgs<ExtArgs>>
    ): Prisma__DoacaoClient<$Types.GetResult<DoacaoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Doacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoacaoCountArgs} args - Arguments to filter Doacaos to count.
     * @example
     * // Count the number of Doacaos
     * const count = await prisma.doacao.count({
     *   where: {
     *     // ... the filter for the Doacaos we want to count
     *   }
     * })
    **/
    count<T extends DoacaoCountArgs>(
      args?: Subset<T, DoacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoacaoAggregateArgs>(args: Subset<T, DoacaoAggregateArgs>): Prisma.PrismaPromise<GetDoacaoAggregateType<T>>

    /**
     * Group by Doacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoacaoGroupByArgs['orderBy'] }
        : { orderBy?: DoacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Doacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DoacaoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Utilizador<T extends UtilizadorArgs<ExtArgs> = {}>(args?: Subset<T, UtilizadorArgs<ExtArgs>>): Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Doacao base type for findUnique actions
   */
  export type DoacaoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * Filter, which Doacao to fetch.
     */
    where: DoacaoWhereUniqueInput
  }

  /**
   * Doacao findUnique
   */
  export interface DoacaoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DoacaoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Doacao findUniqueOrThrow
   */
  export type DoacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * Filter, which Doacao to fetch.
     */
    where: DoacaoWhereUniqueInput
  }


  /**
   * Doacao base type for findFirst actions
   */
  export type DoacaoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * Filter, which Doacao to fetch.
     */
    where?: DoacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doacaos to fetch.
     */
    orderBy?: Enumerable<DoacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doacaos.
     */
    cursor?: DoacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doacaos.
     */
    distinct?: Enumerable<DoacaoScalarFieldEnum>
  }

  /**
   * Doacao findFirst
   */
  export interface DoacaoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DoacaoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Doacao findFirstOrThrow
   */
  export type DoacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * Filter, which Doacao to fetch.
     */
    where?: DoacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doacaos to fetch.
     */
    orderBy?: Enumerable<DoacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doacaos.
     */
    cursor?: DoacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doacaos.
     */
    distinct?: Enumerable<DoacaoScalarFieldEnum>
  }


  /**
   * Doacao findMany
   */
  export type DoacaoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * Filter, which Doacaos to fetch.
     */
    where?: DoacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doacaos to fetch.
     */
    orderBy?: Enumerable<DoacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doacaos.
     */
    cursor?: DoacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doacaos.
     */
    skip?: number
    distinct?: Enumerable<DoacaoScalarFieldEnum>
  }


  /**
   * Doacao create
   */
  export type DoacaoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Doacao.
     */
    data: XOR<DoacaoCreateInput, DoacaoUncheckedCreateInput>
  }


  /**
   * Doacao createMany
   */
  export type DoacaoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doacaos.
     */
    data: Enumerable<DoacaoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Doacao update
   */
  export type DoacaoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Doacao.
     */
    data: XOR<DoacaoUpdateInput, DoacaoUncheckedUpdateInput>
    /**
     * Choose, which Doacao to update.
     */
    where: DoacaoWhereUniqueInput
  }


  /**
   * Doacao updateMany
   */
  export type DoacaoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doacaos.
     */
    data: XOR<DoacaoUpdateManyMutationInput, DoacaoUncheckedUpdateManyInput>
    /**
     * Filter which Doacaos to update
     */
    where?: DoacaoWhereInput
  }


  /**
   * Doacao upsert
   */
  export type DoacaoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Doacao to update in case it exists.
     */
    where: DoacaoWhereUniqueInput
    /**
     * In case the Doacao found by the `where` argument doesn't exist, create a new Doacao with this data.
     */
    create: XOR<DoacaoCreateInput, DoacaoUncheckedCreateInput>
    /**
     * In case the Doacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoacaoUpdateInput, DoacaoUncheckedUpdateInput>
  }


  /**
   * Doacao delete
   */
  export type DoacaoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoacaoInclude<ExtArgs> | null
    /**
     * Filter which Doacao to delete.
     */
    where: DoacaoWhereUniqueInput
  }


  /**
   * Doacao deleteMany
   */
  export type DoacaoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doacaos to delete
     */
    where?: DoacaoWhereInput
  }


  /**
   * Doacao without action
   */
  export type DoacaoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoacaoInclude<ExtArgs> | null
  }



  /**
   * Model Evento
   */


  export type AggregateEvento = {
    _count: EventoCountAggregateOutputType | null
    _avg: EventoAvgAggregateOutputType | null
    _sum: EventoSumAggregateOutputType | null
    _min: EventoMinAggregateOutputType | null
    _max: EventoMaxAggregateOutputType | null
  }

  export type EventoAvgAggregateOutputType = {
    id: number | null
    id_administrador: number | null
    id_categoria: number | null
  }

  export type EventoSumAggregateOutputType = {
    id: number | null
    id_administrador: number | null
    id_categoria: number | null
  }

  export type EventoMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    localizacao: string | null
    descricao: string | null
    data_evento: Date | null
    fotografia: string | null
    estado: Evento_estado | null
    id_administrador: number | null
    id_categoria: number | null
  }

  export type EventoMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    localizacao: string | null
    descricao: string | null
    data_evento: Date | null
    fotografia: string | null
    estado: Evento_estado | null
    id_administrador: number | null
    id_categoria: number | null
  }

  export type EventoCountAggregateOutputType = {
    id: number
    titulo: number
    localizacao: number
    descricao: number
    data_evento: number
    fotografia: number
    estado: number
    id_administrador: number
    id_categoria: number
    _all: number
  }


  export type EventoAvgAggregateInputType = {
    id?: true
    id_administrador?: true
    id_categoria?: true
  }

  export type EventoSumAggregateInputType = {
    id?: true
    id_administrador?: true
    id_categoria?: true
  }

  export type EventoMinAggregateInputType = {
    id?: true
    titulo?: true
    localizacao?: true
    descricao?: true
    data_evento?: true
    fotografia?: true
    estado?: true
    id_administrador?: true
    id_categoria?: true
  }

  export type EventoMaxAggregateInputType = {
    id?: true
    titulo?: true
    localizacao?: true
    descricao?: true
    data_evento?: true
    fotografia?: true
    estado?: true
    id_administrador?: true
    id_categoria?: true
  }

  export type EventoCountAggregateInputType = {
    id?: true
    titulo?: true
    localizacao?: true
    descricao?: true
    data_evento?: true
    fotografia?: true
    estado?: true
    id_administrador?: true
    id_categoria?: true
    _all?: true
  }

  export type EventoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Evento to aggregate.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: Enumerable<EventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Eventos
    **/
    _count?: true | EventoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventoMaxAggregateInputType
  }

  export type GetEventoAggregateType<T extends EventoAggregateArgs> = {
        [P in keyof T & keyof AggregateEvento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvento[P]>
      : GetScalarType<T[P], AggregateEvento[P]>
  }




  export type EventoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EventoWhereInput
    orderBy?: Enumerable<EventoOrderByWithAggregationInput>
    by: EventoScalarFieldEnum[]
    having?: EventoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventoCountAggregateInputType | true
    _avg?: EventoAvgAggregateInputType
    _sum?: EventoSumAggregateInputType
    _min?: EventoMinAggregateInputType
    _max?: EventoMaxAggregateInputType
  }


  export type EventoGroupByOutputType = {
    id: number
    titulo: string
    localizacao: string
    descricao: string | null
    data_evento: Date
    fotografia: string
    estado: Evento_estado | null
    id_administrador: number
    id_categoria: number
    _count: EventoCountAggregateOutputType | null
    _avg: EventoAvgAggregateOutputType | null
    _sum: EventoSumAggregateOutputType | null
    _min: EventoMinAggregateOutputType | null
    _max: EventoMaxAggregateOutputType | null
  }

  type GetEventoGroupByPayload<T extends EventoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EventoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventoGroupByOutputType[P]>
            : GetScalarType<T[P], EventoGroupByOutputType[P]>
        }
      >
    >


  export type EventoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    localizacao?: boolean
    descricao?: boolean
    data_evento?: boolean
    fotografia?: boolean
    estado?: boolean
    id_administrador?: boolean
    id_categoria?: boolean
    Anuncio?: boolean | Evento$AnuncioArgs<ExtArgs>
    AvaliacaoEvento?: boolean | Evento$AvaliacaoEventoArgs<ExtArgs>
    Administrador?: boolean | AdministradorArgs<ExtArgs>
    CategoriaEvento?: boolean | CategoriaEventoArgs<ExtArgs>
    Rifa?: boolean | Evento$RifaArgs<ExtArgs>
    _count?: boolean | EventoCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["evento"]>

  export type EventoSelectScalar = {
    id?: boolean
    titulo?: boolean
    localizacao?: boolean
    descricao?: boolean
    data_evento?: boolean
    fotografia?: boolean
    estado?: boolean
    id_administrador?: boolean
    id_categoria?: boolean
  }

  export type EventoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Anuncio?: boolean | Evento$AnuncioArgs<ExtArgs>
    AvaliacaoEvento?: boolean | Evento$AvaliacaoEventoArgs<ExtArgs>
    Administrador?: boolean | AdministradorArgs<ExtArgs>
    CategoriaEvento?: boolean | CategoriaEventoArgs<ExtArgs>
    Rifa?: boolean | Evento$RifaArgs<ExtArgs>
    _count?: boolean | EventoCountOutputTypeArgs<ExtArgs>
  }


  type EventoGetPayload<S extends boolean | null | undefined | EventoArgs> = $Types.GetResult<EventoPayload, S>

  type EventoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<EventoFindManyArgs, 'select' | 'include'> & {
      select?: EventoCountAggregateInputType | true
    }

  export interface EventoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Evento'], meta: { name: 'Evento' } }
    /**
     * Find zero or one Evento that matches the filter.
     * @param {EventoFindUniqueArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EventoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Evento'> extends True ? Prisma__EventoClient<$Types.GetResult<EventoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__EventoClient<$Types.GetResult<EventoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Evento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EventoFindUniqueOrThrowArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EventoClient<$Types.GetResult<EventoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Evento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindFirstArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EventoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Evento'> extends True ? Prisma__EventoClient<$Types.GetResult<EventoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__EventoClient<$Types.GetResult<EventoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Evento that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindFirstOrThrowArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EventoClient<$Types.GetResult<EventoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Eventos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Eventos
     * const eventos = await prisma.evento.findMany()
     * 
     * // Get first 10 Eventos
     * const eventos = await prisma.evento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventoWithIdOnly = await prisma.evento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<EventoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Evento.
     * @param {EventoCreateArgs} args - Arguments to create a Evento.
     * @example
     * // Create one Evento
     * const Evento = await prisma.evento.create({
     *   data: {
     *     // ... data to create a Evento
     *   }
     * })
     * 
    **/
    create<T extends EventoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EventoCreateArgs<ExtArgs>>
    ): Prisma__EventoClient<$Types.GetResult<EventoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Eventos.
     *     @param {EventoCreateManyArgs} args - Arguments to create many Eventos.
     *     @example
     *     // Create many Eventos
     *     const evento = await prisma.evento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Evento.
     * @param {EventoDeleteArgs} args - Arguments to delete one Evento.
     * @example
     * // Delete one Evento
     * const Evento = await prisma.evento.delete({
     *   where: {
     *     // ... filter to delete one Evento
     *   }
     * })
     * 
    **/
    delete<T extends EventoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EventoDeleteArgs<ExtArgs>>
    ): Prisma__EventoClient<$Types.GetResult<EventoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Evento.
     * @param {EventoUpdateArgs} args - Arguments to update one Evento.
     * @example
     * // Update one Evento
     * const evento = await prisma.evento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EventoUpdateArgs<ExtArgs>>
    ): Prisma__EventoClient<$Types.GetResult<EventoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Eventos.
     * @param {EventoDeleteManyArgs} args - Arguments to filter Eventos to delete.
     * @example
     * // Delete a few Eventos
     * const { count } = await prisma.evento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Eventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Eventos
     * const evento = await prisma.evento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EventoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Evento.
     * @param {EventoUpsertArgs} args - Arguments to update or create a Evento.
     * @example
     * // Update or create a Evento
     * const evento = await prisma.evento.upsert({
     *   create: {
     *     // ... data to create a Evento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Evento we want to update
     *   }
     * })
    **/
    upsert<T extends EventoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EventoUpsertArgs<ExtArgs>>
    ): Prisma__EventoClient<$Types.GetResult<EventoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Eventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoCountArgs} args - Arguments to filter Eventos to count.
     * @example
     * // Count the number of Eventos
     * const count = await prisma.evento.count({
     *   where: {
     *     // ... the filter for the Eventos we want to count
     *   }
     * })
    **/
    count<T extends EventoCountArgs>(
      args?: Subset<T, EventoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Evento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventoAggregateArgs>(args: Subset<T, EventoAggregateArgs>): Prisma.PrismaPromise<GetEventoAggregateType<T>>

    /**
     * Group by Evento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventoGroupByArgs['orderBy'] }
        : { orderBy?: EventoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Evento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EventoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Anuncio<T extends Evento$AnuncioArgs<ExtArgs> = {}>(args?: Subset<T, Evento$AnuncioArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AnuncioPayload<ExtArgs>, T, 'findMany', never>| Null>;

    AvaliacaoEvento<T extends Evento$AvaliacaoEventoArgs<ExtArgs> = {}>(args?: Subset<T, Evento$AvaliacaoEventoArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AvaliacaoEventoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Administrador<T extends AdministradorArgs<ExtArgs> = {}>(args?: Subset<T, AdministradorArgs<ExtArgs>>): Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    CategoriaEvento<T extends CategoriaEventoArgs<ExtArgs> = {}>(args?: Subset<T, CategoriaEventoArgs<ExtArgs>>): Prisma__CategoriaEventoClient<$Types.GetResult<CategoriaEventoPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Rifa<T extends Evento$RifaArgs<ExtArgs> = {}>(args?: Subset<T, Evento$RifaArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<RifaPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Evento base type for findUnique actions
   */
  export type EventoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where: EventoWhereUniqueInput
  }

  /**
   * Evento findUnique
   */
  export interface EventoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends EventoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Evento findUniqueOrThrow
   */
  export type EventoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where: EventoWhereUniqueInput
  }


  /**
   * Evento base type for findFirst actions
   */
  export type EventoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: Enumerable<EventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eventos.
     */
    distinct?: Enumerable<EventoScalarFieldEnum>
  }

  /**
   * Evento findFirst
   */
  export interface EventoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends EventoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Evento findFirstOrThrow
   */
  export type EventoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: Enumerable<EventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eventos.
     */
    distinct?: Enumerable<EventoScalarFieldEnum>
  }


  /**
   * Evento findMany
   */
  export type EventoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Eventos to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: Enumerable<EventoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    distinct?: Enumerable<EventoScalarFieldEnum>
  }


  /**
   * Evento create
   */
  export type EventoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The data needed to create a Evento.
     */
    data: XOR<EventoCreateInput, EventoUncheckedCreateInput>
  }


  /**
   * Evento createMany
   */
  export type EventoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Eventos.
     */
    data: Enumerable<EventoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Evento update
   */
  export type EventoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The data needed to update a Evento.
     */
    data: XOR<EventoUpdateInput, EventoUncheckedUpdateInput>
    /**
     * Choose, which Evento to update.
     */
    where: EventoWhereUniqueInput
  }


  /**
   * Evento updateMany
   */
  export type EventoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Eventos.
     */
    data: XOR<EventoUpdateManyMutationInput, EventoUncheckedUpdateManyInput>
    /**
     * Filter which Eventos to update
     */
    where?: EventoWhereInput
  }


  /**
   * Evento upsert
   */
  export type EventoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The filter to search for the Evento to update in case it exists.
     */
    where: EventoWhereUniqueInput
    /**
     * In case the Evento found by the `where` argument doesn't exist, create a new Evento with this data.
     */
    create: XOR<EventoCreateInput, EventoUncheckedCreateInput>
    /**
     * In case the Evento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventoUpdateInput, EventoUncheckedUpdateInput>
  }


  /**
   * Evento delete
   */
  export type EventoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter which Evento to delete.
     */
    where: EventoWhereUniqueInput
  }


  /**
   * Evento deleteMany
   */
  export type EventoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Eventos to delete
     */
    where?: EventoWhereInput
  }


  /**
   * Evento.Anuncio
   */
  export type Evento$AnuncioArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anuncio
     */
    select?: AnuncioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AnuncioInclude<ExtArgs> | null
    where?: AnuncioWhereInput
    orderBy?: Enumerable<AnuncioOrderByWithRelationInput>
    cursor?: AnuncioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AnuncioScalarFieldEnum>
  }


  /**
   * Evento.AvaliacaoEvento
   */
  export type Evento$AvaliacaoEventoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvaliacaoEvento
     */
    select?: AvaliacaoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvaliacaoEventoInclude<ExtArgs> | null
    where?: AvaliacaoEventoWhereInput
    orderBy?: Enumerable<AvaliacaoEventoOrderByWithRelationInput>
    cursor?: AvaliacaoEventoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AvaliacaoEventoScalarFieldEnum>
  }


  /**
   * Evento.Rifa
   */
  export type Evento$RifaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rifa
     */
    select?: RifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RifaInclude<ExtArgs> | null
    where?: RifaWhereInput
    orderBy?: Enumerable<RifaOrderByWithRelationInput>
    cursor?: RifaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RifaScalarFieldEnum>
  }


  /**
   * Evento without action
   */
  export type EventoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventoInclude<ExtArgs> | null
  }



  /**
   * Model MensagemSuporte
   */


  export type AggregateMensagemSuporte = {
    _count: MensagemSuporteCountAggregateOutputType | null
    _avg: MensagemSuporteAvgAggregateOutputType | null
    _sum: MensagemSuporteSumAggregateOutputType | null
    _min: MensagemSuporteMinAggregateOutputType | null
    _max: MensagemSuporteMaxAggregateOutputType | null
  }

  export type MensagemSuporteAvgAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_administrador: number | null
  }

  export type MensagemSuporteSumAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_administrador: number | null
  }

  export type MensagemSuporteMinAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_administrador: number | null
    mensagem: string | null
    data_abertura: Date | null
    data_encerramento: Date | null
    estado: MensagemSuporte_estado | null
  }

  export type MensagemSuporteMaxAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_administrador: number | null
    mensagem: string | null
    data_abertura: Date | null
    data_encerramento: Date | null
    estado: MensagemSuporte_estado | null
  }

  export type MensagemSuporteCountAggregateOutputType = {
    id: number
    id_utilizador: number
    id_administrador: number
    mensagem: number
    data_abertura: number
    data_encerramento: number
    estado: number
    _all: number
  }


  export type MensagemSuporteAvgAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_administrador?: true
  }

  export type MensagemSuporteSumAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_administrador?: true
  }

  export type MensagemSuporteMinAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_administrador?: true
    mensagem?: true
    data_abertura?: true
    data_encerramento?: true
    estado?: true
  }

  export type MensagemSuporteMaxAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_administrador?: true
    mensagem?: true
    data_abertura?: true
    data_encerramento?: true
    estado?: true
  }

  export type MensagemSuporteCountAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_administrador?: true
    mensagem?: true
    data_abertura?: true
    data_encerramento?: true
    estado?: true
    _all?: true
  }

  export type MensagemSuporteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MensagemSuporte to aggregate.
     */
    where?: MensagemSuporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MensagemSuportes to fetch.
     */
    orderBy?: Enumerable<MensagemSuporteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MensagemSuporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MensagemSuportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MensagemSuportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MensagemSuportes
    **/
    _count?: true | MensagemSuporteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MensagemSuporteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MensagemSuporteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MensagemSuporteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MensagemSuporteMaxAggregateInputType
  }

  export type GetMensagemSuporteAggregateType<T extends MensagemSuporteAggregateArgs> = {
        [P in keyof T & keyof AggregateMensagemSuporte]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMensagemSuporte[P]>
      : GetScalarType<T[P], AggregateMensagemSuporte[P]>
  }




  export type MensagemSuporteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MensagemSuporteWhereInput
    orderBy?: Enumerable<MensagemSuporteOrderByWithAggregationInput>
    by: MensagemSuporteScalarFieldEnum[]
    having?: MensagemSuporteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MensagemSuporteCountAggregateInputType | true
    _avg?: MensagemSuporteAvgAggregateInputType
    _sum?: MensagemSuporteSumAggregateInputType
    _min?: MensagemSuporteMinAggregateInputType
    _max?: MensagemSuporteMaxAggregateInputType
  }


  export type MensagemSuporteGroupByOutputType = {
    id: number
    id_utilizador: number
    id_administrador: number
    mensagem: string
    data_abertura: Date | null
    data_encerramento: Date | null
    estado: MensagemSuporte_estado | null
    _count: MensagemSuporteCountAggregateOutputType | null
    _avg: MensagemSuporteAvgAggregateOutputType | null
    _sum: MensagemSuporteSumAggregateOutputType | null
    _min: MensagemSuporteMinAggregateOutputType | null
    _max: MensagemSuporteMaxAggregateOutputType | null
  }

  type GetMensagemSuporteGroupByPayload<T extends MensagemSuporteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MensagemSuporteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MensagemSuporteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MensagemSuporteGroupByOutputType[P]>
            : GetScalarType<T[P], MensagemSuporteGroupByOutputType[P]>
        }
      >
    >


  export type MensagemSuporteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_utilizador?: boolean
    id_administrador?: boolean
    mensagem?: boolean
    data_abertura?: boolean
    data_encerramento?: boolean
    estado?: boolean
    Utilizador?: boolean | UtilizadorArgs<ExtArgs>
    Administrador?: boolean | AdministradorArgs<ExtArgs>
  }, ExtArgs["result"]["mensagemSuporte"]>

  export type MensagemSuporteSelectScalar = {
    id?: boolean
    id_utilizador?: boolean
    id_administrador?: boolean
    mensagem?: boolean
    data_abertura?: boolean
    data_encerramento?: boolean
    estado?: boolean
  }

  export type MensagemSuporteInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Utilizador?: boolean | UtilizadorArgs<ExtArgs>
    Administrador?: boolean | AdministradorArgs<ExtArgs>
  }


  type MensagemSuporteGetPayload<S extends boolean | null | undefined | MensagemSuporteArgs> = $Types.GetResult<MensagemSuportePayload, S>

  type MensagemSuporteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MensagemSuporteFindManyArgs, 'select' | 'include'> & {
      select?: MensagemSuporteCountAggregateInputType | true
    }

  export interface MensagemSuporteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MensagemSuporte'], meta: { name: 'MensagemSuporte' } }
    /**
     * Find zero or one MensagemSuporte that matches the filter.
     * @param {MensagemSuporteFindUniqueArgs} args - Arguments to find a MensagemSuporte
     * @example
     * // Get one MensagemSuporte
     * const mensagemSuporte = await prisma.mensagemSuporte.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MensagemSuporteFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MensagemSuporteFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MensagemSuporte'> extends True ? Prisma__MensagemSuporteClient<$Types.GetResult<MensagemSuportePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__MensagemSuporteClient<$Types.GetResult<MensagemSuportePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one MensagemSuporte that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MensagemSuporteFindUniqueOrThrowArgs} args - Arguments to find a MensagemSuporte
     * @example
     * // Get one MensagemSuporte
     * const mensagemSuporte = await prisma.mensagemSuporte.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MensagemSuporteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MensagemSuporteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MensagemSuporteClient<$Types.GetResult<MensagemSuportePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first MensagemSuporte that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemSuporteFindFirstArgs} args - Arguments to find a MensagemSuporte
     * @example
     * // Get one MensagemSuporte
     * const mensagemSuporte = await prisma.mensagemSuporte.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MensagemSuporteFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MensagemSuporteFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MensagemSuporte'> extends True ? Prisma__MensagemSuporteClient<$Types.GetResult<MensagemSuportePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__MensagemSuporteClient<$Types.GetResult<MensagemSuportePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first MensagemSuporte that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemSuporteFindFirstOrThrowArgs} args - Arguments to find a MensagemSuporte
     * @example
     * // Get one MensagemSuporte
     * const mensagemSuporte = await prisma.mensagemSuporte.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MensagemSuporteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MensagemSuporteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MensagemSuporteClient<$Types.GetResult<MensagemSuportePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more MensagemSuportes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemSuporteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MensagemSuportes
     * const mensagemSuportes = await prisma.mensagemSuporte.findMany()
     * 
     * // Get first 10 MensagemSuportes
     * const mensagemSuportes = await prisma.mensagemSuporte.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mensagemSuporteWithIdOnly = await prisma.mensagemSuporte.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MensagemSuporteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MensagemSuporteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<MensagemSuportePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a MensagemSuporte.
     * @param {MensagemSuporteCreateArgs} args - Arguments to create a MensagemSuporte.
     * @example
     * // Create one MensagemSuporte
     * const MensagemSuporte = await prisma.mensagemSuporte.create({
     *   data: {
     *     // ... data to create a MensagemSuporte
     *   }
     * })
     * 
    **/
    create<T extends MensagemSuporteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MensagemSuporteCreateArgs<ExtArgs>>
    ): Prisma__MensagemSuporteClient<$Types.GetResult<MensagemSuportePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many MensagemSuportes.
     *     @param {MensagemSuporteCreateManyArgs} args - Arguments to create many MensagemSuportes.
     *     @example
     *     // Create many MensagemSuportes
     *     const mensagemSuporte = await prisma.mensagemSuporte.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MensagemSuporteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MensagemSuporteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MensagemSuporte.
     * @param {MensagemSuporteDeleteArgs} args - Arguments to delete one MensagemSuporte.
     * @example
     * // Delete one MensagemSuporte
     * const MensagemSuporte = await prisma.mensagemSuporte.delete({
     *   where: {
     *     // ... filter to delete one MensagemSuporte
     *   }
     * })
     * 
    **/
    delete<T extends MensagemSuporteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MensagemSuporteDeleteArgs<ExtArgs>>
    ): Prisma__MensagemSuporteClient<$Types.GetResult<MensagemSuportePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one MensagemSuporte.
     * @param {MensagemSuporteUpdateArgs} args - Arguments to update one MensagemSuporte.
     * @example
     * // Update one MensagemSuporte
     * const mensagemSuporte = await prisma.mensagemSuporte.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MensagemSuporteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MensagemSuporteUpdateArgs<ExtArgs>>
    ): Prisma__MensagemSuporteClient<$Types.GetResult<MensagemSuportePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more MensagemSuportes.
     * @param {MensagemSuporteDeleteManyArgs} args - Arguments to filter MensagemSuportes to delete.
     * @example
     * // Delete a few MensagemSuportes
     * const { count } = await prisma.mensagemSuporte.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MensagemSuporteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MensagemSuporteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MensagemSuportes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemSuporteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MensagemSuportes
     * const mensagemSuporte = await prisma.mensagemSuporte.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MensagemSuporteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MensagemSuporteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MensagemSuporte.
     * @param {MensagemSuporteUpsertArgs} args - Arguments to update or create a MensagemSuporte.
     * @example
     * // Update or create a MensagemSuporte
     * const mensagemSuporte = await prisma.mensagemSuporte.upsert({
     *   create: {
     *     // ... data to create a MensagemSuporte
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MensagemSuporte we want to update
     *   }
     * })
    **/
    upsert<T extends MensagemSuporteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MensagemSuporteUpsertArgs<ExtArgs>>
    ): Prisma__MensagemSuporteClient<$Types.GetResult<MensagemSuportePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of MensagemSuportes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemSuporteCountArgs} args - Arguments to filter MensagemSuportes to count.
     * @example
     * // Count the number of MensagemSuportes
     * const count = await prisma.mensagemSuporte.count({
     *   where: {
     *     // ... the filter for the MensagemSuportes we want to count
     *   }
     * })
    **/
    count<T extends MensagemSuporteCountArgs>(
      args?: Subset<T, MensagemSuporteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MensagemSuporteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MensagemSuporte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemSuporteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MensagemSuporteAggregateArgs>(args: Subset<T, MensagemSuporteAggregateArgs>): Prisma.PrismaPromise<GetMensagemSuporteAggregateType<T>>

    /**
     * Group by MensagemSuporte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemSuporteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MensagemSuporteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MensagemSuporteGroupByArgs['orderBy'] }
        : { orderBy?: MensagemSuporteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MensagemSuporteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMensagemSuporteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MensagemSuporte.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MensagemSuporteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Utilizador<T extends UtilizadorArgs<ExtArgs> = {}>(args?: Subset<T, UtilizadorArgs<ExtArgs>>): Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Administrador<T extends AdministradorArgs<ExtArgs> = {}>(args?: Subset<T, AdministradorArgs<ExtArgs>>): Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MensagemSuporte base type for findUnique actions
   */
  export type MensagemSuporteFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemSuporte
     */
    select?: MensagemSuporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensagemSuporteInclude<ExtArgs> | null
    /**
     * Filter, which MensagemSuporte to fetch.
     */
    where: MensagemSuporteWhereUniqueInput
  }

  /**
   * MensagemSuporte findUnique
   */
  export interface MensagemSuporteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MensagemSuporteFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MensagemSuporte findUniqueOrThrow
   */
  export type MensagemSuporteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemSuporte
     */
    select?: MensagemSuporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensagemSuporteInclude<ExtArgs> | null
    /**
     * Filter, which MensagemSuporte to fetch.
     */
    where: MensagemSuporteWhereUniqueInput
  }


  /**
   * MensagemSuporte base type for findFirst actions
   */
  export type MensagemSuporteFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemSuporte
     */
    select?: MensagemSuporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensagemSuporteInclude<ExtArgs> | null
    /**
     * Filter, which MensagemSuporte to fetch.
     */
    where?: MensagemSuporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MensagemSuportes to fetch.
     */
    orderBy?: Enumerable<MensagemSuporteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MensagemSuportes.
     */
    cursor?: MensagemSuporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MensagemSuportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MensagemSuportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MensagemSuportes.
     */
    distinct?: Enumerable<MensagemSuporteScalarFieldEnum>
  }

  /**
   * MensagemSuporte findFirst
   */
  export interface MensagemSuporteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MensagemSuporteFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MensagemSuporte findFirstOrThrow
   */
  export type MensagemSuporteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemSuporte
     */
    select?: MensagemSuporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensagemSuporteInclude<ExtArgs> | null
    /**
     * Filter, which MensagemSuporte to fetch.
     */
    where?: MensagemSuporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MensagemSuportes to fetch.
     */
    orderBy?: Enumerable<MensagemSuporteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MensagemSuportes.
     */
    cursor?: MensagemSuporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MensagemSuportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MensagemSuportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MensagemSuportes.
     */
    distinct?: Enumerable<MensagemSuporteScalarFieldEnum>
  }


  /**
   * MensagemSuporte findMany
   */
  export type MensagemSuporteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemSuporte
     */
    select?: MensagemSuporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensagemSuporteInclude<ExtArgs> | null
    /**
     * Filter, which MensagemSuportes to fetch.
     */
    where?: MensagemSuporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MensagemSuportes to fetch.
     */
    orderBy?: Enumerable<MensagemSuporteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MensagemSuportes.
     */
    cursor?: MensagemSuporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MensagemSuportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MensagemSuportes.
     */
    skip?: number
    distinct?: Enumerable<MensagemSuporteScalarFieldEnum>
  }


  /**
   * MensagemSuporte create
   */
  export type MensagemSuporteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemSuporte
     */
    select?: MensagemSuporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensagemSuporteInclude<ExtArgs> | null
    /**
     * The data needed to create a MensagemSuporte.
     */
    data: XOR<MensagemSuporteCreateInput, MensagemSuporteUncheckedCreateInput>
  }


  /**
   * MensagemSuporte createMany
   */
  export type MensagemSuporteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MensagemSuportes.
     */
    data: Enumerable<MensagemSuporteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MensagemSuporte update
   */
  export type MensagemSuporteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemSuporte
     */
    select?: MensagemSuporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensagemSuporteInclude<ExtArgs> | null
    /**
     * The data needed to update a MensagemSuporte.
     */
    data: XOR<MensagemSuporteUpdateInput, MensagemSuporteUncheckedUpdateInput>
    /**
     * Choose, which MensagemSuporte to update.
     */
    where: MensagemSuporteWhereUniqueInput
  }


  /**
   * MensagemSuporte updateMany
   */
  export type MensagemSuporteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MensagemSuportes.
     */
    data: XOR<MensagemSuporteUpdateManyMutationInput, MensagemSuporteUncheckedUpdateManyInput>
    /**
     * Filter which MensagemSuportes to update
     */
    where?: MensagemSuporteWhereInput
  }


  /**
   * MensagemSuporte upsert
   */
  export type MensagemSuporteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemSuporte
     */
    select?: MensagemSuporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensagemSuporteInclude<ExtArgs> | null
    /**
     * The filter to search for the MensagemSuporte to update in case it exists.
     */
    where: MensagemSuporteWhereUniqueInput
    /**
     * In case the MensagemSuporte found by the `where` argument doesn't exist, create a new MensagemSuporte with this data.
     */
    create: XOR<MensagemSuporteCreateInput, MensagemSuporteUncheckedCreateInput>
    /**
     * In case the MensagemSuporte was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MensagemSuporteUpdateInput, MensagemSuporteUncheckedUpdateInput>
  }


  /**
   * MensagemSuporte delete
   */
  export type MensagemSuporteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemSuporte
     */
    select?: MensagemSuporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensagemSuporteInclude<ExtArgs> | null
    /**
     * Filter which MensagemSuporte to delete.
     */
    where: MensagemSuporteWhereUniqueInput
  }


  /**
   * MensagemSuporte deleteMany
   */
  export type MensagemSuporteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MensagemSuportes to delete
     */
    where?: MensagemSuporteWhereInput
  }


  /**
   * MensagemSuporte without action
   */
  export type MensagemSuporteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemSuporte
     */
    select?: MensagemSuporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensagemSuporteInclude<ExtArgs> | null
  }



  /**
   * Model Notificacao
   */


  export type AggregateNotificacao = {
    _count: NotificacaoCountAggregateOutputType | null
    _avg: NotificacaoAvgAggregateOutputType | null
    _sum: NotificacaoSumAggregateOutputType | null
    _min: NotificacaoMinAggregateOutputType | null
    _max: NotificacaoMaxAggregateOutputType | null
  }

  export type NotificacaoAvgAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_administrador: number | null
  }

  export type NotificacaoSumAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_administrador: number | null
  }

  export type NotificacaoMinAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_administrador: number | null
    mensagem: string | null
    data_envio: Date | null
    estado: Notificacao_estado | null
  }

  export type NotificacaoMaxAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    id_administrador: number | null
    mensagem: string | null
    data_envio: Date | null
    estado: Notificacao_estado | null
  }

  export type NotificacaoCountAggregateOutputType = {
    id: number
    id_utilizador: number
    id_administrador: number
    mensagem: number
    data_envio: number
    estado: number
    _all: number
  }


  export type NotificacaoAvgAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_administrador?: true
  }

  export type NotificacaoSumAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_administrador?: true
  }

  export type NotificacaoMinAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_administrador?: true
    mensagem?: true
    data_envio?: true
    estado?: true
  }

  export type NotificacaoMaxAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_administrador?: true
    mensagem?: true
    data_envio?: true
    estado?: true
  }

  export type NotificacaoCountAggregateInputType = {
    id?: true
    id_utilizador?: true
    id_administrador?: true
    mensagem?: true
    data_envio?: true
    estado?: true
    _all?: true
  }

  export type NotificacaoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notificacao to aggregate.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: Enumerable<NotificacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notificacaos
    **/
    _count?: true | NotificacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificacaoMaxAggregateInputType
  }

  export type GetNotificacaoAggregateType<T extends NotificacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificacao[P]>
      : GetScalarType<T[P], AggregateNotificacao[P]>
  }




  export type NotificacaoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NotificacaoWhereInput
    orderBy?: Enumerable<NotificacaoOrderByWithAggregationInput>
    by: NotificacaoScalarFieldEnum[]
    having?: NotificacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificacaoCountAggregateInputType | true
    _avg?: NotificacaoAvgAggregateInputType
    _sum?: NotificacaoSumAggregateInputType
    _min?: NotificacaoMinAggregateInputType
    _max?: NotificacaoMaxAggregateInputType
  }


  export type NotificacaoGroupByOutputType = {
    id: number
    id_utilizador: number
    id_administrador: number
    mensagem: string
    data_envio: Date | null
    estado: Notificacao_estado | null
    _count: NotificacaoCountAggregateOutputType | null
    _avg: NotificacaoAvgAggregateOutputType | null
    _sum: NotificacaoSumAggregateOutputType | null
    _min: NotificacaoMinAggregateOutputType | null
    _max: NotificacaoMaxAggregateOutputType | null
  }

  type GetNotificacaoGroupByPayload<T extends NotificacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NotificacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificacaoGroupByOutputType[P]>
            : GetScalarType<T[P], NotificacaoGroupByOutputType[P]>
        }
      >
    >


  export type NotificacaoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_utilizador?: boolean
    id_administrador?: boolean
    mensagem?: boolean
    data_envio?: boolean
    estado?: boolean
    Utilizador?: boolean | UtilizadorArgs<ExtArgs>
    Administrador?: boolean | AdministradorArgs<ExtArgs>
  }, ExtArgs["result"]["notificacao"]>

  export type NotificacaoSelectScalar = {
    id?: boolean
    id_utilizador?: boolean
    id_administrador?: boolean
    mensagem?: boolean
    data_envio?: boolean
    estado?: boolean
  }

  export type NotificacaoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Utilizador?: boolean | UtilizadorArgs<ExtArgs>
    Administrador?: boolean | AdministradorArgs<ExtArgs>
  }


  type NotificacaoGetPayload<S extends boolean | null | undefined | NotificacaoArgs> = $Types.GetResult<NotificacaoPayload, S>

  type NotificacaoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<NotificacaoFindManyArgs, 'select' | 'include'> & {
      select?: NotificacaoCountAggregateInputType | true
    }

  export interface NotificacaoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notificacao'], meta: { name: 'Notificacao' } }
    /**
     * Find zero or one Notificacao that matches the filter.
     * @param {NotificacaoFindUniqueArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificacaoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NotificacaoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Notificacao'> extends True ? Prisma__NotificacaoClient<$Types.GetResult<NotificacaoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__NotificacaoClient<$Types.GetResult<NotificacaoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Notificacao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificacaoFindUniqueOrThrowArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificacaoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificacaoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificacaoClient<$Types.GetResult<NotificacaoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Notificacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoFindFirstArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificacaoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NotificacaoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Notificacao'> extends True ? Prisma__NotificacaoClient<$Types.GetResult<NotificacaoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__NotificacaoClient<$Types.GetResult<NotificacaoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Notificacao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoFindFirstOrThrowArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificacaoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificacaoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificacaoClient<$Types.GetResult<NotificacaoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Notificacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notificacaos
     * const notificacaos = await prisma.notificacao.findMany()
     * 
     * // Get first 10 Notificacaos
     * const notificacaos = await prisma.notificacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificacaoWithIdOnly = await prisma.notificacao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificacaoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificacaoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<NotificacaoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Notificacao.
     * @param {NotificacaoCreateArgs} args - Arguments to create a Notificacao.
     * @example
     * // Create one Notificacao
     * const Notificacao = await prisma.notificacao.create({
     *   data: {
     *     // ... data to create a Notificacao
     *   }
     * })
     * 
    **/
    create<T extends NotificacaoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificacaoCreateArgs<ExtArgs>>
    ): Prisma__NotificacaoClient<$Types.GetResult<NotificacaoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Notificacaos.
     *     @param {NotificacaoCreateManyArgs} args - Arguments to create many Notificacaos.
     *     @example
     *     // Create many Notificacaos
     *     const notificacao = await prisma.notificacao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificacaoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificacaoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notificacao.
     * @param {NotificacaoDeleteArgs} args - Arguments to delete one Notificacao.
     * @example
     * // Delete one Notificacao
     * const Notificacao = await prisma.notificacao.delete({
     *   where: {
     *     // ... filter to delete one Notificacao
     *   }
     * })
     * 
    **/
    delete<T extends NotificacaoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificacaoDeleteArgs<ExtArgs>>
    ): Prisma__NotificacaoClient<$Types.GetResult<NotificacaoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Notificacao.
     * @param {NotificacaoUpdateArgs} args - Arguments to update one Notificacao.
     * @example
     * // Update one Notificacao
     * const notificacao = await prisma.notificacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificacaoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificacaoUpdateArgs<ExtArgs>>
    ): Prisma__NotificacaoClient<$Types.GetResult<NotificacaoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Notificacaos.
     * @param {NotificacaoDeleteManyArgs} args - Arguments to filter Notificacaos to delete.
     * @example
     * // Delete a few Notificacaos
     * const { count } = await prisma.notificacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificacaoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificacaoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notificacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notificacaos
     * const notificacao = await prisma.notificacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificacaoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificacaoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notificacao.
     * @param {NotificacaoUpsertArgs} args - Arguments to update or create a Notificacao.
     * @example
     * // Update or create a Notificacao
     * const notificacao = await prisma.notificacao.upsert({
     *   create: {
     *     // ... data to create a Notificacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notificacao we want to update
     *   }
     * })
    **/
    upsert<T extends NotificacaoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificacaoUpsertArgs<ExtArgs>>
    ): Prisma__NotificacaoClient<$Types.GetResult<NotificacaoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Notificacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoCountArgs} args - Arguments to filter Notificacaos to count.
     * @example
     * // Count the number of Notificacaos
     * const count = await prisma.notificacao.count({
     *   where: {
     *     // ... the filter for the Notificacaos we want to count
     *   }
     * })
    **/
    count<T extends NotificacaoCountArgs>(
      args?: Subset<T, NotificacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notificacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificacaoAggregateArgs>(args: Subset<T, NotificacaoAggregateArgs>): Prisma.PrismaPromise<GetNotificacaoAggregateType<T>>

    /**
     * Group by Notificacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificacaoGroupByArgs['orderBy'] }
        : { orderBy?: NotificacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Notificacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NotificacaoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Utilizador<T extends UtilizadorArgs<ExtArgs> = {}>(args?: Subset<T, UtilizadorArgs<ExtArgs>>): Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Administrador<T extends AdministradorArgs<ExtArgs> = {}>(args?: Subset<T, AdministradorArgs<ExtArgs>>): Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Notificacao base type for findUnique actions
   */
  export type NotificacaoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where: NotificacaoWhereUniqueInput
  }

  /**
   * Notificacao findUnique
   */
  export interface NotificacaoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends NotificacaoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Notificacao findUniqueOrThrow
   */
  export type NotificacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where: NotificacaoWhereUniqueInput
  }


  /**
   * Notificacao base type for findFirst actions
   */
  export type NotificacaoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: Enumerable<NotificacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notificacaos.
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notificacaos.
     */
    distinct?: Enumerable<NotificacaoScalarFieldEnum>
  }

  /**
   * Notificacao findFirst
   */
  export interface NotificacaoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends NotificacaoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Notificacao findFirstOrThrow
   */
  export type NotificacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: Enumerable<NotificacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notificacaos.
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notificacaos.
     */
    distinct?: Enumerable<NotificacaoScalarFieldEnum>
  }


  /**
   * Notificacao findMany
   */
  export type NotificacaoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacaos to fetch.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: Enumerable<NotificacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notificacaos.
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    distinct?: Enumerable<NotificacaoScalarFieldEnum>
  }


  /**
   * Notificacao create
   */
  export type NotificacaoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Notificacao.
     */
    data: XOR<NotificacaoCreateInput, NotificacaoUncheckedCreateInput>
  }


  /**
   * Notificacao createMany
   */
  export type NotificacaoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notificacaos.
     */
    data: Enumerable<NotificacaoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Notificacao update
   */
  export type NotificacaoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Notificacao.
     */
    data: XOR<NotificacaoUpdateInput, NotificacaoUncheckedUpdateInput>
    /**
     * Choose, which Notificacao to update.
     */
    where: NotificacaoWhereUniqueInput
  }


  /**
   * Notificacao updateMany
   */
  export type NotificacaoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notificacaos.
     */
    data: XOR<NotificacaoUpdateManyMutationInput, NotificacaoUncheckedUpdateManyInput>
    /**
     * Filter which Notificacaos to update
     */
    where?: NotificacaoWhereInput
  }


  /**
   * Notificacao upsert
   */
  export type NotificacaoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Notificacao to update in case it exists.
     */
    where: NotificacaoWhereUniqueInput
    /**
     * In case the Notificacao found by the `where` argument doesn't exist, create a new Notificacao with this data.
     */
    create: XOR<NotificacaoCreateInput, NotificacaoUncheckedCreateInput>
    /**
     * In case the Notificacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificacaoUpdateInput, NotificacaoUncheckedUpdateInput>
  }


  /**
   * Notificacao delete
   */
  export type NotificacaoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter which Notificacao to delete.
     */
    where: NotificacaoWhereUniqueInput
  }


  /**
   * Notificacao deleteMany
   */
  export type NotificacaoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notificacaos to delete
     */
    where?: NotificacaoWhereInput
  }


  /**
   * Notificacao without action
   */
  export type NotificacaoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificacaoInclude<ExtArgs> | null
  }



  /**
   * Model Pagamento
   */


  export type AggregatePagamento = {
    _count: PagamentoCountAggregateOutputType | null
    _avg: PagamentoAvgAggregateOutputType | null
    _sum: PagamentoSumAggregateOutputType | null
    _min: PagamentoMinAggregateOutputType | null
    _max: PagamentoMaxAggregateOutputType | null
  }

  export type PagamentoAvgAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    valor: Decimal | null
  }

  export type PagamentoSumAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    valor: Decimal | null
  }

  export type PagamentoMinAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    valor: Decimal | null
    metodo_pagamento: Pagamento_metodo_pagamento | null
    estado: Pagamento_estado | null
    data_pagamento: Date | null
  }

  export type PagamentoMaxAggregateOutputType = {
    id: number | null
    id_utilizador: number | null
    valor: Decimal | null
    metodo_pagamento: Pagamento_metodo_pagamento | null
    estado: Pagamento_estado | null
    data_pagamento: Date | null
  }

  export type PagamentoCountAggregateOutputType = {
    id: number
    id_utilizador: number
    valor: number
    metodo_pagamento: number
    estado: number
    data_pagamento: number
    _all: number
  }


  export type PagamentoAvgAggregateInputType = {
    id?: true
    id_utilizador?: true
    valor?: true
  }

  export type PagamentoSumAggregateInputType = {
    id?: true
    id_utilizador?: true
    valor?: true
  }

  export type PagamentoMinAggregateInputType = {
    id?: true
    id_utilizador?: true
    valor?: true
    metodo_pagamento?: true
    estado?: true
    data_pagamento?: true
  }

  export type PagamentoMaxAggregateInputType = {
    id?: true
    id_utilizador?: true
    valor?: true
    metodo_pagamento?: true
    estado?: true
    data_pagamento?: true
  }

  export type PagamentoCountAggregateInputType = {
    id?: true
    id_utilizador?: true
    valor?: true
    metodo_pagamento?: true
    estado?: true
    data_pagamento?: true
    _all?: true
  }

  export type PagamentoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pagamento to aggregate.
     */
    where?: PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: Enumerable<PagamentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pagamentos
    **/
    _count?: true | PagamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PagamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PagamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PagamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PagamentoMaxAggregateInputType
  }

  export type GetPagamentoAggregateType<T extends PagamentoAggregateArgs> = {
        [P in keyof T & keyof AggregatePagamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePagamento[P]>
      : GetScalarType<T[P], AggregatePagamento[P]>
  }




  export type PagamentoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PagamentoWhereInput
    orderBy?: Enumerable<PagamentoOrderByWithAggregationInput>
    by: PagamentoScalarFieldEnum[]
    having?: PagamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PagamentoCountAggregateInputType | true
    _avg?: PagamentoAvgAggregateInputType
    _sum?: PagamentoSumAggregateInputType
    _min?: PagamentoMinAggregateInputType
    _max?: PagamentoMaxAggregateInputType
  }


  export type PagamentoGroupByOutputType = {
    id: number
    id_utilizador: number
    valor: Decimal
    metodo_pagamento: Pagamento_metodo_pagamento
    estado: Pagamento_estado | null
    data_pagamento: Date | null
    _count: PagamentoCountAggregateOutputType | null
    _avg: PagamentoAvgAggregateOutputType | null
    _sum: PagamentoSumAggregateOutputType | null
    _min: PagamentoMinAggregateOutputType | null
    _max: PagamentoMaxAggregateOutputType | null
  }

  type GetPagamentoGroupByPayload<T extends PagamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PagamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PagamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PagamentoGroupByOutputType[P]>
            : GetScalarType<T[P], PagamentoGroupByOutputType[P]>
        }
      >
    >


  export type PagamentoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_utilizador?: boolean
    valor?: boolean
    metodo_pagamento?: boolean
    estado?: boolean
    data_pagamento?: boolean
    Utilizador?: boolean | UtilizadorArgs<ExtArgs>
  }, ExtArgs["result"]["pagamento"]>

  export type PagamentoSelectScalar = {
    id?: boolean
    id_utilizador?: boolean
    valor?: boolean
    metodo_pagamento?: boolean
    estado?: boolean
    data_pagamento?: boolean
  }

  export type PagamentoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Utilizador?: boolean | UtilizadorArgs<ExtArgs>
  }


  type PagamentoGetPayload<S extends boolean | null | undefined | PagamentoArgs> = $Types.GetResult<PagamentoPayload, S>

  type PagamentoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PagamentoFindManyArgs, 'select' | 'include'> & {
      select?: PagamentoCountAggregateInputType | true
    }

  export interface PagamentoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pagamento'], meta: { name: 'Pagamento' } }
    /**
     * Find zero or one Pagamento that matches the filter.
     * @param {PagamentoFindUniqueArgs} args - Arguments to find a Pagamento
     * @example
     * // Get one Pagamento
     * const pagamento = await prisma.pagamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PagamentoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PagamentoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Pagamento'> extends True ? Prisma__PagamentoClient<$Types.GetResult<PagamentoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PagamentoClient<$Types.GetResult<PagamentoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Pagamento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PagamentoFindUniqueOrThrowArgs} args - Arguments to find a Pagamento
     * @example
     * // Get one Pagamento
     * const pagamento = await prisma.pagamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PagamentoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PagamentoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PagamentoClient<$Types.GetResult<PagamentoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Pagamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoFindFirstArgs} args - Arguments to find a Pagamento
     * @example
     * // Get one Pagamento
     * const pagamento = await prisma.pagamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PagamentoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PagamentoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Pagamento'> extends True ? Prisma__PagamentoClient<$Types.GetResult<PagamentoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PagamentoClient<$Types.GetResult<PagamentoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Pagamento that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoFindFirstOrThrowArgs} args - Arguments to find a Pagamento
     * @example
     * // Get one Pagamento
     * const pagamento = await prisma.pagamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PagamentoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PagamentoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PagamentoClient<$Types.GetResult<PagamentoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Pagamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pagamentos
     * const pagamentos = await prisma.pagamento.findMany()
     * 
     * // Get first 10 Pagamentos
     * const pagamentos = await prisma.pagamento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pagamentoWithIdOnly = await prisma.pagamento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PagamentoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PagamentoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PagamentoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Pagamento.
     * @param {PagamentoCreateArgs} args - Arguments to create a Pagamento.
     * @example
     * // Create one Pagamento
     * const Pagamento = await prisma.pagamento.create({
     *   data: {
     *     // ... data to create a Pagamento
     *   }
     * })
     * 
    **/
    create<T extends PagamentoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PagamentoCreateArgs<ExtArgs>>
    ): Prisma__PagamentoClient<$Types.GetResult<PagamentoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Pagamentos.
     *     @param {PagamentoCreateManyArgs} args - Arguments to create many Pagamentos.
     *     @example
     *     // Create many Pagamentos
     *     const pagamento = await prisma.pagamento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PagamentoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PagamentoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pagamento.
     * @param {PagamentoDeleteArgs} args - Arguments to delete one Pagamento.
     * @example
     * // Delete one Pagamento
     * const Pagamento = await prisma.pagamento.delete({
     *   where: {
     *     // ... filter to delete one Pagamento
     *   }
     * })
     * 
    **/
    delete<T extends PagamentoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PagamentoDeleteArgs<ExtArgs>>
    ): Prisma__PagamentoClient<$Types.GetResult<PagamentoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Pagamento.
     * @param {PagamentoUpdateArgs} args - Arguments to update one Pagamento.
     * @example
     * // Update one Pagamento
     * const pagamento = await prisma.pagamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PagamentoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PagamentoUpdateArgs<ExtArgs>>
    ): Prisma__PagamentoClient<$Types.GetResult<PagamentoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Pagamentos.
     * @param {PagamentoDeleteManyArgs} args - Arguments to filter Pagamentos to delete.
     * @example
     * // Delete a few Pagamentos
     * const { count } = await prisma.pagamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PagamentoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PagamentoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pagamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pagamentos
     * const pagamento = await prisma.pagamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PagamentoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PagamentoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pagamento.
     * @param {PagamentoUpsertArgs} args - Arguments to update or create a Pagamento.
     * @example
     * // Update or create a Pagamento
     * const pagamento = await prisma.pagamento.upsert({
     *   create: {
     *     // ... data to create a Pagamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pagamento we want to update
     *   }
     * })
    **/
    upsert<T extends PagamentoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PagamentoUpsertArgs<ExtArgs>>
    ): Prisma__PagamentoClient<$Types.GetResult<PagamentoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Pagamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoCountArgs} args - Arguments to filter Pagamentos to count.
     * @example
     * // Count the number of Pagamentos
     * const count = await prisma.pagamento.count({
     *   where: {
     *     // ... the filter for the Pagamentos we want to count
     *   }
     * })
    **/
    count<T extends PagamentoCountArgs>(
      args?: Subset<T, PagamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PagamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pagamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PagamentoAggregateArgs>(args: Subset<T, PagamentoAggregateArgs>): Prisma.PrismaPromise<GetPagamentoAggregateType<T>>

    /**
     * Group by Pagamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PagamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PagamentoGroupByArgs['orderBy'] }
        : { orderBy?: PagamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PagamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPagamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Pagamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PagamentoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Utilizador<T extends UtilizadorArgs<ExtArgs> = {}>(args?: Subset<T, UtilizadorArgs<ExtArgs>>): Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Pagamento base type for findUnique actions
   */
  export type PagamentoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamento to fetch.
     */
    where: PagamentoWhereUniqueInput
  }

  /**
   * Pagamento findUnique
   */
  export interface PagamentoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PagamentoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pagamento findUniqueOrThrow
   */
  export type PagamentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamento to fetch.
     */
    where: PagamentoWhereUniqueInput
  }


  /**
   * Pagamento base type for findFirst actions
   */
  export type PagamentoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamento to fetch.
     */
    where?: PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: Enumerable<PagamentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pagamentos.
     */
    cursor?: PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pagamentos.
     */
    distinct?: Enumerable<PagamentoScalarFieldEnum>
  }

  /**
   * Pagamento findFirst
   */
  export interface PagamentoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PagamentoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pagamento findFirstOrThrow
   */
  export type PagamentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamento to fetch.
     */
    where?: PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: Enumerable<PagamentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pagamentos.
     */
    cursor?: PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pagamentos.
     */
    distinct?: Enumerable<PagamentoScalarFieldEnum>
  }


  /**
   * Pagamento findMany
   */
  export type PagamentoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter, which Pagamentos to fetch.
     */
    where?: PagamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pagamentos to fetch.
     */
    orderBy?: Enumerable<PagamentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pagamentos.
     */
    cursor?: PagamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pagamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pagamentos.
     */
    skip?: number
    distinct?: Enumerable<PagamentoScalarFieldEnum>
  }


  /**
   * Pagamento create
   */
  export type PagamentoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Pagamento.
     */
    data: XOR<PagamentoCreateInput, PagamentoUncheckedCreateInput>
  }


  /**
   * Pagamento createMany
   */
  export type PagamentoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pagamentos.
     */
    data: Enumerable<PagamentoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Pagamento update
   */
  export type PagamentoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Pagamento.
     */
    data: XOR<PagamentoUpdateInput, PagamentoUncheckedUpdateInput>
    /**
     * Choose, which Pagamento to update.
     */
    where: PagamentoWhereUniqueInput
  }


  /**
   * Pagamento updateMany
   */
  export type PagamentoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pagamentos.
     */
    data: XOR<PagamentoUpdateManyMutationInput, PagamentoUncheckedUpdateManyInput>
    /**
     * Filter which Pagamentos to update
     */
    where?: PagamentoWhereInput
  }


  /**
   * Pagamento upsert
   */
  export type PagamentoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Pagamento to update in case it exists.
     */
    where: PagamentoWhereUniqueInput
    /**
     * In case the Pagamento found by the `where` argument doesn't exist, create a new Pagamento with this data.
     */
    create: XOR<PagamentoCreateInput, PagamentoUncheckedCreateInput>
    /**
     * In case the Pagamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PagamentoUpdateInput, PagamentoUncheckedUpdateInput>
  }


  /**
   * Pagamento delete
   */
  export type PagamentoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagamentoInclude<ExtArgs> | null
    /**
     * Filter which Pagamento to delete.
     */
    where: PagamentoWhereUniqueInput
  }


  /**
   * Pagamento deleteMany
   */
  export type PagamentoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pagamentos to delete
     */
    where?: PagamentoWhereInput
  }


  /**
   * Pagamento without action
   */
  export type PagamentoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagamentoInclude<ExtArgs> | null
  }



  /**
   * Model Rifa
   */


  export type AggregateRifa = {
    _count: RifaCountAggregateOutputType | null
    _avg: RifaAvgAggregateOutputType | null
    _sum: RifaSumAggregateOutputType | null
    _min: RifaMinAggregateOutputType | null
    _max: RifaMaxAggregateOutputType | null
  }

  export type RifaAvgAggregateOutputType = {
    id: number | null
    preco: Decimal | null
    quantidade: number | null
    id_administrador: number | null
    id_evento: number | null
  }

  export type RifaSumAggregateOutputType = {
    id: number | null
    preco: Decimal | null
    quantidade: number | null
    id_administrador: number | null
    id_evento: number | null
  }

  export type RifaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    preco: Decimal | null
    quantidade: number | null
    descricao: string | null
    premio: string | null
    data_sorteio: Date | null
    id_administrador: number | null
    id_evento: number | null
  }

  export type RifaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    preco: Decimal | null
    quantidade: number | null
    descricao: string | null
    premio: string | null
    data_sorteio: Date | null
    id_administrador: number | null
    id_evento: number | null
  }

  export type RifaCountAggregateOutputType = {
    id: number
    nome: number
    preco: number
    quantidade: number
    descricao: number
    premio: number
    data_sorteio: number
    id_administrador: number
    id_evento: number
    _all: number
  }


  export type RifaAvgAggregateInputType = {
    id?: true
    preco?: true
    quantidade?: true
    id_administrador?: true
    id_evento?: true
  }

  export type RifaSumAggregateInputType = {
    id?: true
    preco?: true
    quantidade?: true
    id_administrador?: true
    id_evento?: true
  }

  export type RifaMinAggregateInputType = {
    id?: true
    nome?: true
    preco?: true
    quantidade?: true
    descricao?: true
    premio?: true
    data_sorteio?: true
    id_administrador?: true
    id_evento?: true
  }

  export type RifaMaxAggregateInputType = {
    id?: true
    nome?: true
    preco?: true
    quantidade?: true
    descricao?: true
    premio?: true
    data_sorteio?: true
    id_administrador?: true
    id_evento?: true
  }

  export type RifaCountAggregateInputType = {
    id?: true
    nome?: true
    preco?: true
    quantidade?: true
    descricao?: true
    premio?: true
    data_sorteio?: true
    id_administrador?: true
    id_evento?: true
    _all?: true
  }

  export type RifaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rifa to aggregate.
     */
    where?: RifaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rifas to fetch.
     */
    orderBy?: Enumerable<RifaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RifaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rifas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rifas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rifas
    **/
    _count?: true | RifaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RifaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RifaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RifaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RifaMaxAggregateInputType
  }

  export type GetRifaAggregateType<T extends RifaAggregateArgs> = {
        [P in keyof T & keyof AggregateRifa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRifa[P]>
      : GetScalarType<T[P], AggregateRifa[P]>
  }




  export type RifaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RifaWhereInput
    orderBy?: Enumerable<RifaOrderByWithAggregationInput>
    by: RifaScalarFieldEnum[]
    having?: RifaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RifaCountAggregateInputType | true
    _avg?: RifaAvgAggregateInputType
    _sum?: RifaSumAggregateInputType
    _min?: RifaMinAggregateInputType
    _max?: RifaMaxAggregateInputType
  }


  export type RifaGroupByOutputType = {
    id: number
    nome: string
    preco: Decimal
    quantidade: number
    descricao: string
    premio: string
    data_sorteio: Date
    id_administrador: number
    id_evento: number
    _count: RifaCountAggregateOutputType | null
    _avg: RifaAvgAggregateOutputType | null
    _sum: RifaSumAggregateOutputType | null
    _min: RifaMinAggregateOutputType | null
    _max: RifaMaxAggregateOutputType | null
  }

  type GetRifaGroupByPayload<T extends RifaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RifaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RifaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RifaGroupByOutputType[P]>
            : GetScalarType<T[P], RifaGroupByOutputType[P]>
        }
      >
    >


  export type RifaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    preco?: boolean
    quantidade?: boolean
    descricao?: boolean
    premio?: boolean
    data_sorteio?: boolean
    id_administrador?: boolean
    id_evento?: boolean
    CompraRifa?: boolean | Rifa$CompraRifaArgs<ExtArgs>
    Administrador?: boolean | AdministradorArgs<ExtArgs>
    Evento?: boolean | EventoArgs<ExtArgs>
    _count?: boolean | RifaCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["rifa"]>

  export type RifaSelectScalar = {
    id?: boolean
    nome?: boolean
    preco?: boolean
    quantidade?: boolean
    descricao?: boolean
    premio?: boolean
    data_sorteio?: boolean
    id_administrador?: boolean
    id_evento?: boolean
  }

  export type RifaInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    CompraRifa?: boolean | Rifa$CompraRifaArgs<ExtArgs>
    Administrador?: boolean | AdministradorArgs<ExtArgs>
    Evento?: boolean | EventoArgs<ExtArgs>
    _count?: boolean | RifaCountOutputTypeArgs<ExtArgs>
  }


  type RifaGetPayload<S extends boolean | null | undefined | RifaArgs> = $Types.GetResult<RifaPayload, S>

  type RifaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RifaFindManyArgs, 'select' | 'include'> & {
      select?: RifaCountAggregateInputType | true
    }

  export interface RifaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rifa'], meta: { name: 'Rifa' } }
    /**
     * Find zero or one Rifa that matches the filter.
     * @param {RifaFindUniqueArgs} args - Arguments to find a Rifa
     * @example
     * // Get one Rifa
     * const rifa = await prisma.rifa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RifaFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RifaFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Rifa'> extends True ? Prisma__RifaClient<$Types.GetResult<RifaPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__RifaClient<$Types.GetResult<RifaPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Rifa that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RifaFindUniqueOrThrowArgs} args - Arguments to find a Rifa
     * @example
     * // Get one Rifa
     * const rifa = await prisma.rifa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RifaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RifaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RifaClient<$Types.GetResult<RifaPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Rifa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RifaFindFirstArgs} args - Arguments to find a Rifa
     * @example
     * // Get one Rifa
     * const rifa = await prisma.rifa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RifaFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RifaFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Rifa'> extends True ? Prisma__RifaClient<$Types.GetResult<RifaPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__RifaClient<$Types.GetResult<RifaPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Rifa that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RifaFindFirstOrThrowArgs} args - Arguments to find a Rifa
     * @example
     * // Get one Rifa
     * const rifa = await prisma.rifa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RifaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RifaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RifaClient<$Types.GetResult<RifaPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Rifas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RifaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rifas
     * const rifas = await prisma.rifa.findMany()
     * 
     * // Get first 10 Rifas
     * const rifas = await prisma.rifa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rifaWithIdOnly = await prisma.rifa.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RifaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RifaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<RifaPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Rifa.
     * @param {RifaCreateArgs} args - Arguments to create a Rifa.
     * @example
     * // Create one Rifa
     * const Rifa = await prisma.rifa.create({
     *   data: {
     *     // ... data to create a Rifa
     *   }
     * })
     * 
    **/
    create<T extends RifaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RifaCreateArgs<ExtArgs>>
    ): Prisma__RifaClient<$Types.GetResult<RifaPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Rifas.
     *     @param {RifaCreateManyArgs} args - Arguments to create many Rifas.
     *     @example
     *     // Create many Rifas
     *     const rifa = await prisma.rifa.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RifaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RifaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rifa.
     * @param {RifaDeleteArgs} args - Arguments to delete one Rifa.
     * @example
     * // Delete one Rifa
     * const Rifa = await prisma.rifa.delete({
     *   where: {
     *     // ... filter to delete one Rifa
     *   }
     * })
     * 
    **/
    delete<T extends RifaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RifaDeleteArgs<ExtArgs>>
    ): Prisma__RifaClient<$Types.GetResult<RifaPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Rifa.
     * @param {RifaUpdateArgs} args - Arguments to update one Rifa.
     * @example
     * // Update one Rifa
     * const rifa = await prisma.rifa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RifaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RifaUpdateArgs<ExtArgs>>
    ): Prisma__RifaClient<$Types.GetResult<RifaPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Rifas.
     * @param {RifaDeleteManyArgs} args - Arguments to filter Rifas to delete.
     * @example
     * // Delete a few Rifas
     * const { count } = await prisma.rifa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RifaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RifaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rifas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RifaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rifas
     * const rifa = await prisma.rifa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RifaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RifaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rifa.
     * @param {RifaUpsertArgs} args - Arguments to update or create a Rifa.
     * @example
     * // Update or create a Rifa
     * const rifa = await prisma.rifa.upsert({
     *   create: {
     *     // ... data to create a Rifa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rifa we want to update
     *   }
     * })
    **/
    upsert<T extends RifaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RifaUpsertArgs<ExtArgs>>
    ): Prisma__RifaClient<$Types.GetResult<RifaPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Rifas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RifaCountArgs} args - Arguments to filter Rifas to count.
     * @example
     * // Count the number of Rifas
     * const count = await prisma.rifa.count({
     *   where: {
     *     // ... the filter for the Rifas we want to count
     *   }
     * })
    **/
    count<T extends RifaCountArgs>(
      args?: Subset<T, RifaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RifaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rifa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RifaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RifaAggregateArgs>(args: Subset<T, RifaAggregateArgs>): Prisma.PrismaPromise<GetRifaAggregateType<T>>

    /**
     * Group by Rifa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RifaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RifaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RifaGroupByArgs['orderBy'] }
        : { orderBy?: RifaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RifaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRifaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Rifa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RifaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    CompraRifa<T extends Rifa$CompraRifaArgs<ExtArgs> = {}>(args?: Subset<T, Rifa$CompraRifaArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CompraRifaPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Administrador<T extends AdministradorArgs<ExtArgs> = {}>(args?: Subset<T, AdministradorArgs<ExtArgs>>): Prisma__AdministradorClient<$Types.GetResult<AdministradorPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Evento<T extends EventoArgs<ExtArgs> = {}>(args?: Subset<T, EventoArgs<ExtArgs>>): Prisma__EventoClient<$Types.GetResult<EventoPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Rifa base type for findUnique actions
   */
  export type RifaFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rifa
     */
    select?: RifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RifaInclude<ExtArgs> | null
    /**
     * Filter, which Rifa to fetch.
     */
    where: RifaWhereUniqueInput
  }

  /**
   * Rifa findUnique
   */
  export interface RifaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RifaFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Rifa findUniqueOrThrow
   */
  export type RifaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rifa
     */
    select?: RifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RifaInclude<ExtArgs> | null
    /**
     * Filter, which Rifa to fetch.
     */
    where: RifaWhereUniqueInput
  }


  /**
   * Rifa base type for findFirst actions
   */
  export type RifaFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rifa
     */
    select?: RifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RifaInclude<ExtArgs> | null
    /**
     * Filter, which Rifa to fetch.
     */
    where?: RifaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rifas to fetch.
     */
    orderBy?: Enumerable<RifaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rifas.
     */
    cursor?: RifaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rifas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rifas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rifas.
     */
    distinct?: Enumerable<RifaScalarFieldEnum>
  }

  /**
   * Rifa findFirst
   */
  export interface RifaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RifaFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Rifa findFirstOrThrow
   */
  export type RifaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rifa
     */
    select?: RifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RifaInclude<ExtArgs> | null
    /**
     * Filter, which Rifa to fetch.
     */
    where?: RifaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rifas to fetch.
     */
    orderBy?: Enumerable<RifaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rifas.
     */
    cursor?: RifaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rifas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rifas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rifas.
     */
    distinct?: Enumerable<RifaScalarFieldEnum>
  }


  /**
   * Rifa findMany
   */
  export type RifaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rifa
     */
    select?: RifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RifaInclude<ExtArgs> | null
    /**
     * Filter, which Rifas to fetch.
     */
    where?: RifaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rifas to fetch.
     */
    orderBy?: Enumerable<RifaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rifas.
     */
    cursor?: RifaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rifas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rifas.
     */
    skip?: number
    distinct?: Enumerable<RifaScalarFieldEnum>
  }


  /**
   * Rifa create
   */
  export type RifaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rifa
     */
    select?: RifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RifaInclude<ExtArgs> | null
    /**
     * The data needed to create a Rifa.
     */
    data: XOR<RifaCreateInput, RifaUncheckedCreateInput>
  }


  /**
   * Rifa createMany
   */
  export type RifaCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rifas.
     */
    data: Enumerable<RifaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Rifa update
   */
  export type RifaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rifa
     */
    select?: RifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RifaInclude<ExtArgs> | null
    /**
     * The data needed to update a Rifa.
     */
    data: XOR<RifaUpdateInput, RifaUncheckedUpdateInput>
    /**
     * Choose, which Rifa to update.
     */
    where: RifaWhereUniqueInput
  }


  /**
   * Rifa updateMany
   */
  export type RifaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rifas.
     */
    data: XOR<RifaUpdateManyMutationInput, RifaUncheckedUpdateManyInput>
    /**
     * Filter which Rifas to update
     */
    where?: RifaWhereInput
  }


  /**
   * Rifa upsert
   */
  export type RifaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rifa
     */
    select?: RifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RifaInclude<ExtArgs> | null
    /**
     * The filter to search for the Rifa to update in case it exists.
     */
    where: RifaWhereUniqueInput
    /**
     * In case the Rifa found by the `where` argument doesn't exist, create a new Rifa with this data.
     */
    create: XOR<RifaCreateInput, RifaUncheckedCreateInput>
    /**
     * In case the Rifa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RifaUpdateInput, RifaUncheckedUpdateInput>
  }


  /**
   * Rifa delete
   */
  export type RifaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rifa
     */
    select?: RifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RifaInclude<ExtArgs> | null
    /**
     * Filter which Rifa to delete.
     */
    where: RifaWhereUniqueInput
  }


  /**
   * Rifa deleteMany
   */
  export type RifaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rifas to delete
     */
    where?: RifaWhereInput
  }


  /**
   * Rifa.CompraRifa
   */
  export type Rifa$CompraRifaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraRifa
     */
    select?: CompraRifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRifaInclude<ExtArgs> | null
    where?: CompraRifaWhereInput
    orderBy?: Enumerable<CompraRifaOrderByWithRelationInput>
    cursor?: CompraRifaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompraRifaScalarFieldEnum>
  }


  /**
   * Rifa without action
   */
  export type RifaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rifa
     */
    select?: RifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RifaInclude<ExtArgs> | null
  }



  /**
   * Model Suporte
   */


  export type AggregateSuporte = {
    _count: SuporteCountAggregateOutputType | null
    _avg: SuporteAvgAggregateOutputType | null
    _sum: SuporteSumAggregateOutputType | null
    _min: SuporteMinAggregateOutputType | null
    _max: SuporteMaxAggregateOutputType | null
  }

  export type SuporteAvgAggregateOutputType = {
    id: number | null
  }

  export type SuporteSumAggregateOutputType = {
    id: number | null
  }

  export type SuporteMinAggregateOutputType = {
    id: number | null
    artigo: string | null
    descricao: string | null
  }

  export type SuporteMaxAggregateOutputType = {
    id: number | null
    artigo: string | null
    descricao: string | null
  }

  export type SuporteCountAggregateOutputType = {
    id: number
    artigo: number
    descricao: number
    _all: number
  }


  export type SuporteAvgAggregateInputType = {
    id?: true
  }

  export type SuporteSumAggregateInputType = {
    id?: true
  }

  export type SuporteMinAggregateInputType = {
    id?: true
    artigo?: true
    descricao?: true
  }

  export type SuporteMaxAggregateInputType = {
    id?: true
    artigo?: true
    descricao?: true
  }

  export type SuporteCountAggregateInputType = {
    id?: true
    artigo?: true
    descricao?: true
    _all?: true
  }

  export type SuporteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Suporte to aggregate.
     */
    where?: SuporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suportes to fetch.
     */
    orderBy?: Enumerable<SuporteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SuporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Suportes
    **/
    _count?: true | SuporteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SuporteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SuporteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuporteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuporteMaxAggregateInputType
  }

  export type GetSuporteAggregateType<T extends SuporteAggregateArgs> = {
        [P in keyof T & keyof AggregateSuporte]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuporte[P]>
      : GetScalarType<T[P], AggregateSuporte[P]>
  }




  export type SuporteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SuporteWhereInput
    orderBy?: Enumerable<SuporteOrderByWithAggregationInput>
    by: SuporteScalarFieldEnum[]
    having?: SuporteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuporteCountAggregateInputType | true
    _avg?: SuporteAvgAggregateInputType
    _sum?: SuporteSumAggregateInputType
    _min?: SuporteMinAggregateInputType
    _max?: SuporteMaxAggregateInputType
  }


  export type SuporteGroupByOutputType = {
    id: number
    artigo: string
    descricao: string
    _count: SuporteCountAggregateOutputType | null
    _avg: SuporteAvgAggregateOutputType | null
    _sum: SuporteSumAggregateOutputType | null
    _min: SuporteMinAggregateOutputType | null
    _max: SuporteMaxAggregateOutputType | null
  }

  type GetSuporteGroupByPayload<T extends SuporteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SuporteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuporteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuporteGroupByOutputType[P]>
            : GetScalarType<T[P], SuporteGroupByOutputType[P]>
        }
      >
    >


  export type SuporteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    artigo?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["suporte"]>

  export type SuporteSelectScalar = {
    id?: boolean
    artigo?: boolean
    descricao?: boolean
  }


  type SuporteGetPayload<S extends boolean | null | undefined | SuporteArgs> = $Types.GetResult<SuportePayload, S>

  type SuporteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SuporteFindManyArgs, 'select' | 'include'> & {
      select?: SuporteCountAggregateInputType | true
    }

  export interface SuporteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Suporte'], meta: { name: 'Suporte' } }
    /**
     * Find zero or one Suporte that matches the filter.
     * @param {SuporteFindUniqueArgs} args - Arguments to find a Suporte
     * @example
     * // Get one Suporte
     * const suporte = await prisma.suporte.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SuporteFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SuporteFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Suporte'> extends True ? Prisma__SuporteClient<$Types.GetResult<SuportePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SuporteClient<$Types.GetResult<SuportePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Suporte that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SuporteFindUniqueOrThrowArgs} args - Arguments to find a Suporte
     * @example
     * // Get one Suporte
     * const suporte = await prisma.suporte.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SuporteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SuporteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SuporteClient<$Types.GetResult<SuportePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Suporte that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuporteFindFirstArgs} args - Arguments to find a Suporte
     * @example
     * // Get one Suporte
     * const suporte = await prisma.suporte.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SuporteFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SuporteFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Suporte'> extends True ? Prisma__SuporteClient<$Types.GetResult<SuportePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SuporteClient<$Types.GetResult<SuportePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Suporte that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuporteFindFirstOrThrowArgs} args - Arguments to find a Suporte
     * @example
     * // Get one Suporte
     * const suporte = await prisma.suporte.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SuporteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SuporteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SuporteClient<$Types.GetResult<SuportePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Suportes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuporteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Suportes
     * const suportes = await prisma.suporte.findMany()
     * 
     * // Get first 10 Suportes
     * const suportes = await prisma.suporte.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const suporteWithIdOnly = await prisma.suporte.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SuporteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuporteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SuportePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Suporte.
     * @param {SuporteCreateArgs} args - Arguments to create a Suporte.
     * @example
     * // Create one Suporte
     * const Suporte = await prisma.suporte.create({
     *   data: {
     *     // ... data to create a Suporte
     *   }
     * })
     * 
    **/
    create<T extends SuporteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SuporteCreateArgs<ExtArgs>>
    ): Prisma__SuporteClient<$Types.GetResult<SuportePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Suportes.
     *     @param {SuporteCreateManyArgs} args - Arguments to create many Suportes.
     *     @example
     *     // Create many Suportes
     *     const suporte = await prisma.suporte.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SuporteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuporteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Suporte.
     * @param {SuporteDeleteArgs} args - Arguments to delete one Suporte.
     * @example
     * // Delete one Suporte
     * const Suporte = await prisma.suporte.delete({
     *   where: {
     *     // ... filter to delete one Suporte
     *   }
     * })
     * 
    **/
    delete<T extends SuporteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SuporteDeleteArgs<ExtArgs>>
    ): Prisma__SuporteClient<$Types.GetResult<SuportePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Suporte.
     * @param {SuporteUpdateArgs} args - Arguments to update one Suporte.
     * @example
     * // Update one Suporte
     * const suporte = await prisma.suporte.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SuporteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SuporteUpdateArgs<ExtArgs>>
    ): Prisma__SuporteClient<$Types.GetResult<SuportePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Suportes.
     * @param {SuporteDeleteManyArgs} args - Arguments to filter Suportes to delete.
     * @example
     * // Delete a few Suportes
     * const { count } = await prisma.suporte.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SuporteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuporteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Suportes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuporteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Suportes
     * const suporte = await prisma.suporte.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SuporteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SuporteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Suporte.
     * @param {SuporteUpsertArgs} args - Arguments to update or create a Suporte.
     * @example
     * // Update or create a Suporte
     * const suporte = await prisma.suporte.upsert({
     *   create: {
     *     // ... data to create a Suporte
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Suporte we want to update
     *   }
     * })
    **/
    upsert<T extends SuporteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SuporteUpsertArgs<ExtArgs>>
    ): Prisma__SuporteClient<$Types.GetResult<SuportePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Suportes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuporteCountArgs} args - Arguments to filter Suportes to count.
     * @example
     * // Count the number of Suportes
     * const count = await prisma.suporte.count({
     *   where: {
     *     // ... the filter for the Suportes we want to count
     *   }
     * })
    **/
    count<T extends SuporteCountArgs>(
      args?: Subset<T, SuporteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuporteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Suporte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuporteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuporteAggregateArgs>(args: Subset<T, SuporteAggregateArgs>): Prisma.PrismaPromise<GetSuporteAggregateType<T>>

    /**
     * Group by Suporte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuporteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SuporteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SuporteGroupByArgs['orderBy'] }
        : { orderBy?: SuporteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SuporteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuporteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Suporte.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SuporteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Suporte base type for findUnique actions
   */
  export type SuporteFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suporte
     */
    select?: SuporteSelect<ExtArgs> | null
    /**
     * Filter, which Suporte to fetch.
     */
    where: SuporteWhereUniqueInput
  }

  /**
   * Suporte findUnique
   */
  export interface SuporteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SuporteFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Suporte findUniqueOrThrow
   */
  export type SuporteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suporte
     */
    select?: SuporteSelect<ExtArgs> | null
    /**
     * Filter, which Suporte to fetch.
     */
    where: SuporteWhereUniqueInput
  }


  /**
   * Suporte base type for findFirst actions
   */
  export type SuporteFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suporte
     */
    select?: SuporteSelect<ExtArgs> | null
    /**
     * Filter, which Suporte to fetch.
     */
    where?: SuporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suportes to fetch.
     */
    orderBy?: Enumerable<SuporteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suportes.
     */
    cursor?: SuporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suportes.
     */
    distinct?: Enumerable<SuporteScalarFieldEnum>
  }

  /**
   * Suporte findFirst
   */
  export interface SuporteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SuporteFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Suporte findFirstOrThrow
   */
  export type SuporteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suporte
     */
    select?: SuporteSelect<ExtArgs> | null
    /**
     * Filter, which Suporte to fetch.
     */
    where?: SuporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suportes to fetch.
     */
    orderBy?: Enumerable<SuporteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suportes.
     */
    cursor?: SuporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suportes.
     */
    distinct?: Enumerable<SuporteScalarFieldEnum>
  }


  /**
   * Suporte findMany
   */
  export type SuporteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suporte
     */
    select?: SuporteSelect<ExtArgs> | null
    /**
     * Filter, which Suportes to fetch.
     */
    where?: SuporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suportes to fetch.
     */
    orderBy?: Enumerable<SuporteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Suportes.
     */
    cursor?: SuporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suportes.
     */
    skip?: number
    distinct?: Enumerable<SuporteScalarFieldEnum>
  }


  /**
   * Suporte create
   */
  export type SuporteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suporte
     */
    select?: SuporteSelect<ExtArgs> | null
    /**
     * The data needed to create a Suporte.
     */
    data: XOR<SuporteCreateInput, SuporteUncheckedCreateInput>
  }


  /**
   * Suporte createMany
   */
  export type SuporteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Suportes.
     */
    data: Enumerable<SuporteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Suporte update
   */
  export type SuporteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suporte
     */
    select?: SuporteSelect<ExtArgs> | null
    /**
     * The data needed to update a Suporte.
     */
    data: XOR<SuporteUpdateInput, SuporteUncheckedUpdateInput>
    /**
     * Choose, which Suporte to update.
     */
    where: SuporteWhereUniqueInput
  }


  /**
   * Suporte updateMany
   */
  export type SuporteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Suportes.
     */
    data: XOR<SuporteUpdateManyMutationInput, SuporteUncheckedUpdateManyInput>
    /**
     * Filter which Suportes to update
     */
    where?: SuporteWhereInput
  }


  /**
   * Suporte upsert
   */
  export type SuporteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suporte
     */
    select?: SuporteSelect<ExtArgs> | null
    /**
     * The filter to search for the Suporte to update in case it exists.
     */
    where: SuporteWhereUniqueInput
    /**
     * In case the Suporte found by the `where` argument doesn't exist, create a new Suporte with this data.
     */
    create: XOR<SuporteCreateInput, SuporteUncheckedCreateInput>
    /**
     * In case the Suporte was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SuporteUpdateInput, SuporteUncheckedUpdateInput>
  }


  /**
   * Suporte delete
   */
  export type SuporteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suporte
     */
    select?: SuporteSelect<ExtArgs> | null
    /**
     * Filter which Suporte to delete.
     */
    where: SuporteWhereUniqueInput
  }


  /**
   * Suporte deleteMany
   */
  export type SuporteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Suportes to delete
     */
    where?: SuporteWhereInput
  }


  /**
   * Suporte without action
   */
  export type SuporteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Suporte
     */
    select?: SuporteSelect<ExtArgs> | null
  }



  /**
   * Model Utilizador
   */


  export type AggregateUtilizador = {
    _count: UtilizadorCountAggregateOutputType | null
    _avg: UtilizadorAvgAggregateOutputType | null
    _sum: UtilizadorSumAggregateOutputType | null
    _min: UtilizadorMinAggregateOutputType | null
    _max: UtilizadorMaxAggregateOutputType | null
  }

  export type UtilizadorAvgAggregateOutputType = {
    id: number | null
  }

  export type UtilizadorSumAggregateOutputType = {
    id: number | null
  }

  export type UtilizadorMinAggregateOutputType = {
    id: number | null
    username: string | null
    nome: string | null
    email: string | null
    telefone: string | null
    password_hash: string | null
    morada: string | null
  }

  export type UtilizadorMaxAggregateOutputType = {
    id: number | null
    username: string | null
    nome: string | null
    email: string | null
    telefone: string | null
    password_hash: string | null
    morada: string | null
  }

  export type UtilizadorCountAggregateOutputType = {
    id: number
    username: number
    nome: number
    email: number
    telefone: number
    password_hash: number
    morada: number
    _all: number
  }


  export type UtilizadorAvgAggregateInputType = {
    id?: true
  }

  export type UtilizadorSumAggregateInputType = {
    id?: true
  }

  export type UtilizadorMinAggregateInputType = {
    id?: true
    username?: true
    nome?: true
    email?: true
    telefone?: true
    password_hash?: true
    morada?: true
  }

  export type UtilizadorMaxAggregateInputType = {
    id?: true
    username?: true
    nome?: true
    email?: true
    telefone?: true
    password_hash?: true
    morada?: true
  }

  export type UtilizadorCountAggregateInputType = {
    id?: true
    username?: true
    nome?: true
    email?: true
    telefone?: true
    password_hash?: true
    morada?: true
    _all?: true
  }

  export type UtilizadorAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilizador to aggregate.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: Enumerable<UtilizadorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Utilizadors
    **/
    _count?: true | UtilizadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UtilizadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UtilizadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UtilizadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UtilizadorMaxAggregateInputType
  }

  export type GetUtilizadorAggregateType<T extends UtilizadorAggregateArgs> = {
        [P in keyof T & keyof AggregateUtilizador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUtilizador[P]>
      : GetScalarType<T[P], AggregateUtilizador[P]>
  }




  export type UtilizadorGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UtilizadorWhereInput
    orderBy?: Enumerable<UtilizadorOrderByWithAggregationInput>
    by: UtilizadorScalarFieldEnum[]
    having?: UtilizadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UtilizadorCountAggregateInputType | true
    _avg?: UtilizadorAvgAggregateInputType
    _sum?: UtilizadorSumAggregateInputType
    _min?: UtilizadorMinAggregateInputType
    _max?: UtilizadorMaxAggregateInputType
  }


  export type UtilizadorGroupByOutputType = {
    id: number
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada: string | null
    _count: UtilizadorCountAggregateOutputType | null
    _avg: UtilizadorAvgAggregateOutputType | null
    _sum: UtilizadorSumAggregateOutputType | null
    _min: UtilizadorMinAggregateOutputType | null
    _max: UtilizadorMaxAggregateOutputType | null
  }

  type GetUtilizadorGroupByPayload<T extends UtilizadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UtilizadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UtilizadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UtilizadorGroupByOutputType[P]>
            : GetScalarType<T[P], UtilizadorGroupByOutputType[P]>
        }
      >
    >


  export type UtilizadorSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    password_hash?: boolean
    morada?: boolean
    AvaliacaoEvento?: boolean | Utilizador$AvaliacaoEventoArgs<ExtArgs>
    CandidaturaVoluntariado?: boolean | Utilizador$CandidaturaVoluntariadoArgs<ExtArgs>
    CompraRifa?: boolean | Utilizador$CompraRifaArgs<ExtArgs>
    Doacao?: boolean | Utilizador$DoacaoArgs<ExtArgs>
    MensagemSuporte?: boolean | Utilizador$MensagemSuporteArgs<ExtArgs>
    Notificacao?: boolean | Utilizador$NotificacaoArgs<ExtArgs>
    Pagamento?: boolean | Utilizador$PagamentoArgs<ExtArgs>
    _count?: boolean | UtilizadorCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["utilizador"]>

  export type UtilizadorSelectScalar = {
    id?: boolean
    username?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    password_hash?: boolean
    morada?: boolean
  }

  export type UtilizadorInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    AvaliacaoEvento?: boolean | Utilizador$AvaliacaoEventoArgs<ExtArgs>
    CandidaturaVoluntariado?: boolean | Utilizador$CandidaturaVoluntariadoArgs<ExtArgs>
    CompraRifa?: boolean | Utilizador$CompraRifaArgs<ExtArgs>
    Doacao?: boolean | Utilizador$DoacaoArgs<ExtArgs>
    MensagemSuporte?: boolean | Utilizador$MensagemSuporteArgs<ExtArgs>
    Notificacao?: boolean | Utilizador$NotificacaoArgs<ExtArgs>
    Pagamento?: boolean | Utilizador$PagamentoArgs<ExtArgs>
    _count?: boolean | UtilizadorCountOutputTypeArgs<ExtArgs>
  }


  type UtilizadorGetPayload<S extends boolean | null | undefined | UtilizadorArgs> = $Types.GetResult<UtilizadorPayload, S>

  type UtilizadorCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UtilizadorFindManyArgs, 'select' | 'include'> & {
      select?: UtilizadorCountAggregateInputType | true
    }

  export interface UtilizadorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Utilizador'], meta: { name: 'Utilizador' } }
    /**
     * Find zero or one Utilizador that matches the filter.
     * @param {UtilizadorFindUniqueArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UtilizadorFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UtilizadorFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Utilizador'> extends True ? Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Utilizador that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UtilizadorFindUniqueOrThrowArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UtilizadorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Utilizador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorFindFirstArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UtilizadorFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UtilizadorFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Utilizador'> extends True ? Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Utilizador that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorFindFirstOrThrowArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UtilizadorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Utilizadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Utilizadors
     * const utilizadors = await prisma.utilizador.findMany()
     * 
     * // Get first 10 Utilizadors
     * const utilizadors = await prisma.utilizador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const utilizadorWithIdOnly = await prisma.utilizador.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UtilizadorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Utilizador.
     * @param {UtilizadorCreateArgs} args - Arguments to create a Utilizador.
     * @example
     * // Create one Utilizador
     * const Utilizador = await prisma.utilizador.create({
     *   data: {
     *     // ... data to create a Utilizador
     *   }
     * })
     * 
    **/
    create<T extends UtilizadorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorCreateArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Utilizadors.
     *     @param {UtilizadorCreateManyArgs} args - Arguments to create many Utilizadors.
     *     @example
     *     // Create many Utilizadors
     *     const utilizador = await prisma.utilizador.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UtilizadorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Utilizador.
     * @param {UtilizadorDeleteArgs} args - Arguments to delete one Utilizador.
     * @example
     * // Delete one Utilizador
     * const Utilizador = await prisma.utilizador.delete({
     *   where: {
     *     // ... filter to delete one Utilizador
     *   }
     * })
     * 
    **/
    delete<T extends UtilizadorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorDeleteArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Utilizador.
     * @param {UtilizadorUpdateArgs} args - Arguments to update one Utilizador.
     * @example
     * // Update one Utilizador
     * const utilizador = await prisma.utilizador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UtilizadorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorUpdateArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Utilizadors.
     * @param {UtilizadorDeleteManyArgs} args - Arguments to filter Utilizadors to delete.
     * @example
     * // Delete a few Utilizadors
     * const { count } = await prisma.utilizador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UtilizadorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Utilizadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Utilizadors
     * const utilizador = await prisma.utilizador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UtilizadorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Utilizador.
     * @param {UtilizadorUpsertArgs} args - Arguments to update or create a Utilizador.
     * @example
     * // Update or create a Utilizador
     * const utilizador = await prisma.utilizador.upsert({
     *   create: {
     *     // ... data to create a Utilizador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Utilizador we want to update
     *   }
     * })
    **/
    upsert<T extends UtilizadorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorUpsertArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Types.GetResult<UtilizadorPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Utilizadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorCountArgs} args - Arguments to filter Utilizadors to count.
     * @example
     * // Count the number of Utilizadors
     * const count = await prisma.utilizador.count({
     *   where: {
     *     // ... the filter for the Utilizadors we want to count
     *   }
     * })
    **/
    count<T extends UtilizadorCountArgs>(
      args?: Subset<T, UtilizadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UtilizadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Utilizador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UtilizadorAggregateArgs>(args: Subset<T, UtilizadorAggregateArgs>): Prisma.PrismaPromise<GetUtilizadorAggregateType<T>>

    /**
     * Group by Utilizador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UtilizadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UtilizadorGroupByArgs['orderBy'] }
        : { orderBy?: UtilizadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UtilizadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUtilizadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Utilizador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UtilizadorClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    AvaliacaoEvento<T extends Utilizador$AvaliacaoEventoArgs<ExtArgs> = {}>(args?: Subset<T, Utilizador$AvaliacaoEventoArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AvaliacaoEventoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    CandidaturaVoluntariado<T extends Utilizador$CandidaturaVoluntariadoArgs<ExtArgs> = {}>(args?: Subset<T, Utilizador$CandidaturaVoluntariadoArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CandidaturaVoluntariadoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    CompraRifa<T extends Utilizador$CompraRifaArgs<ExtArgs> = {}>(args?: Subset<T, Utilizador$CompraRifaArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CompraRifaPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Doacao<T extends Utilizador$DoacaoArgs<ExtArgs> = {}>(args?: Subset<T, Utilizador$DoacaoArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<DoacaoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    MensagemSuporte<T extends Utilizador$MensagemSuporteArgs<ExtArgs> = {}>(args?: Subset<T, Utilizador$MensagemSuporteArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MensagemSuportePayload<ExtArgs>, T, 'findMany', never>| Null>;

    Notificacao<T extends Utilizador$NotificacaoArgs<ExtArgs> = {}>(args?: Subset<T, Utilizador$NotificacaoArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<NotificacaoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Pagamento<T extends Utilizador$PagamentoArgs<ExtArgs> = {}>(args?: Subset<T, Utilizador$PagamentoArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PagamentoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Utilizador base type for findUnique actions
   */
  export type UtilizadorFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where: UtilizadorWhereUniqueInput
  }

  /**
   * Utilizador findUnique
   */
  export interface UtilizadorFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UtilizadorFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Utilizador findUniqueOrThrow
   */
  export type UtilizadorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where: UtilizadorWhereUniqueInput
  }


  /**
   * Utilizador base type for findFirst actions
   */
  export type UtilizadorFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: Enumerable<UtilizadorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilizadors.
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilizadors.
     */
    distinct?: Enumerable<UtilizadorScalarFieldEnum>
  }

  /**
   * Utilizador findFirst
   */
  export interface UtilizadorFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UtilizadorFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Utilizador findFirstOrThrow
   */
  export type UtilizadorFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: Enumerable<UtilizadorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilizadors.
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilizadors.
     */
    distinct?: Enumerable<UtilizadorScalarFieldEnum>
  }


  /**
   * Utilizador findMany
   */
  export type UtilizadorFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizadors to fetch.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: Enumerable<UtilizadorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Utilizadors.
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    distinct?: Enumerable<UtilizadorScalarFieldEnum>
  }


  /**
   * Utilizador create
   */
  export type UtilizadorCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * The data needed to create a Utilizador.
     */
    data: XOR<UtilizadorCreateInput, UtilizadorUncheckedCreateInput>
  }


  /**
   * Utilizador createMany
   */
  export type UtilizadorCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Utilizadors.
     */
    data: Enumerable<UtilizadorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Utilizador update
   */
  export type UtilizadorUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * The data needed to update a Utilizador.
     */
    data: XOR<UtilizadorUpdateInput, UtilizadorUncheckedUpdateInput>
    /**
     * Choose, which Utilizador to update.
     */
    where: UtilizadorWhereUniqueInput
  }


  /**
   * Utilizador updateMany
   */
  export type UtilizadorUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Utilizadors.
     */
    data: XOR<UtilizadorUpdateManyMutationInput, UtilizadorUncheckedUpdateManyInput>
    /**
     * Filter which Utilizadors to update
     */
    where?: UtilizadorWhereInput
  }


  /**
   * Utilizador upsert
   */
  export type UtilizadorUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * The filter to search for the Utilizador to update in case it exists.
     */
    where: UtilizadorWhereUniqueInput
    /**
     * In case the Utilizador found by the `where` argument doesn't exist, create a new Utilizador with this data.
     */
    create: XOR<UtilizadorCreateInput, UtilizadorUncheckedCreateInput>
    /**
     * In case the Utilizador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UtilizadorUpdateInput, UtilizadorUncheckedUpdateInput>
  }


  /**
   * Utilizador delete
   */
  export type UtilizadorDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter which Utilizador to delete.
     */
    where: UtilizadorWhereUniqueInput
  }


  /**
   * Utilizador deleteMany
   */
  export type UtilizadorDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilizadors to delete
     */
    where?: UtilizadorWhereInput
  }


  /**
   * Utilizador.AvaliacaoEvento
   */
  export type Utilizador$AvaliacaoEventoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvaliacaoEvento
     */
    select?: AvaliacaoEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvaliacaoEventoInclude<ExtArgs> | null
    where?: AvaliacaoEventoWhereInput
    orderBy?: Enumerable<AvaliacaoEventoOrderByWithRelationInput>
    cursor?: AvaliacaoEventoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AvaliacaoEventoScalarFieldEnum>
  }


  /**
   * Utilizador.CandidaturaVoluntariado
   */
  export type Utilizador$CandidaturaVoluntariadoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidaturaVoluntariado
     */
    select?: CandidaturaVoluntariadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidaturaVoluntariadoInclude<ExtArgs> | null
    where?: CandidaturaVoluntariadoWhereInput
    orderBy?: Enumerable<CandidaturaVoluntariadoOrderByWithRelationInput>
    cursor?: CandidaturaVoluntariadoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CandidaturaVoluntariadoScalarFieldEnum>
  }


  /**
   * Utilizador.CompraRifa
   */
  export type Utilizador$CompraRifaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraRifa
     */
    select?: CompraRifaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraRifaInclude<ExtArgs> | null
    where?: CompraRifaWhereInput
    orderBy?: Enumerable<CompraRifaOrderByWithRelationInput>
    cursor?: CompraRifaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompraRifaScalarFieldEnum>
  }


  /**
   * Utilizador.Doacao
   */
  export type Utilizador$DoacaoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doacao
     */
    select?: DoacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoacaoInclude<ExtArgs> | null
    where?: DoacaoWhereInput
    orderBy?: Enumerable<DoacaoOrderByWithRelationInput>
    cursor?: DoacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DoacaoScalarFieldEnum>
  }


  /**
   * Utilizador.MensagemSuporte
   */
  export type Utilizador$MensagemSuporteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemSuporte
     */
    select?: MensagemSuporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MensagemSuporteInclude<ExtArgs> | null
    where?: MensagemSuporteWhereInput
    orderBy?: Enumerable<MensagemSuporteOrderByWithRelationInput>
    cursor?: MensagemSuporteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MensagemSuporteScalarFieldEnum>
  }


  /**
   * Utilizador.Notificacao
   */
  export type Utilizador$NotificacaoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificacaoInclude<ExtArgs> | null
    where?: NotificacaoWhereInput
    orderBy?: Enumerable<NotificacaoOrderByWithRelationInput>
    cursor?: NotificacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NotificacaoScalarFieldEnum>
  }


  /**
   * Utilizador.Pagamento
   */
  export type Utilizador$PagamentoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pagamento
     */
    select?: PagamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PagamentoInclude<ExtArgs> | null
    where?: PagamentoWhereInput
    orderBy?: Enumerable<PagamentoOrderByWithRelationInput>
    cursor?: PagamentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PagamentoScalarFieldEnum>
  }


  /**
   * Utilizador without action
   */
  export type UtilizadorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdministradorScalarFieldEnum: {
    id: 'id',
    username: 'username',
    nome: 'nome',
    email: 'email',
    password_hash: 'password_hash'
  };

  export type AdministradorScalarFieldEnum = (typeof AdministradorScalarFieldEnum)[keyof typeof AdministradorScalarFieldEnum]


  export const AnuncioScalarFieldEnum: {
    id: 'id',
    cargo: 'cargo',
    descricao: 'descricao',
    data_publicacao: 'data_publicacao',
    id_administrador: 'id_administrador',
    id_evento: 'id_evento'
  };

  export type AnuncioScalarFieldEnum = (typeof AnuncioScalarFieldEnum)[keyof typeof AnuncioScalarFieldEnum]


  export const AvaliacaoEventoScalarFieldEnum: {
    id: 'id',
    id_utilizador: 'id_utilizador',
    id_evento: 'id_evento',
    nota: 'nota',
    data_avaliacao: 'data_avaliacao'
  };

  export type AvaliacaoEventoScalarFieldEnum = (typeof AvaliacaoEventoScalarFieldEnum)[keyof typeof AvaliacaoEventoScalarFieldEnum]


  export const CandidaturaVoluntariadoScalarFieldEnum: {
    id: 'id',
    id_utilizador: 'id_utilizador',
    id_anuncio: 'id_anuncio',
    estado: 'estado'
  };

  export type CandidaturaVoluntariadoScalarFieldEnum = (typeof CandidaturaVoluntariadoScalarFieldEnum)[keyof typeof CandidaturaVoluntariadoScalarFieldEnum]


  export const CategoriaEventoScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type CategoriaEventoScalarFieldEnum = (typeof CategoriaEventoScalarFieldEnum)[keyof typeof CategoriaEventoScalarFieldEnum]


  export const CompraRifaScalarFieldEnum: {
    id: 'id',
    id_utilizador: 'id_utilizador',
    id_rifa: 'id_rifa',
    quantidade: 'quantidade',
    data_compra: 'data_compra',
    estado: 'estado'
  };

  export type CompraRifaScalarFieldEnum = (typeof CompraRifaScalarFieldEnum)[keyof typeof CompraRifaScalarFieldEnum]


  export const DoacaoScalarFieldEnum: {
    id: 'id',
    id_utilizador: 'id_utilizador',
    valor: 'valor',
    data_doacao: 'data_doacao',
    metodo_pagamento: 'metodo_pagamento'
  };

  export type DoacaoScalarFieldEnum = (typeof DoacaoScalarFieldEnum)[keyof typeof DoacaoScalarFieldEnum]


  export const EventoScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    localizacao: 'localizacao',
    descricao: 'descricao',
    data_evento: 'data_evento',
    fotografia: 'fotografia',
    estado: 'estado',
    id_administrador: 'id_administrador',
    id_categoria: 'id_categoria'
  };

  export type EventoScalarFieldEnum = (typeof EventoScalarFieldEnum)[keyof typeof EventoScalarFieldEnum]


  export const MensagemSuporteScalarFieldEnum: {
    id: 'id',
    id_utilizador: 'id_utilizador',
    id_administrador: 'id_administrador',
    mensagem: 'mensagem',
    data_abertura: 'data_abertura',
    data_encerramento: 'data_encerramento',
    estado: 'estado'
  };

  export type MensagemSuporteScalarFieldEnum = (typeof MensagemSuporteScalarFieldEnum)[keyof typeof MensagemSuporteScalarFieldEnum]


  export const NotificacaoScalarFieldEnum: {
    id: 'id',
    id_utilizador: 'id_utilizador',
    id_administrador: 'id_administrador',
    mensagem: 'mensagem',
    data_envio: 'data_envio',
    estado: 'estado'
  };

  export type NotificacaoScalarFieldEnum = (typeof NotificacaoScalarFieldEnum)[keyof typeof NotificacaoScalarFieldEnum]


  export const PagamentoScalarFieldEnum: {
    id: 'id',
    id_utilizador: 'id_utilizador',
    valor: 'valor',
    metodo_pagamento: 'metodo_pagamento',
    estado: 'estado',
    data_pagamento: 'data_pagamento'
  };

  export type PagamentoScalarFieldEnum = (typeof PagamentoScalarFieldEnum)[keyof typeof PagamentoScalarFieldEnum]


  export const RifaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    preco: 'preco',
    quantidade: 'quantidade',
    descricao: 'descricao',
    premio: 'premio',
    data_sorteio: 'data_sorteio',
    id_administrador: 'id_administrador',
    id_evento: 'id_evento'
  };

  export type RifaScalarFieldEnum = (typeof RifaScalarFieldEnum)[keyof typeof RifaScalarFieldEnum]


  export const SuporteScalarFieldEnum: {
    id: 'id',
    artigo: 'artigo',
    descricao: 'descricao'
  };

  export type SuporteScalarFieldEnum = (typeof SuporteScalarFieldEnum)[keyof typeof SuporteScalarFieldEnum]


  export const UtilizadorScalarFieldEnum: {
    id: 'id',
    username: 'username',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    password_hash: 'password_hash',
    morada: 'morada'
  };

  export type UtilizadorScalarFieldEnum = (typeof UtilizadorScalarFieldEnum)[keyof typeof UtilizadorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type AdministradorWhereInput = {
    AND?: Enumerable<AdministradorWhereInput>
    OR?: Enumerable<AdministradorWhereInput>
    NOT?: Enumerable<AdministradorWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    nome?: StringFilter | string
    email?: StringFilter | string
    password_hash?: StringFilter | string
    Anuncio?: AnuncioListRelationFilter
    Evento?: EventoListRelationFilter
    MensagemSuporte?: MensagemSuporteListRelationFilter
    Notificacao?: NotificacaoListRelationFilter
    Rifa?: RifaListRelationFilter
  }

  export type AdministradorOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    Anuncio?: AnuncioOrderByRelationAggregateInput
    Evento?: EventoOrderByRelationAggregateInput
    MensagemSuporte?: MensagemSuporteOrderByRelationAggregateInput
    Notificacao?: NotificacaoOrderByRelationAggregateInput
    Rifa?: RifaOrderByRelationAggregateInput
  }

  export type AdministradorWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type AdministradorOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    _count?: AdministradorCountOrderByAggregateInput
    _avg?: AdministradorAvgOrderByAggregateInput
    _max?: AdministradorMaxOrderByAggregateInput
    _min?: AdministradorMinOrderByAggregateInput
    _sum?: AdministradorSumOrderByAggregateInput
  }

  export type AdministradorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AdministradorScalarWhereWithAggregatesInput>
    OR?: Enumerable<AdministradorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AdministradorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password_hash?: StringWithAggregatesFilter | string
  }

  export type AnuncioWhereInput = {
    AND?: Enumerable<AnuncioWhereInput>
    OR?: Enumerable<AnuncioWhereInput>
    NOT?: Enumerable<AnuncioWhereInput>
    id?: IntFilter | number
    cargo?: StringFilter | string
    descricao?: StringFilter | string
    data_publicacao?: DateTimeNullableFilter | Date | string | null
    id_administrador?: IntFilter | number
    id_evento?: IntFilter | number
    Administrador?: XOR<AdministradorRelationFilter, AdministradorWhereInput>
    Evento?: XOR<EventoRelationFilter, EventoWhereInput>
    CandidaturaVoluntariado?: CandidaturaVoluntariadoListRelationFilter
  }

  export type AnuncioOrderByWithRelationInput = {
    id?: SortOrder
    cargo?: SortOrder
    descricao?: SortOrder
    data_publicacao?: SortOrderInput | SortOrder
    id_administrador?: SortOrder
    id_evento?: SortOrder
    Administrador?: AdministradorOrderByWithRelationInput
    Evento?: EventoOrderByWithRelationInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoOrderByRelationAggregateInput
  }

  export type AnuncioWhereUniqueInput = {
    id?: number
  }

  export type AnuncioOrderByWithAggregationInput = {
    id?: SortOrder
    cargo?: SortOrder
    descricao?: SortOrder
    data_publicacao?: SortOrderInput | SortOrder
    id_administrador?: SortOrder
    id_evento?: SortOrder
    _count?: AnuncioCountOrderByAggregateInput
    _avg?: AnuncioAvgOrderByAggregateInput
    _max?: AnuncioMaxOrderByAggregateInput
    _min?: AnuncioMinOrderByAggregateInput
    _sum?: AnuncioSumOrderByAggregateInput
  }

  export type AnuncioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AnuncioScalarWhereWithAggregatesInput>
    OR?: Enumerable<AnuncioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AnuncioScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    cargo?: StringWithAggregatesFilter | string
    descricao?: StringWithAggregatesFilter | string
    data_publicacao?: DateTimeNullableWithAggregatesFilter | Date | string | null
    id_administrador?: IntWithAggregatesFilter | number
    id_evento?: IntWithAggregatesFilter | number
  }

  export type AvaliacaoEventoWhereInput = {
    AND?: Enumerable<AvaliacaoEventoWhereInput>
    OR?: Enumerable<AvaliacaoEventoWhereInput>
    NOT?: Enumerable<AvaliacaoEventoWhereInput>
    id?: IntFilter | number
    id_utilizador?: IntFilter | number
    id_evento?: IntFilter | number
    nota?: IntNullableFilter | number | null
    data_avaliacao?: DateTimeNullableFilter | Date | string | null
    Utilizador?: XOR<UtilizadorRelationFilter, UtilizadorWhereInput>
    Evento?: XOR<EventoRelationFilter, EventoWhereInput>
  }

  export type AvaliacaoEventoOrderByWithRelationInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_evento?: SortOrder
    nota?: SortOrderInput | SortOrder
    data_avaliacao?: SortOrderInput | SortOrder
    Utilizador?: UtilizadorOrderByWithRelationInput
    Evento?: EventoOrderByWithRelationInput
  }

  export type AvaliacaoEventoWhereUniqueInput = {
    id?: number
  }

  export type AvaliacaoEventoOrderByWithAggregationInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_evento?: SortOrder
    nota?: SortOrderInput | SortOrder
    data_avaliacao?: SortOrderInput | SortOrder
    _count?: AvaliacaoEventoCountOrderByAggregateInput
    _avg?: AvaliacaoEventoAvgOrderByAggregateInput
    _max?: AvaliacaoEventoMaxOrderByAggregateInput
    _min?: AvaliacaoEventoMinOrderByAggregateInput
    _sum?: AvaliacaoEventoSumOrderByAggregateInput
  }

  export type AvaliacaoEventoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AvaliacaoEventoScalarWhereWithAggregatesInput>
    OR?: Enumerable<AvaliacaoEventoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AvaliacaoEventoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_utilizador?: IntWithAggregatesFilter | number
    id_evento?: IntWithAggregatesFilter | number
    nota?: IntNullableWithAggregatesFilter | number | null
    data_avaliacao?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type CandidaturaVoluntariadoWhereInput = {
    AND?: Enumerable<CandidaturaVoluntariadoWhereInput>
    OR?: Enumerable<CandidaturaVoluntariadoWhereInput>
    NOT?: Enumerable<CandidaturaVoluntariadoWhereInput>
    id?: IntFilter | number
    id_utilizador?: IntFilter | number
    id_anuncio?: IntFilter | number
    estado?: EnumCandidaturaVoluntariado_estadoNullableFilter | CandidaturaVoluntariado_estado | null
    Utilizador?: XOR<UtilizadorRelationFilter, UtilizadorWhereInput>
    Anuncio?: XOR<AnuncioRelationFilter, AnuncioWhereInput>
  }

  export type CandidaturaVoluntariadoOrderByWithRelationInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_anuncio?: SortOrder
    estado?: SortOrderInput | SortOrder
    Utilizador?: UtilizadorOrderByWithRelationInput
    Anuncio?: AnuncioOrderByWithRelationInput
  }

  export type CandidaturaVoluntariadoWhereUniqueInput = {
    id?: number
  }

  export type CandidaturaVoluntariadoOrderByWithAggregationInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_anuncio?: SortOrder
    estado?: SortOrderInput | SortOrder
    _count?: CandidaturaVoluntariadoCountOrderByAggregateInput
    _avg?: CandidaturaVoluntariadoAvgOrderByAggregateInput
    _max?: CandidaturaVoluntariadoMaxOrderByAggregateInput
    _min?: CandidaturaVoluntariadoMinOrderByAggregateInput
    _sum?: CandidaturaVoluntariadoSumOrderByAggregateInput
  }

  export type CandidaturaVoluntariadoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CandidaturaVoluntariadoScalarWhereWithAggregatesInput>
    OR?: Enumerable<CandidaturaVoluntariadoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CandidaturaVoluntariadoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_utilizador?: IntWithAggregatesFilter | number
    id_anuncio?: IntWithAggregatesFilter | number
    estado?: EnumCandidaturaVoluntariado_estadoNullableWithAggregatesFilter | CandidaturaVoluntariado_estado | null
  }

  export type CategoriaEventoWhereInput = {
    AND?: Enumerable<CategoriaEventoWhereInput>
    OR?: Enumerable<CategoriaEventoWhereInput>
    NOT?: Enumerable<CategoriaEventoWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    Evento?: EventoListRelationFilter
  }

  export type CategoriaEventoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    Evento?: EventoOrderByRelationAggregateInput
  }

  export type CategoriaEventoWhereUniqueInput = {
    id?: number
    nome?: string
  }

  export type CategoriaEventoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: CategoriaEventoCountOrderByAggregateInput
    _avg?: CategoriaEventoAvgOrderByAggregateInput
    _max?: CategoriaEventoMaxOrderByAggregateInput
    _min?: CategoriaEventoMinOrderByAggregateInput
    _sum?: CategoriaEventoSumOrderByAggregateInput
  }

  export type CategoriaEventoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoriaEventoScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoriaEventoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoriaEventoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
  }

  export type CompraRifaWhereInput = {
    AND?: Enumerable<CompraRifaWhereInput>
    OR?: Enumerable<CompraRifaWhereInput>
    NOT?: Enumerable<CompraRifaWhereInput>
    id?: IntFilter | number
    id_utilizador?: IntFilter | number
    id_rifa?: IntFilter | number
    quantidade?: IntFilter | number
    data_compra?: DateTimeNullableFilter | Date | string | null
    estado?: EnumCompraRifa_estadoNullableFilter | CompraRifa_estado | null
    Utilizador?: XOR<UtilizadorRelationFilter, UtilizadorWhereInput>
    Rifa?: XOR<RifaRelationFilter, RifaWhereInput>
  }

  export type CompraRifaOrderByWithRelationInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_rifa?: SortOrder
    quantidade?: SortOrder
    data_compra?: SortOrderInput | SortOrder
    estado?: SortOrderInput | SortOrder
    Utilizador?: UtilizadorOrderByWithRelationInput
    Rifa?: RifaOrderByWithRelationInput
  }

  export type CompraRifaWhereUniqueInput = {
    id?: number
  }

  export type CompraRifaOrderByWithAggregationInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_rifa?: SortOrder
    quantidade?: SortOrder
    data_compra?: SortOrderInput | SortOrder
    estado?: SortOrderInput | SortOrder
    _count?: CompraRifaCountOrderByAggregateInput
    _avg?: CompraRifaAvgOrderByAggregateInput
    _max?: CompraRifaMaxOrderByAggregateInput
    _min?: CompraRifaMinOrderByAggregateInput
    _sum?: CompraRifaSumOrderByAggregateInput
  }

  export type CompraRifaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompraRifaScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompraRifaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompraRifaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_utilizador?: IntWithAggregatesFilter | number
    id_rifa?: IntWithAggregatesFilter | number
    quantidade?: IntWithAggregatesFilter | number
    data_compra?: DateTimeNullableWithAggregatesFilter | Date | string | null
    estado?: EnumCompraRifa_estadoNullableWithAggregatesFilter | CompraRifa_estado | null
  }

  export type DoacaoWhereInput = {
    AND?: Enumerable<DoacaoWhereInput>
    OR?: Enumerable<DoacaoWhereInput>
    NOT?: Enumerable<DoacaoWhereInput>
    id?: IntFilter | number
    id_utilizador?: IntFilter | number
    valor?: DecimalFilter | Decimal | DecimalJsLike | number | string
    data_doacao?: DateTimeNullableFilter | Date | string | null
    metodo_pagamento?: EnumDoacao_metodo_pagamentoFilter | Doacao_metodo_pagamento
    Utilizador?: XOR<UtilizadorRelationFilter, UtilizadorWhereInput>
  }

  export type DoacaoOrderByWithRelationInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    valor?: SortOrder
    data_doacao?: SortOrderInput | SortOrder
    metodo_pagamento?: SortOrder
    Utilizador?: UtilizadorOrderByWithRelationInput
  }

  export type DoacaoWhereUniqueInput = {
    id?: number
  }

  export type DoacaoOrderByWithAggregationInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    valor?: SortOrder
    data_doacao?: SortOrderInput | SortOrder
    metodo_pagamento?: SortOrder
    _count?: DoacaoCountOrderByAggregateInput
    _avg?: DoacaoAvgOrderByAggregateInput
    _max?: DoacaoMaxOrderByAggregateInput
    _min?: DoacaoMinOrderByAggregateInput
    _sum?: DoacaoSumOrderByAggregateInput
  }

  export type DoacaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DoacaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<DoacaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DoacaoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_utilizador?: IntWithAggregatesFilter | number
    valor?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    data_doacao?: DateTimeNullableWithAggregatesFilter | Date | string | null
    metodo_pagamento?: EnumDoacao_metodo_pagamentoWithAggregatesFilter | Doacao_metodo_pagamento
  }

  export type EventoWhereInput = {
    AND?: Enumerable<EventoWhereInput>
    OR?: Enumerable<EventoWhereInput>
    NOT?: Enumerable<EventoWhereInput>
    id?: IntFilter | number
    titulo?: StringFilter | string
    localizacao?: StringFilter | string
    descricao?: StringNullableFilter | string | null
    data_evento?: DateTimeFilter | Date | string
    fotografia?: StringFilter | string
    estado?: EnumEvento_estadoNullableFilter | Evento_estado | null
    id_administrador?: IntFilter | number
    id_categoria?: IntFilter | number
    Anuncio?: AnuncioListRelationFilter
    AvaliacaoEvento?: AvaliacaoEventoListRelationFilter
    Administrador?: XOR<AdministradorRelationFilter, AdministradorWhereInput>
    CategoriaEvento?: XOR<CategoriaEventoRelationFilter, CategoriaEventoWhereInput>
    Rifa?: RifaListRelationFilter
  }

  export type EventoOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    localizacao?: SortOrder
    descricao?: SortOrderInput | SortOrder
    data_evento?: SortOrder
    fotografia?: SortOrder
    estado?: SortOrderInput | SortOrder
    id_administrador?: SortOrder
    id_categoria?: SortOrder
    Anuncio?: AnuncioOrderByRelationAggregateInput
    AvaliacaoEvento?: AvaliacaoEventoOrderByRelationAggregateInput
    Administrador?: AdministradorOrderByWithRelationInput
    CategoriaEvento?: CategoriaEventoOrderByWithRelationInput
    Rifa?: RifaOrderByRelationAggregateInput
  }

  export type EventoWhereUniqueInput = {
    id?: number
  }

  export type EventoOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    localizacao?: SortOrder
    descricao?: SortOrderInput | SortOrder
    data_evento?: SortOrder
    fotografia?: SortOrder
    estado?: SortOrderInput | SortOrder
    id_administrador?: SortOrder
    id_categoria?: SortOrder
    _count?: EventoCountOrderByAggregateInput
    _avg?: EventoAvgOrderByAggregateInput
    _max?: EventoMaxOrderByAggregateInput
    _min?: EventoMinOrderByAggregateInput
    _sum?: EventoSumOrderByAggregateInput
  }

  export type EventoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EventoScalarWhereWithAggregatesInput>
    OR?: Enumerable<EventoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EventoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    titulo?: StringWithAggregatesFilter | string
    localizacao?: StringWithAggregatesFilter | string
    descricao?: StringNullableWithAggregatesFilter | string | null
    data_evento?: DateTimeWithAggregatesFilter | Date | string
    fotografia?: StringWithAggregatesFilter | string
    estado?: EnumEvento_estadoNullableWithAggregatesFilter | Evento_estado | null
    id_administrador?: IntWithAggregatesFilter | number
    id_categoria?: IntWithAggregatesFilter | number
  }

  export type MensagemSuporteWhereInput = {
    AND?: Enumerable<MensagemSuporteWhereInput>
    OR?: Enumerable<MensagemSuporteWhereInput>
    NOT?: Enumerable<MensagemSuporteWhereInput>
    id?: IntFilter | number
    id_utilizador?: IntFilter | number
    id_administrador?: IntFilter | number
    mensagem?: StringFilter | string
    data_abertura?: DateTimeNullableFilter | Date | string | null
    data_encerramento?: DateTimeNullableFilter | Date | string | null
    estado?: EnumMensagemSuporte_estadoNullableFilter | MensagemSuporte_estado | null
    Utilizador?: XOR<UtilizadorRelationFilter, UtilizadorWhereInput>
    Administrador?: XOR<AdministradorRelationFilter, AdministradorWhereInput>
  }

  export type MensagemSuporteOrderByWithRelationInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_administrador?: SortOrder
    mensagem?: SortOrder
    data_abertura?: SortOrderInput | SortOrder
    data_encerramento?: SortOrderInput | SortOrder
    estado?: SortOrderInput | SortOrder
    Utilizador?: UtilizadorOrderByWithRelationInput
    Administrador?: AdministradorOrderByWithRelationInput
  }

  export type MensagemSuporteWhereUniqueInput = {
    id?: number
  }

  export type MensagemSuporteOrderByWithAggregationInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_administrador?: SortOrder
    mensagem?: SortOrder
    data_abertura?: SortOrderInput | SortOrder
    data_encerramento?: SortOrderInput | SortOrder
    estado?: SortOrderInput | SortOrder
    _count?: MensagemSuporteCountOrderByAggregateInput
    _avg?: MensagemSuporteAvgOrderByAggregateInput
    _max?: MensagemSuporteMaxOrderByAggregateInput
    _min?: MensagemSuporteMinOrderByAggregateInput
    _sum?: MensagemSuporteSumOrderByAggregateInput
  }

  export type MensagemSuporteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MensagemSuporteScalarWhereWithAggregatesInput>
    OR?: Enumerable<MensagemSuporteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MensagemSuporteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_utilizador?: IntWithAggregatesFilter | number
    id_administrador?: IntWithAggregatesFilter | number
    mensagem?: StringWithAggregatesFilter | string
    data_abertura?: DateTimeNullableWithAggregatesFilter | Date | string | null
    data_encerramento?: DateTimeNullableWithAggregatesFilter | Date | string | null
    estado?: EnumMensagemSuporte_estadoNullableWithAggregatesFilter | MensagemSuporte_estado | null
  }

  export type NotificacaoWhereInput = {
    AND?: Enumerable<NotificacaoWhereInput>
    OR?: Enumerable<NotificacaoWhereInput>
    NOT?: Enumerable<NotificacaoWhereInput>
    id?: IntFilter | number
    id_utilizador?: IntFilter | number
    id_administrador?: IntFilter | number
    mensagem?: StringFilter | string
    data_envio?: DateTimeNullableFilter | Date | string | null
    estado?: EnumNotificacao_estadoNullableFilter | Notificacao_estado | null
    Utilizador?: XOR<UtilizadorRelationFilter, UtilizadorWhereInput>
    Administrador?: XOR<AdministradorRelationFilter, AdministradorWhereInput>
  }

  export type NotificacaoOrderByWithRelationInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_administrador?: SortOrder
    mensagem?: SortOrder
    data_envio?: SortOrderInput | SortOrder
    estado?: SortOrderInput | SortOrder
    Utilizador?: UtilizadorOrderByWithRelationInput
    Administrador?: AdministradorOrderByWithRelationInput
  }

  export type NotificacaoWhereUniqueInput = {
    id?: number
  }

  export type NotificacaoOrderByWithAggregationInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_administrador?: SortOrder
    mensagem?: SortOrder
    data_envio?: SortOrderInput | SortOrder
    estado?: SortOrderInput | SortOrder
    _count?: NotificacaoCountOrderByAggregateInput
    _avg?: NotificacaoAvgOrderByAggregateInput
    _max?: NotificacaoMaxOrderByAggregateInput
    _min?: NotificacaoMinOrderByAggregateInput
    _sum?: NotificacaoSumOrderByAggregateInput
  }

  export type NotificacaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NotificacaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<NotificacaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NotificacaoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_utilizador?: IntWithAggregatesFilter | number
    id_administrador?: IntWithAggregatesFilter | number
    mensagem?: StringWithAggregatesFilter | string
    data_envio?: DateTimeNullableWithAggregatesFilter | Date | string | null
    estado?: EnumNotificacao_estadoNullableWithAggregatesFilter | Notificacao_estado | null
  }

  export type PagamentoWhereInput = {
    AND?: Enumerable<PagamentoWhereInput>
    OR?: Enumerable<PagamentoWhereInput>
    NOT?: Enumerable<PagamentoWhereInput>
    id?: IntFilter | number
    id_utilizador?: IntFilter | number
    valor?: DecimalFilter | Decimal | DecimalJsLike | number | string
    metodo_pagamento?: EnumPagamento_metodo_pagamentoFilter | Pagamento_metodo_pagamento
    estado?: EnumPagamento_estadoNullableFilter | Pagamento_estado | null
    data_pagamento?: DateTimeNullableFilter | Date | string | null
    Utilizador?: XOR<UtilizadorRelationFilter, UtilizadorWhereInput>
  }

  export type PagamentoOrderByWithRelationInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    valor?: SortOrder
    metodo_pagamento?: SortOrder
    estado?: SortOrderInput | SortOrder
    data_pagamento?: SortOrderInput | SortOrder
    Utilizador?: UtilizadorOrderByWithRelationInput
  }

  export type PagamentoWhereUniqueInput = {
    id?: number
  }

  export type PagamentoOrderByWithAggregationInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    valor?: SortOrder
    metodo_pagamento?: SortOrder
    estado?: SortOrderInput | SortOrder
    data_pagamento?: SortOrderInput | SortOrder
    _count?: PagamentoCountOrderByAggregateInput
    _avg?: PagamentoAvgOrderByAggregateInput
    _max?: PagamentoMaxOrderByAggregateInput
    _min?: PagamentoMinOrderByAggregateInput
    _sum?: PagamentoSumOrderByAggregateInput
  }

  export type PagamentoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PagamentoScalarWhereWithAggregatesInput>
    OR?: Enumerable<PagamentoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PagamentoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_utilizador?: IntWithAggregatesFilter | number
    valor?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    metodo_pagamento?: EnumPagamento_metodo_pagamentoWithAggregatesFilter | Pagamento_metodo_pagamento
    estado?: EnumPagamento_estadoNullableWithAggregatesFilter | Pagamento_estado | null
    data_pagamento?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type RifaWhereInput = {
    AND?: Enumerable<RifaWhereInput>
    OR?: Enumerable<RifaWhereInput>
    NOT?: Enumerable<RifaWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    preco?: DecimalFilter | Decimal | DecimalJsLike | number | string
    quantidade?: IntFilter | number
    descricao?: StringFilter | string
    premio?: StringFilter | string
    data_sorteio?: DateTimeFilter | Date | string
    id_administrador?: IntFilter | number
    id_evento?: IntFilter | number
    CompraRifa?: CompraRifaListRelationFilter
    Administrador?: XOR<AdministradorRelationFilter, AdministradorWhereInput>
    Evento?: XOR<EventoRelationFilter, EventoWhereInput>
  }

  export type RifaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    descricao?: SortOrder
    premio?: SortOrder
    data_sorteio?: SortOrder
    id_administrador?: SortOrder
    id_evento?: SortOrder
    CompraRifa?: CompraRifaOrderByRelationAggregateInput
    Administrador?: AdministradorOrderByWithRelationInput
    Evento?: EventoOrderByWithRelationInput
  }

  export type RifaWhereUniqueInput = {
    id?: number
  }

  export type RifaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    descricao?: SortOrder
    premio?: SortOrder
    data_sorteio?: SortOrder
    id_administrador?: SortOrder
    id_evento?: SortOrder
    _count?: RifaCountOrderByAggregateInput
    _avg?: RifaAvgOrderByAggregateInput
    _max?: RifaMaxOrderByAggregateInput
    _min?: RifaMinOrderByAggregateInput
    _sum?: RifaSumOrderByAggregateInput
  }

  export type RifaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RifaScalarWhereWithAggregatesInput>
    OR?: Enumerable<RifaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RifaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    preco?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    quantidade?: IntWithAggregatesFilter | number
    descricao?: StringWithAggregatesFilter | string
    premio?: StringWithAggregatesFilter | string
    data_sorteio?: DateTimeWithAggregatesFilter | Date | string
    id_administrador?: IntWithAggregatesFilter | number
    id_evento?: IntWithAggregatesFilter | number
  }

  export type SuporteWhereInput = {
    AND?: Enumerable<SuporteWhereInput>
    OR?: Enumerable<SuporteWhereInput>
    NOT?: Enumerable<SuporteWhereInput>
    id?: IntFilter | number
    artigo?: StringFilter | string
    descricao?: StringFilter | string
  }

  export type SuporteOrderByWithRelationInput = {
    id?: SortOrder
    artigo?: SortOrder
    descricao?: SortOrder
  }

  export type SuporteWhereUniqueInput = {
    id?: number
  }

  export type SuporteOrderByWithAggregationInput = {
    id?: SortOrder
    artigo?: SortOrder
    descricao?: SortOrder
    _count?: SuporteCountOrderByAggregateInput
    _avg?: SuporteAvgOrderByAggregateInput
    _max?: SuporteMaxOrderByAggregateInput
    _min?: SuporteMinOrderByAggregateInput
    _sum?: SuporteSumOrderByAggregateInput
  }

  export type SuporteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SuporteScalarWhereWithAggregatesInput>
    OR?: Enumerable<SuporteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SuporteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    artigo?: StringWithAggregatesFilter | string
    descricao?: StringWithAggregatesFilter | string
  }

  export type UtilizadorWhereInput = {
    AND?: Enumerable<UtilizadorWhereInput>
    OR?: Enumerable<UtilizadorWhereInput>
    NOT?: Enumerable<UtilizadorWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    nome?: StringFilter | string
    email?: StringFilter | string
    telefone?: StringFilter | string
    password_hash?: StringFilter | string
    morada?: StringNullableFilter | string | null
    AvaliacaoEvento?: AvaliacaoEventoListRelationFilter
    CandidaturaVoluntariado?: CandidaturaVoluntariadoListRelationFilter
    CompraRifa?: CompraRifaListRelationFilter
    Doacao?: DoacaoListRelationFilter
    MensagemSuporte?: MensagemSuporteListRelationFilter
    Notificacao?: NotificacaoListRelationFilter
    Pagamento?: PagamentoListRelationFilter
  }

  export type UtilizadorOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    password_hash?: SortOrder
    morada?: SortOrderInput | SortOrder
    AvaliacaoEvento?: AvaliacaoEventoOrderByRelationAggregateInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoOrderByRelationAggregateInput
    CompraRifa?: CompraRifaOrderByRelationAggregateInput
    Doacao?: DoacaoOrderByRelationAggregateInput
    MensagemSuporte?: MensagemSuporteOrderByRelationAggregateInput
    Notificacao?: NotificacaoOrderByRelationAggregateInput
    Pagamento?: PagamentoOrderByRelationAggregateInput
  }

  export type UtilizadorWhereUniqueInput = {
    id?: number
    email?: string
    telefone?: string
  }

  export type UtilizadorOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    password_hash?: SortOrder
    morada?: SortOrderInput | SortOrder
    _count?: UtilizadorCountOrderByAggregateInput
    _avg?: UtilizadorAvgOrderByAggregateInput
    _max?: UtilizadorMaxOrderByAggregateInput
    _min?: UtilizadorMinOrderByAggregateInput
    _sum?: UtilizadorSumOrderByAggregateInput
  }

  export type UtilizadorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UtilizadorScalarWhereWithAggregatesInput>
    OR?: Enumerable<UtilizadorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UtilizadorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    telefone?: StringWithAggregatesFilter | string
    password_hash?: StringWithAggregatesFilter | string
    morada?: StringNullableWithAggregatesFilter | string | null
  }

  export type AdministradorCreateInput = {
    username: string
    nome: string
    email: string
    password_hash: string
    Anuncio?: AnuncioCreateNestedManyWithoutAdministradorInput
    Evento?: EventoCreateNestedManyWithoutAdministradorInput
    MensagemSuporte?: MensagemSuporteCreateNestedManyWithoutAdministradorInput
    Notificacao?: NotificacaoCreateNestedManyWithoutAdministradorInput
    Rifa?: RifaCreateNestedManyWithoutAdministradorInput
  }

  export type AdministradorUncheckedCreateInput = {
    id?: number
    username: string
    nome: string
    email: string
    password_hash: string
    Anuncio?: AnuncioUncheckedCreateNestedManyWithoutAdministradorInput
    Evento?: EventoUncheckedCreateNestedManyWithoutAdministradorInput
    MensagemSuporte?: MensagemSuporteUncheckedCreateNestedManyWithoutAdministradorInput
    Notificacao?: NotificacaoUncheckedCreateNestedManyWithoutAdministradorInput
    Rifa?: RifaUncheckedCreateNestedManyWithoutAdministradorInput
  }

  export type AdministradorUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    Anuncio?: AnuncioUpdateManyWithoutAdministradorNestedInput
    Evento?: EventoUpdateManyWithoutAdministradorNestedInput
    MensagemSuporte?: MensagemSuporteUpdateManyWithoutAdministradorNestedInput
    Notificacao?: NotificacaoUpdateManyWithoutAdministradorNestedInput
    Rifa?: RifaUpdateManyWithoutAdministradorNestedInput
  }

  export type AdministradorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    Anuncio?: AnuncioUncheckedUpdateManyWithoutAdministradorNestedInput
    Evento?: EventoUncheckedUpdateManyWithoutAdministradorNestedInput
    MensagemSuporte?: MensagemSuporteUncheckedUpdateManyWithoutAdministradorNestedInput
    Notificacao?: NotificacaoUncheckedUpdateManyWithoutAdministradorNestedInput
    Rifa?: RifaUncheckedUpdateManyWithoutAdministradorNestedInput
  }

  export type AdministradorCreateManyInput = {
    id?: number
    username: string
    nome: string
    email: string
    password_hash: string
  }

  export type AdministradorUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
  }

  export type AdministradorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
  }

  export type AnuncioCreateInput = {
    cargo: string
    descricao: string
    data_publicacao?: Date | string | null
    Administrador: AdministradorCreateNestedOneWithoutAnuncioInput
    Evento: EventoCreateNestedOneWithoutAnuncioInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoCreateNestedManyWithoutAnuncioInput
  }

  export type AnuncioUncheckedCreateInput = {
    id?: number
    cargo: string
    descricao: string
    data_publicacao?: Date | string | null
    id_administrador: number
    id_evento: number
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedCreateNestedManyWithoutAnuncioInput
  }

  export type AnuncioUpdateInput = {
    cargo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data_publicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Administrador?: AdministradorUpdateOneRequiredWithoutAnuncioNestedInput
    Evento?: EventoUpdateOneRequiredWithoutAnuncioNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUpdateManyWithoutAnuncioNestedInput
  }

  export type AnuncioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cargo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data_publicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_administrador?: IntFieldUpdateOperationsInput | number
    id_evento?: IntFieldUpdateOperationsInput | number
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedUpdateManyWithoutAnuncioNestedInput
  }

  export type AnuncioCreateManyInput = {
    id?: number
    cargo: string
    descricao: string
    data_publicacao?: Date | string | null
    id_administrador: number
    id_evento: number
  }

  export type AnuncioUpdateManyMutationInput = {
    cargo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data_publicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AnuncioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cargo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data_publicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_administrador?: IntFieldUpdateOperationsInput | number
    id_evento?: IntFieldUpdateOperationsInput | number
  }

  export type AvaliacaoEventoCreateInput = {
    nota?: number | null
    data_avaliacao?: Date | string | null
    Utilizador: UtilizadorCreateNestedOneWithoutAvaliacaoEventoInput
    Evento: EventoCreateNestedOneWithoutAvaliacaoEventoInput
  }

  export type AvaliacaoEventoUncheckedCreateInput = {
    id?: number
    id_utilizador: number
    id_evento: number
    nota?: number | null
    data_avaliacao?: Date | string | null
  }

  export type AvaliacaoEventoUpdateInput = {
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Utilizador?: UtilizadorUpdateOneRequiredWithoutAvaliacaoEventoNestedInput
    Evento?: EventoUpdateOneRequiredWithoutAvaliacaoEventoNestedInput
  }

  export type AvaliacaoEventoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    id_evento?: IntFieldUpdateOperationsInput | number
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AvaliacaoEventoCreateManyInput = {
    id?: number
    id_utilizador: number
    id_evento: number
    nota?: number | null
    data_avaliacao?: Date | string | null
  }

  export type AvaliacaoEventoUpdateManyMutationInput = {
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AvaliacaoEventoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    id_evento?: IntFieldUpdateOperationsInput | number
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CandidaturaVoluntariadoCreateInput = {
    estado?: CandidaturaVoluntariado_estado | null
    Utilizador: UtilizadorCreateNestedOneWithoutCandidaturaVoluntariadoInput
    Anuncio: AnuncioCreateNestedOneWithoutCandidaturaVoluntariadoInput
  }

  export type CandidaturaVoluntariadoUncheckedCreateInput = {
    id?: number
    id_utilizador: number
    id_anuncio: number
    estado?: CandidaturaVoluntariado_estado | null
  }

  export type CandidaturaVoluntariadoUpdateInput = {
    estado?: NullableEnumCandidaturaVoluntariado_estadoFieldUpdateOperationsInput | CandidaturaVoluntariado_estado | null
    Utilizador?: UtilizadorUpdateOneRequiredWithoutCandidaturaVoluntariadoNestedInput
    Anuncio?: AnuncioUpdateOneRequiredWithoutCandidaturaVoluntariadoNestedInput
  }

  export type CandidaturaVoluntariadoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    id_anuncio?: IntFieldUpdateOperationsInput | number
    estado?: NullableEnumCandidaturaVoluntariado_estadoFieldUpdateOperationsInput | CandidaturaVoluntariado_estado | null
  }

  export type CandidaturaVoluntariadoCreateManyInput = {
    id?: number
    id_utilizador: number
    id_anuncio: number
    estado?: CandidaturaVoluntariado_estado | null
  }

  export type CandidaturaVoluntariadoUpdateManyMutationInput = {
    estado?: NullableEnumCandidaturaVoluntariado_estadoFieldUpdateOperationsInput | CandidaturaVoluntariado_estado | null
  }

  export type CandidaturaVoluntariadoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    id_anuncio?: IntFieldUpdateOperationsInput | number
    estado?: NullableEnumCandidaturaVoluntariado_estadoFieldUpdateOperationsInput | CandidaturaVoluntariado_estado | null
  }

  export type CategoriaEventoCreateInput = {
    nome: string
    Evento?: EventoCreateNestedManyWithoutCategoriaEventoInput
  }

  export type CategoriaEventoUncheckedCreateInput = {
    id?: number
    nome: string
    Evento?: EventoUncheckedCreateNestedManyWithoutCategoriaEventoInput
  }

  export type CategoriaEventoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    Evento?: EventoUpdateManyWithoutCategoriaEventoNestedInput
  }

  export type CategoriaEventoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    Evento?: EventoUncheckedUpdateManyWithoutCategoriaEventoNestedInput
  }

  export type CategoriaEventoCreateManyInput = {
    id?: number
    nome: string
  }

  export type CategoriaEventoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaEventoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type CompraRifaCreateInput = {
    quantidade: number
    data_compra?: Date | string | null
    estado?: CompraRifa_estado | null
    Utilizador: UtilizadorCreateNestedOneWithoutCompraRifaInput
    Rifa: RifaCreateNestedOneWithoutCompraRifaInput
  }

  export type CompraRifaUncheckedCreateInput = {
    id?: number
    id_utilizador: number
    id_rifa: number
    quantidade: number
    data_compra?: Date | string | null
    estado?: CompraRifa_estado | null
  }

  export type CompraRifaUpdateInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    data_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumCompraRifa_estadoFieldUpdateOperationsInput | CompraRifa_estado | null
    Utilizador?: UtilizadorUpdateOneRequiredWithoutCompraRifaNestedInput
    Rifa?: RifaUpdateOneRequiredWithoutCompraRifaNestedInput
  }

  export type CompraRifaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    id_rifa?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    data_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumCompraRifa_estadoFieldUpdateOperationsInput | CompraRifa_estado | null
  }

  export type CompraRifaCreateManyInput = {
    id?: number
    id_utilizador: number
    id_rifa: number
    quantidade: number
    data_compra?: Date | string | null
    estado?: CompraRifa_estado | null
  }

  export type CompraRifaUpdateManyMutationInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    data_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumCompraRifa_estadoFieldUpdateOperationsInput | CompraRifa_estado | null
  }

  export type CompraRifaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    id_rifa?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    data_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumCompraRifa_estadoFieldUpdateOperationsInput | CompraRifa_estado | null
  }

  export type DoacaoCreateInput = {
    valor: Decimal | DecimalJsLike | number | string
    data_doacao?: Date | string | null
    metodo_pagamento: Doacao_metodo_pagamento
    Utilizador: UtilizadorCreateNestedOneWithoutDoacaoInput
  }

  export type DoacaoUncheckedCreateInput = {
    id?: number
    id_utilizador: number
    valor: Decimal | DecimalJsLike | number | string
    data_doacao?: Date | string | null
    metodo_pagamento: Doacao_metodo_pagamento
  }

  export type DoacaoUpdateInput = {
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    data_doacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodo_pagamento?: EnumDoacao_metodo_pagamentoFieldUpdateOperationsInput | Doacao_metodo_pagamento
    Utilizador?: UtilizadorUpdateOneRequiredWithoutDoacaoNestedInput
  }

  export type DoacaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    data_doacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodo_pagamento?: EnumDoacao_metodo_pagamentoFieldUpdateOperationsInput | Doacao_metodo_pagamento
  }

  export type DoacaoCreateManyInput = {
    id?: number
    id_utilizador: number
    valor: Decimal | DecimalJsLike | number | string
    data_doacao?: Date | string | null
    metodo_pagamento: Doacao_metodo_pagamento
  }

  export type DoacaoUpdateManyMutationInput = {
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    data_doacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodo_pagamento?: EnumDoacao_metodo_pagamentoFieldUpdateOperationsInput | Doacao_metodo_pagamento
  }

  export type DoacaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    data_doacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodo_pagamento?: EnumDoacao_metodo_pagamentoFieldUpdateOperationsInput | Doacao_metodo_pagamento
  }

  export type EventoCreateInput = {
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    Anuncio?: AnuncioCreateNestedManyWithoutEventoInput
    AvaliacaoEvento?: AvaliacaoEventoCreateNestedManyWithoutEventoInput
    Administrador: AdministradorCreateNestedOneWithoutEventoInput
    CategoriaEvento: CategoriaEventoCreateNestedOneWithoutEventoInput
    Rifa?: RifaCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateInput = {
    id?: number
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    id_administrador: number
    id_categoria: number
    Anuncio?: AnuncioUncheckedCreateNestedManyWithoutEventoInput
    AvaliacaoEvento?: AvaliacaoEventoUncheckedCreateNestedManyWithoutEventoInput
    Rifa?: RifaUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
    Anuncio?: AnuncioUpdateManyWithoutEventoNestedInput
    AvaliacaoEvento?: AvaliacaoEventoUpdateManyWithoutEventoNestedInput
    Administrador?: AdministradorUpdateOneRequiredWithoutEventoNestedInput
    CategoriaEvento?: CategoriaEventoUpdateOneRequiredWithoutEventoNestedInput
    Rifa?: RifaUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
    id_administrador?: IntFieldUpdateOperationsInput | number
    id_categoria?: IntFieldUpdateOperationsInput | number
    Anuncio?: AnuncioUncheckedUpdateManyWithoutEventoNestedInput
    AvaliacaoEvento?: AvaliacaoEventoUncheckedUpdateManyWithoutEventoNestedInput
    Rifa?: RifaUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type EventoCreateManyInput = {
    id?: number
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    id_administrador: number
    id_categoria: number
  }

  export type EventoUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
  }

  export type EventoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
    id_administrador?: IntFieldUpdateOperationsInput | number
    id_categoria?: IntFieldUpdateOperationsInput | number
  }

  export type MensagemSuporteCreateInput = {
    mensagem: string
    data_abertura?: Date | string | null
    data_encerramento?: Date | string | null
    estado?: MensagemSuporte_estado | null
    Utilizador: UtilizadorCreateNestedOneWithoutMensagemSuporteInput
    Administrador: AdministradorCreateNestedOneWithoutMensagemSuporteInput
  }

  export type MensagemSuporteUncheckedCreateInput = {
    id?: number
    id_utilizador: number
    id_administrador: number
    mensagem: string
    data_abertura?: Date | string | null
    data_encerramento?: Date | string | null
    estado?: MensagemSuporte_estado | null
  }

  export type MensagemSuporteUpdateInput = {
    mensagem?: StringFieldUpdateOperationsInput | string
    data_abertura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_encerramento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumMensagemSuporte_estadoFieldUpdateOperationsInput | MensagemSuporte_estado | null
    Utilizador?: UtilizadorUpdateOneRequiredWithoutMensagemSuporteNestedInput
    Administrador?: AdministradorUpdateOneRequiredWithoutMensagemSuporteNestedInput
  }

  export type MensagemSuporteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    id_administrador?: IntFieldUpdateOperationsInput | number
    mensagem?: StringFieldUpdateOperationsInput | string
    data_abertura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_encerramento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumMensagemSuporte_estadoFieldUpdateOperationsInput | MensagemSuporte_estado | null
  }

  export type MensagemSuporteCreateManyInput = {
    id?: number
    id_utilizador: number
    id_administrador: number
    mensagem: string
    data_abertura?: Date | string | null
    data_encerramento?: Date | string | null
    estado?: MensagemSuporte_estado | null
  }

  export type MensagemSuporteUpdateManyMutationInput = {
    mensagem?: StringFieldUpdateOperationsInput | string
    data_abertura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_encerramento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumMensagemSuporte_estadoFieldUpdateOperationsInput | MensagemSuporte_estado | null
  }

  export type MensagemSuporteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    id_administrador?: IntFieldUpdateOperationsInput | number
    mensagem?: StringFieldUpdateOperationsInput | string
    data_abertura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_encerramento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumMensagemSuporte_estadoFieldUpdateOperationsInput | MensagemSuporte_estado | null
  }

  export type NotificacaoCreateInput = {
    mensagem: string
    data_envio?: Date | string | null
    estado?: Notificacao_estado | null
    Utilizador: UtilizadorCreateNestedOneWithoutNotificacaoInput
    Administrador: AdministradorCreateNestedOneWithoutNotificacaoInput
  }

  export type NotificacaoUncheckedCreateInput = {
    id?: number
    id_utilizador: number
    id_administrador: number
    mensagem: string
    data_envio?: Date | string | null
    estado?: Notificacao_estado | null
  }

  export type NotificacaoUpdateInput = {
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumNotificacao_estadoFieldUpdateOperationsInput | Notificacao_estado | null
    Utilizador?: UtilizadorUpdateOneRequiredWithoutNotificacaoNestedInput
    Administrador?: AdministradorUpdateOneRequiredWithoutNotificacaoNestedInput
  }

  export type NotificacaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    id_administrador?: IntFieldUpdateOperationsInput | number
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumNotificacao_estadoFieldUpdateOperationsInput | Notificacao_estado | null
  }

  export type NotificacaoCreateManyInput = {
    id?: number
    id_utilizador: number
    id_administrador: number
    mensagem: string
    data_envio?: Date | string | null
    estado?: Notificacao_estado | null
  }

  export type NotificacaoUpdateManyMutationInput = {
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumNotificacao_estadoFieldUpdateOperationsInput | Notificacao_estado | null
  }

  export type NotificacaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    id_administrador?: IntFieldUpdateOperationsInput | number
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumNotificacao_estadoFieldUpdateOperationsInput | Notificacao_estado | null
  }

  export type PagamentoCreateInput = {
    valor: Decimal | DecimalJsLike | number | string
    metodo_pagamento: Pagamento_metodo_pagamento
    estado?: Pagamento_estado | null
    data_pagamento?: Date | string | null
    Utilizador: UtilizadorCreateNestedOneWithoutPagamentoInput
  }

  export type PagamentoUncheckedCreateInput = {
    id?: number
    id_utilizador: number
    valor: Decimal | DecimalJsLike | number | string
    metodo_pagamento: Pagamento_metodo_pagamento
    estado?: Pagamento_estado | null
    data_pagamento?: Date | string | null
  }

  export type PagamentoUpdateInput = {
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    metodo_pagamento?: EnumPagamento_metodo_pagamentoFieldUpdateOperationsInput | Pagamento_metodo_pagamento
    estado?: NullableEnumPagamento_estadoFieldUpdateOperationsInput | Pagamento_estado | null
    data_pagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Utilizador?: UtilizadorUpdateOneRequiredWithoutPagamentoNestedInput
  }

  export type PagamentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    metodo_pagamento?: EnumPagamento_metodo_pagamentoFieldUpdateOperationsInput | Pagamento_metodo_pagamento
    estado?: NullableEnumPagamento_estadoFieldUpdateOperationsInput | Pagamento_estado | null
    data_pagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PagamentoCreateManyInput = {
    id?: number
    id_utilizador: number
    valor: Decimal | DecimalJsLike | number | string
    metodo_pagamento: Pagamento_metodo_pagamento
    estado?: Pagamento_estado | null
    data_pagamento?: Date | string | null
  }

  export type PagamentoUpdateManyMutationInput = {
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    metodo_pagamento?: EnumPagamento_metodo_pagamentoFieldUpdateOperationsInput | Pagamento_metodo_pagamento
    estado?: NullableEnumPagamento_estadoFieldUpdateOperationsInput | Pagamento_estado | null
    data_pagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PagamentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    metodo_pagamento?: EnumPagamento_metodo_pagamentoFieldUpdateOperationsInput | Pagamento_metodo_pagamento
    estado?: NullableEnumPagamento_estadoFieldUpdateOperationsInput | Pagamento_estado | null
    data_pagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RifaCreateInput = {
    nome: string
    preco: Decimal | DecimalJsLike | number | string
    quantidade: number
    descricao: string
    premio: string
    data_sorteio: Date | string
    CompraRifa?: CompraRifaCreateNestedManyWithoutRifaInput
    Administrador: AdministradorCreateNestedOneWithoutRifaInput
    Evento: EventoCreateNestedOneWithoutRifaInput
  }

  export type RifaUncheckedCreateInput = {
    id?: number
    nome: string
    preco: Decimal | DecimalJsLike | number | string
    quantidade: number
    descricao: string
    premio: string
    data_sorteio: Date | string
    id_administrador: number
    id_evento: number
    CompraRifa?: CompraRifaUncheckedCreateNestedManyWithoutRifaInput
  }

  export type RifaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    premio?: StringFieldUpdateOperationsInput | string
    data_sorteio?: DateTimeFieldUpdateOperationsInput | Date | string
    CompraRifa?: CompraRifaUpdateManyWithoutRifaNestedInput
    Administrador?: AdministradorUpdateOneRequiredWithoutRifaNestedInput
    Evento?: EventoUpdateOneRequiredWithoutRifaNestedInput
  }

  export type RifaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    premio?: StringFieldUpdateOperationsInput | string
    data_sorteio?: DateTimeFieldUpdateOperationsInput | Date | string
    id_administrador?: IntFieldUpdateOperationsInput | number
    id_evento?: IntFieldUpdateOperationsInput | number
    CompraRifa?: CompraRifaUncheckedUpdateManyWithoutRifaNestedInput
  }

  export type RifaCreateManyInput = {
    id?: number
    nome: string
    preco: Decimal | DecimalJsLike | number | string
    quantidade: number
    descricao: string
    premio: string
    data_sorteio: Date | string
    id_administrador: number
    id_evento: number
  }

  export type RifaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    premio?: StringFieldUpdateOperationsInput | string
    data_sorteio?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RifaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    premio?: StringFieldUpdateOperationsInput | string
    data_sorteio?: DateTimeFieldUpdateOperationsInput | Date | string
    id_administrador?: IntFieldUpdateOperationsInput | number
    id_evento?: IntFieldUpdateOperationsInput | number
  }

  export type SuporteCreateInput = {
    artigo: string
    descricao: string
  }

  export type SuporteUncheckedCreateInput = {
    id?: number
    artigo: string
    descricao: string
  }

  export type SuporteUpdateInput = {
    artigo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type SuporteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    artigo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type SuporteCreateManyInput = {
    id?: number
    artigo: string
    descricao: string
  }

  export type SuporteUpdateManyMutationInput = {
    artigo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type SuporteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    artigo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type UtilizadorCreateInput = {
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    AvaliacaoEvento?: AvaliacaoEventoCreateNestedManyWithoutUtilizadorInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoCreateNestedManyWithoutUtilizadorInput
    CompraRifa?: CompraRifaCreateNestedManyWithoutUtilizadorInput
    Doacao?: DoacaoCreateNestedManyWithoutUtilizadorInput
    MensagemSuporte?: MensagemSuporteCreateNestedManyWithoutUtilizadorInput
    Notificacao?: NotificacaoCreateNestedManyWithoutUtilizadorInput
    Pagamento?: PagamentoCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUncheckedCreateInput = {
    id?: number
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    AvaliacaoEvento?: AvaliacaoEventoUncheckedCreateNestedManyWithoutUtilizadorInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedCreateNestedManyWithoutUtilizadorInput
    CompraRifa?: CompraRifaUncheckedCreateNestedManyWithoutUtilizadorInput
    Doacao?: DoacaoUncheckedCreateNestedManyWithoutUtilizadorInput
    MensagemSuporte?: MensagemSuporteUncheckedCreateNestedManyWithoutUtilizadorInput
    Notificacao?: NotificacaoUncheckedCreateNestedManyWithoutUtilizadorInput
    Pagamento?: PagamentoUncheckedCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    AvaliacaoEvento?: AvaliacaoEventoUpdateManyWithoutUtilizadorNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUpdateManyWithoutUtilizadorNestedInput
    CompraRifa?: CompraRifaUpdateManyWithoutUtilizadorNestedInput
    Doacao?: DoacaoUpdateManyWithoutUtilizadorNestedInput
    MensagemSuporte?: MensagemSuporteUpdateManyWithoutUtilizadorNestedInput
    Notificacao?: NotificacaoUpdateManyWithoutUtilizadorNestedInput
    Pagamento?: PagamentoUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    AvaliacaoEvento?: AvaliacaoEventoUncheckedUpdateManyWithoutUtilizadorNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedUpdateManyWithoutUtilizadorNestedInput
    CompraRifa?: CompraRifaUncheckedUpdateManyWithoutUtilizadorNestedInput
    Doacao?: DoacaoUncheckedUpdateManyWithoutUtilizadorNestedInput
    MensagemSuporte?: MensagemSuporteUncheckedUpdateManyWithoutUtilizadorNestedInput
    Notificacao?: NotificacaoUncheckedUpdateManyWithoutUtilizadorNestedInput
    Pagamento?: PagamentoUncheckedUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorCreateManyInput = {
    id?: number
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
  }

  export type UtilizadorUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UtilizadorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type AnuncioListRelationFilter = {
    every?: AnuncioWhereInput
    some?: AnuncioWhereInput
    none?: AnuncioWhereInput
  }

  export type EventoListRelationFilter = {
    every?: EventoWhereInput
    some?: EventoWhereInput
    none?: EventoWhereInput
  }

  export type MensagemSuporteListRelationFilter = {
    every?: MensagemSuporteWhereInput
    some?: MensagemSuporteWhereInput
    none?: MensagemSuporteWhereInput
  }

  export type NotificacaoListRelationFilter = {
    every?: NotificacaoWhereInput
    some?: NotificacaoWhereInput
    none?: NotificacaoWhereInput
  }

  export type RifaListRelationFilter = {
    every?: RifaWhereInput
    some?: RifaWhereInput
    none?: RifaWhereInput
  }

  export type AnuncioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MensagemSuporteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RifaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdministradorCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
  }

  export type AdministradorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdministradorMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
  }

  export type AdministradorMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
  }

  export type AdministradorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type AdministradorRelationFilter = {
    is?: AdministradorWhereInput | null
    isNot?: AdministradorWhereInput | null
  }

  export type EventoRelationFilter = {
    is?: EventoWhereInput | null
    isNot?: EventoWhereInput | null
  }

  export type CandidaturaVoluntariadoListRelationFilter = {
    every?: CandidaturaVoluntariadoWhereInput
    some?: CandidaturaVoluntariadoWhereInput
    none?: CandidaturaVoluntariadoWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CandidaturaVoluntariadoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnuncioCountOrderByAggregateInput = {
    id?: SortOrder
    cargo?: SortOrder
    descricao?: SortOrder
    data_publicacao?: SortOrder
    id_administrador?: SortOrder
    id_evento?: SortOrder
  }

  export type AnuncioAvgOrderByAggregateInput = {
    id?: SortOrder
    id_administrador?: SortOrder
    id_evento?: SortOrder
  }

  export type AnuncioMaxOrderByAggregateInput = {
    id?: SortOrder
    cargo?: SortOrder
    descricao?: SortOrder
    data_publicacao?: SortOrder
    id_administrador?: SortOrder
    id_evento?: SortOrder
  }

  export type AnuncioMinOrderByAggregateInput = {
    id?: SortOrder
    cargo?: SortOrder
    descricao?: SortOrder
    data_publicacao?: SortOrder
    id_administrador?: SortOrder
    id_evento?: SortOrder
  }

  export type AnuncioSumOrderByAggregateInput = {
    id?: SortOrder
    id_administrador?: SortOrder
    id_evento?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type UtilizadorRelationFilter = {
    is?: UtilizadorWhereInput | null
    isNot?: UtilizadorWhereInput | null
  }

  export type AvaliacaoEventoCountOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_evento?: SortOrder
    nota?: SortOrder
    data_avaliacao?: SortOrder
  }

  export type AvaliacaoEventoAvgOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_evento?: SortOrder
    nota?: SortOrder
  }

  export type AvaliacaoEventoMaxOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_evento?: SortOrder
    nota?: SortOrder
    data_avaliacao?: SortOrder
  }

  export type AvaliacaoEventoMinOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_evento?: SortOrder
    nota?: SortOrder
    data_avaliacao?: SortOrder
  }

  export type AvaliacaoEventoSumOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_evento?: SortOrder
    nota?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type EnumCandidaturaVoluntariado_estadoNullableFilter = {
    equals?: CandidaturaVoluntariado_estado | null
    in?: Enumerable<CandidaturaVoluntariado_estado> | null
    notIn?: Enumerable<CandidaturaVoluntariado_estado> | null
    not?: NestedEnumCandidaturaVoluntariado_estadoNullableFilter | CandidaturaVoluntariado_estado | null
  }

  export type AnuncioRelationFilter = {
    is?: AnuncioWhereInput | null
    isNot?: AnuncioWhereInput | null
  }

  export type CandidaturaVoluntariadoCountOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_anuncio?: SortOrder
    estado?: SortOrder
  }

  export type CandidaturaVoluntariadoAvgOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_anuncio?: SortOrder
  }

  export type CandidaturaVoluntariadoMaxOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_anuncio?: SortOrder
    estado?: SortOrder
  }

  export type CandidaturaVoluntariadoMinOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_anuncio?: SortOrder
    estado?: SortOrder
  }

  export type CandidaturaVoluntariadoSumOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_anuncio?: SortOrder
  }

  export type EnumCandidaturaVoluntariado_estadoNullableWithAggregatesFilter = {
    equals?: CandidaturaVoluntariado_estado | null
    in?: Enumerable<CandidaturaVoluntariado_estado> | null
    notIn?: Enumerable<CandidaturaVoluntariado_estado> | null
    not?: NestedEnumCandidaturaVoluntariado_estadoNullableWithAggregatesFilter | CandidaturaVoluntariado_estado | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumCandidaturaVoluntariado_estadoNullableFilter
    _max?: NestedEnumCandidaturaVoluntariado_estadoNullableFilter
  }

  export type CategoriaEventoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaEventoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriaEventoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaEventoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaEventoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumCompraRifa_estadoNullableFilter = {
    equals?: CompraRifa_estado | null
    in?: Enumerable<CompraRifa_estado> | null
    notIn?: Enumerable<CompraRifa_estado> | null
    not?: NestedEnumCompraRifa_estadoNullableFilter | CompraRifa_estado | null
  }

  export type RifaRelationFilter = {
    is?: RifaWhereInput | null
    isNot?: RifaWhereInput | null
  }

  export type CompraRifaCountOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_rifa?: SortOrder
    quantidade?: SortOrder
    data_compra?: SortOrder
    estado?: SortOrder
  }

  export type CompraRifaAvgOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_rifa?: SortOrder
    quantidade?: SortOrder
  }

  export type CompraRifaMaxOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_rifa?: SortOrder
    quantidade?: SortOrder
    data_compra?: SortOrder
    estado?: SortOrder
  }

  export type CompraRifaMinOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_rifa?: SortOrder
    quantidade?: SortOrder
    data_compra?: SortOrder
    estado?: SortOrder
  }

  export type CompraRifaSumOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_rifa?: SortOrder
    quantidade?: SortOrder
  }

  export type EnumCompraRifa_estadoNullableWithAggregatesFilter = {
    equals?: CompraRifa_estado | null
    in?: Enumerable<CompraRifa_estado> | null
    notIn?: Enumerable<CompraRifa_estado> | null
    not?: NestedEnumCompraRifa_estadoNullableWithAggregatesFilter | CompraRifa_estado | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumCompraRifa_estadoNullableFilter
    _max?: NestedEnumCompraRifa_estadoNullableFilter
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type EnumDoacao_metodo_pagamentoFilter = {
    equals?: Doacao_metodo_pagamento
    in?: Enumerable<Doacao_metodo_pagamento>
    notIn?: Enumerable<Doacao_metodo_pagamento>
    not?: NestedEnumDoacao_metodo_pagamentoFilter | Doacao_metodo_pagamento
  }

  export type DoacaoCountOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    valor?: SortOrder
    data_doacao?: SortOrder
    metodo_pagamento?: SortOrder
  }

  export type DoacaoAvgOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    valor?: SortOrder
  }

  export type DoacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    valor?: SortOrder
    data_doacao?: SortOrder
    metodo_pagamento?: SortOrder
  }

  export type DoacaoMinOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    valor?: SortOrder
    data_doacao?: SortOrder
    metodo_pagamento?: SortOrder
  }

  export type DoacaoSumOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    valor?: SortOrder
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type EnumDoacao_metodo_pagamentoWithAggregatesFilter = {
    equals?: Doacao_metodo_pagamento
    in?: Enumerable<Doacao_metodo_pagamento>
    notIn?: Enumerable<Doacao_metodo_pagamento>
    not?: NestedEnumDoacao_metodo_pagamentoWithAggregatesFilter | Doacao_metodo_pagamento
    _count?: NestedIntFilter
    _min?: NestedEnumDoacao_metodo_pagamentoFilter
    _max?: NestedEnumDoacao_metodo_pagamentoFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnumEvento_estadoNullableFilter = {
    equals?: Evento_estado | null
    in?: Enumerable<Evento_estado> | null
    notIn?: Enumerable<Evento_estado> | null
    not?: NestedEnumEvento_estadoNullableFilter | Evento_estado | null
  }

  export type AvaliacaoEventoListRelationFilter = {
    every?: AvaliacaoEventoWhereInput
    some?: AvaliacaoEventoWhereInput
    none?: AvaliacaoEventoWhereInput
  }

  export type CategoriaEventoRelationFilter = {
    is?: CategoriaEventoWhereInput | null
    isNot?: CategoriaEventoWhereInput | null
  }

  export type AvaliacaoEventoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventoCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    localizacao?: SortOrder
    descricao?: SortOrder
    data_evento?: SortOrder
    fotografia?: SortOrder
    estado?: SortOrder
    id_administrador?: SortOrder
    id_categoria?: SortOrder
  }

  export type EventoAvgOrderByAggregateInput = {
    id?: SortOrder
    id_administrador?: SortOrder
    id_categoria?: SortOrder
  }

  export type EventoMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    localizacao?: SortOrder
    descricao?: SortOrder
    data_evento?: SortOrder
    fotografia?: SortOrder
    estado?: SortOrder
    id_administrador?: SortOrder
    id_categoria?: SortOrder
  }

  export type EventoMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    localizacao?: SortOrder
    descricao?: SortOrder
    data_evento?: SortOrder
    fotografia?: SortOrder
    estado?: SortOrder
    id_administrador?: SortOrder
    id_categoria?: SortOrder
  }

  export type EventoSumOrderByAggregateInput = {
    id?: SortOrder
    id_administrador?: SortOrder
    id_categoria?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumEvento_estadoNullableWithAggregatesFilter = {
    equals?: Evento_estado | null
    in?: Enumerable<Evento_estado> | null
    notIn?: Enumerable<Evento_estado> | null
    not?: NestedEnumEvento_estadoNullableWithAggregatesFilter | Evento_estado | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumEvento_estadoNullableFilter
    _max?: NestedEnumEvento_estadoNullableFilter
  }

  export type EnumMensagemSuporte_estadoNullableFilter = {
    equals?: MensagemSuporte_estado | null
    in?: Enumerable<MensagemSuporte_estado> | null
    notIn?: Enumerable<MensagemSuporte_estado> | null
    not?: NestedEnumMensagemSuporte_estadoNullableFilter | MensagemSuporte_estado | null
  }

  export type MensagemSuporteCountOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_administrador?: SortOrder
    mensagem?: SortOrder
    data_abertura?: SortOrder
    data_encerramento?: SortOrder
    estado?: SortOrder
  }

  export type MensagemSuporteAvgOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_administrador?: SortOrder
  }

  export type MensagemSuporteMaxOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_administrador?: SortOrder
    mensagem?: SortOrder
    data_abertura?: SortOrder
    data_encerramento?: SortOrder
    estado?: SortOrder
  }

  export type MensagemSuporteMinOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_administrador?: SortOrder
    mensagem?: SortOrder
    data_abertura?: SortOrder
    data_encerramento?: SortOrder
    estado?: SortOrder
  }

  export type MensagemSuporteSumOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_administrador?: SortOrder
  }

  export type EnumMensagemSuporte_estadoNullableWithAggregatesFilter = {
    equals?: MensagemSuporte_estado | null
    in?: Enumerable<MensagemSuporte_estado> | null
    notIn?: Enumerable<MensagemSuporte_estado> | null
    not?: NestedEnumMensagemSuporte_estadoNullableWithAggregatesFilter | MensagemSuporte_estado | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumMensagemSuporte_estadoNullableFilter
    _max?: NestedEnumMensagemSuporte_estadoNullableFilter
  }

  export type EnumNotificacao_estadoNullableFilter = {
    equals?: Notificacao_estado | null
    in?: Enumerable<Notificacao_estado> | null
    notIn?: Enumerable<Notificacao_estado> | null
    not?: NestedEnumNotificacao_estadoNullableFilter | Notificacao_estado | null
  }

  export type NotificacaoCountOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_administrador?: SortOrder
    mensagem?: SortOrder
    data_envio?: SortOrder
    estado?: SortOrder
  }

  export type NotificacaoAvgOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_administrador?: SortOrder
  }

  export type NotificacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_administrador?: SortOrder
    mensagem?: SortOrder
    data_envio?: SortOrder
    estado?: SortOrder
  }

  export type NotificacaoMinOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_administrador?: SortOrder
    mensagem?: SortOrder
    data_envio?: SortOrder
    estado?: SortOrder
  }

  export type NotificacaoSumOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    id_administrador?: SortOrder
  }

  export type EnumNotificacao_estadoNullableWithAggregatesFilter = {
    equals?: Notificacao_estado | null
    in?: Enumerable<Notificacao_estado> | null
    notIn?: Enumerable<Notificacao_estado> | null
    not?: NestedEnumNotificacao_estadoNullableWithAggregatesFilter | Notificacao_estado | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumNotificacao_estadoNullableFilter
    _max?: NestedEnumNotificacao_estadoNullableFilter
  }

  export type EnumPagamento_metodo_pagamentoFilter = {
    equals?: Pagamento_metodo_pagamento
    in?: Enumerable<Pagamento_metodo_pagamento>
    notIn?: Enumerable<Pagamento_metodo_pagamento>
    not?: NestedEnumPagamento_metodo_pagamentoFilter | Pagamento_metodo_pagamento
  }

  export type EnumPagamento_estadoNullableFilter = {
    equals?: Pagamento_estado | null
    in?: Enumerable<Pagamento_estado> | null
    notIn?: Enumerable<Pagamento_estado> | null
    not?: NestedEnumPagamento_estadoNullableFilter | Pagamento_estado | null
  }

  export type PagamentoCountOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    valor?: SortOrder
    metodo_pagamento?: SortOrder
    estado?: SortOrder
    data_pagamento?: SortOrder
  }

  export type PagamentoAvgOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    valor?: SortOrder
  }

  export type PagamentoMaxOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    valor?: SortOrder
    metodo_pagamento?: SortOrder
    estado?: SortOrder
    data_pagamento?: SortOrder
  }

  export type PagamentoMinOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    valor?: SortOrder
    metodo_pagamento?: SortOrder
    estado?: SortOrder
    data_pagamento?: SortOrder
  }

  export type PagamentoSumOrderByAggregateInput = {
    id?: SortOrder
    id_utilizador?: SortOrder
    valor?: SortOrder
  }

  export type EnumPagamento_metodo_pagamentoWithAggregatesFilter = {
    equals?: Pagamento_metodo_pagamento
    in?: Enumerable<Pagamento_metodo_pagamento>
    notIn?: Enumerable<Pagamento_metodo_pagamento>
    not?: NestedEnumPagamento_metodo_pagamentoWithAggregatesFilter | Pagamento_metodo_pagamento
    _count?: NestedIntFilter
    _min?: NestedEnumPagamento_metodo_pagamentoFilter
    _max?: NestedEnumPagamento_metodo_pagamentoFilter
  }

  export type EnumPagamento_estadoNullableWithAggregatesFilter = {
    equals?: Pagamento_estado | null
    in?: Enumerable<Pagamento_estado> | null
    notIn?: Enumerable<Pagamento_estado> | null
    not?: NestedEnumPagamento_estadoNullableWithAggregatesFilter | Pagamento_estado | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumPagamento_estadoNullableFilter
    _max?: NestedEnumPagamento_estadoNullableFilter
  }

  export type CompraRifaListRelationFilter = {
    every?: CompraRifaWhereInput
    some?: CompraRifaWhereInput
    none?: CompraRifaWhereInput
  }

  export type CompraRifaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RifaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    descricao?: SortOrder
    premio?: SortOrder
    data_sorteio?: SortOrder
    id_administrador?: SortOrder
    id_evento?: SortOrder
  }

  export type RifaAvgOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    id_administrador?: SortOrder
    id_evento?: SortOrder
  }

  export type RifaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    descricao?: SortOrder
    premio?: SortOrder
    data_sorteio?: SortOrder
    id_administrador?: SortOrder
    id_evento?: SortOrder
  }

  export type RifaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    descricao?: SortOrder
    premio?: SortOrder
    data_sorteio?: SortOrder
    id_administrador?: SortOrder
    id_evento?: SortOrder
  }

  export type RifaSumOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    id_administrador?: SortOrder
    id_evento?: SortOrder
  }

  export type SuporteCountOrderByAggregateInput = {
    id?: SortOrder
    artigo?: SortOrder
    descricao?: SortOrder
  }

  export type SuporteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SuporteMaxOrderByAggregateInput = {
    id?: SortOrder
    artigo?: SortOrder
    descricao?: SortOrder
  }

  export type SuporteMinOrderByAggregateInput = {
    id?: SortOrder
    artigo?: SortOrder
    descricao?: SortOrder
  }

  export type SuporteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DoacaoListRelationFilter = {
    every?: DoacaoWhereInput
    some?: DoacaoWhereInput
    none?: DoacaoWhereInput
  }

  export type PagamentoListRelationFilter = {
    every?: PagamentoWhereInput
    some?: PagamentoWhereInput
    none?: PagamentoWhereInput
  }

  export type DoacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PagamentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UtilizadorCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    password_hash?: SortOrder
    morada?: SortOrder
  }

  export type UtilizadorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UtilizadorMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    password_hash?: SortOrder
    morada?: SortOrder
  }

  export type UtilizadorMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    password_hash?: SortOrder
    morada?: SortOrder
  }

  export type UtilizadorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AnuncioCreateNestedManyWithoutAdministradorInput = {
    create?: XOR<Enumerable<AnuncioCreateWithoutAdministradorInput>, Enumerable<AnuncioUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<AnuncioCreateOrConnectWithoutAdministradorInput>
    createMany?: AnuncioCreateManyAdministradorInputEnvelope
    connect?: Enumerable<AnuncioWhereUniqueInput>
  }

  export type EventoCreateNestedManyWithoutAdministradorInput = {
    create?: XOR<Enumerable<EventoCreateWithoutAdministradorInput>, Enumerable<EventoUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<EventoCreateOrConnectWithoutAdministradorInput>
    createMany?: EventoCreateManyAdministradorInputEnvelope
    connect?: Enumerable<EventoWhereUniqueInput>
  }

  export type MensagemSuporteCreateNestedManyWithoutAdministradorInput = {
    create?: XOR<Enumerable<MensagemSuporteCreateWithoutAdministradorInput>, Enumerable<MensagemSuporteUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<MensagemSuporteCreateOrConnectWithoutAdministradorInput>
    createMany?: MensagemSuporteCreateManyAdministradorInputEnvelope
    connect?: Enumerable<MensagemSuporteWhereUniqueInput>
  }

  export type NotificacaoCreateNestedManyWithoutAdministradorInput = {
    create?: XOR<Enumerable<NotificacaoCreateWithoutAdministradorInput>, Enumerable<NotificacaoUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<NotificacaoCreateOrConnectWithoutAdministradorInput>
    createMany?: NotificacaoCreateManyAdministradorInputEnvelope
    connect?: Enumerable<NotificacaoWhereUniqueInput>
  }

  export type RifaCreateNestedManyWithoutAdministradorInput = {
    create?: XOR<Enumerable<RifaCreateWithoutAdministradorInput>, Enumerable<RifaUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<RifaCreateOrConnectWithoutAdministradorInput>
    createMany?: RifaCreateManyAdministradorInputEnvelope
    connect?: Enumerable<RifaWhereUniqueInput>
  }

  export type AnuncioUncheckedCreateNestedManyWithoutAdministradorInput = {
    create?: XOR<Enumerable<AnuncioCreateWithoutAdministradorInput>, Enumerable<AnuncioUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<AnuncioCreateOrConnectWithoutAdministradorInput>
    createMany?: AnuncioCreateManyAdministradorInputEnvelope
    connect?: Enumerable<AnuncioWhereUniqueInput>
  }

  export type EventoUncheckedCreateNestedManyWithoutAdministradorInput = {
    create?: XOR<Enumerable<EventoCreateWithoutAdministradorInput>, Enumerable<EventoUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<EventoCreateOrConnectWithoutAdministradorInput>
    createMany?: EventoCreateManyAdministradorInputEnvelope
    connect?: Enumerable<EventoWhereUniqueInput>
  }

  export type MensagemSuporteUncheckedCreateNestedManyWithoutAdministradorInput = {
    create?: XOR<Enumerable<MensagemSuporteCreateWithoutAdministradorInput>, Enumerable<MensagemSuporteUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<MensagemSuporteCreateOrConnectWithoutAdministradorInput>
    createMany?: MensagemSuporteCreateManyAdministradorInputEnvelope
    connect?: Enumerable<MensagemSuporteWhereUniqueInput>
  }

  export type NotificacaoUncheckedCreateNestedManyWithoutAdministradorInput = {
    create?: XOR<Enumerable<NotificacaoCreateWithoutAdministradorInput>, Enumerable<NotificacaoUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<NotificacaoCreateOrConnectWithoutAdministradorInput>
    createMany?: NotificacaoCreateManyAdministradorInputEnvelope
    connect?: Enumerable<NotificacaoWhereUniqueInput>
  }

  export type RifaUncheckedCreateNestedManyWithoutAdministradorInput = {
    create?: XOR<Enumerable<RifaCreateWithoutAdministradorInput>, Enumerable<RifaUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<RifaCreateOrConnectWithoutAdministradorInput>
    createMany?: RifaCreateManyAdministradorInputEnvelope
    connect?: Enumerable<RifaWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type AnuncioUpdateManyWithoutAdministradorNestedInput = {
    create?: XOR<Enumerable<AnuncioCreateWithoutAdministradorInput>, Enumerable<AnuncioUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<AnuncioCreateOrConnectWithoutAdministradorInput>
    upsert?: Enumerable<AnuncioUpsertWithWhereUniqueWithoutAdministradorInput>
    createMany?: AnuncioCreateManyAdministradorInputEnvelope
    set?: Enumerable<AnuncioWhereUniqueInput>
    disconnect?: Enumerable<AnuncioWhereUniqueInput>
    delete?: Enumerable<AnuncioWhereUniqueInput>
    connect?: Enumerable<AnuncioWhereUniqueInput>
    update?: Enumerable<AnuncioUpdateWithWhereUniqueWithoutAdministradorInput>
    updateMany?: Enumerable<AnuncioUpdateManyWithWhereWithoutAdministradorInput>
    deleteMany?: Enumerable<AnuncioScalarWhereInput>
  }

  export type EventoUpdateManyWithoutAdministradorNestedInput = {
    create?: XOR<Enumerable<EventoCreateWithoutAdministradorInput>, Enumerable<EventoUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<EventoCreateOrConnectWithoutAdministradorInput>
    upsert?: Enumerable<EventoUpsertWithWhereUniqueWithoutAdministradorInput>
    createMany?: EventoCreateManyAdministradorInputEnvelope
    set?: Enumerable<EventoWhereUniqueInput>
    disconnect?: Enumerable<EventoWhereUniqueInput>
    delete?: Enumerable<EventoWhereUniqueInput>
    connect?: Enumerable<EventoWhereUniqueInput>
    update?: Enumerable<EventoUpdateWithWhereUniqueWithoutAdministradorInput>
    updateMany?: Enumerable<EventoUpdateManyWithWhereWithoutAdministradorInput>
    deleteMany?: Enumerable<EventoScalarWhereInput>
  }

  export type MensagemSuporteUpdateManyWithoutAdministradorNestedInput = {
    create?: XOR<Enumerable<MensagemSuporteCreateWithoutAdministradorInput>, Enumerable<MensagemSuporteUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<MensagemSuporteCreateOrConnectWithoutAdministradorInput>
    upsert?: Enumerable<MensagemSuporteUpsertWithWhereUniqueWithoutAdministradorInput>
    createMany?: MensagemSuporteCreateManyAdministradorInputEnvelope
    set?: Enumerable<MensagemSuporteWhereUniqueInput>
    disconnect?: Enumerable<MensagemSuporteWhereUniqueInput>
    delete?: Enumerable<MensagemSuporteWhereUniqueInput>
    connect?: Enumerable<MensagemSuporteWhereUniqueInput>
    update?: Enumerable<MensagemSuporteUpdateWithWhereUniqueWithoutAdministradorInput>
    updateMany?: Enumerable<MensagemSuporteUpdateManyWithWhereWithoutAdministradorInput>
    deleteMany?: Enumerable<MensagemSuporteScalarWhereInput>
  }

  export type NotificacaoUpdateManyWithoutAdministradorNestedInput = {
    create?: XOR<Enumerable<NotificacaoCreateWithoutAdministradorInput>, Enumerable<NotificacaoUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<NotificacaoCreateOrConnectWithoutAdministradorInput>
    upsert?: Enumerable<NotificacaoUpsertWithWhereUniqueWithoutAdministradorInput>
    createMany?: NotificacaoCreateManyAdministradorInputEnvelope
    set?: Enumerable<NotificacaoWhereUniqueInput>
    disconnect?: Enumerable<NotificacaoWhereUniqueInput>
    delete?: Enumerable<NotificacaoWhereUniqueInput>
    connect?: Enumerable<NotificacaoWhereUniqueInput>
    update?: Enumerable<NotificacaoUpdateWithWhereUniqueWithoutAdministradorInput>
    updateMany?: Enumerable<NotificacaoUpdateManyWithWhereWithoutAdministradorInput>
    deleteMany?: Enumerable<NotificacaoScalarWhereInput>
  }

  export type RifaUpdateManyWithoutAdministradorNestedInput = {
    create?: XOR<Enumerable<RifaCreateWithoutAdministradorInput>, Enumerable<RifaUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<RifaCreateOrConnectWithoutAdministradorInput>
    upsert?: Enumerable<RifaUpsertWithWhereUniqueWithoutAdministradorInput>
    createMany?: RifaCreateManyAdministradorInputEnvelope
    set?: Enumerable<RifaWhereUniqueInput>
    disconnect?: Enumerable<RifaWhereUniqueInput>
    delete?: Enumerable<RifaWhereUniqueInput>
    connect?: Enumerable<RifaWhereUniqueInput>
    update?: Enumerable<RifaUpdateWithWhereUniqueWithoutAdministradorInput>
    updateMany?: Enumerable<RifaUpdateManyWithWhereWithoutAdministradorInput>
    deleteMany?: Enumerable<RifaScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AnuncioUncheckedUpdateManyWithoutAdministradorNestedInput = {
    create?: XOR<Enumerable<AnuncioCreateWithoutAdministradorInput>, Enumerable<AnuncioUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<AnuncioCreateOrConnectWithoutAdministradorInput>
    upsert?: Enumerable<AnuncioUpsertWithWhereUniqueWithoutAdministradorInput>
    createMany?: AnuncioCreateManyAdministradorInputEnvelope
    set?: Enumerable<AnuncioWhereUniqueInput>
    disconnect?: Enumerable<AnuncioWhereUniqueInput>
    delete?: Enumerable<AnuncioWhereUniqueInput>
    connect?: Enumerable<AnuncioWhereUniqueInput>
    update?: Enumerable<AnuncioUpdateWithWhereUniqueWithoutAdministradorInput>
    updateMany?: Enumerable<AnuncioUpdateManyWithWhereWithoutAdministradorInput>
    deleteMany?: Enumerable<AnuncioScalarWhereInput>
  }

  export type EventoUncheckedUpdateManyWithoutAdministradorNestedInput = {
    create?: XOR<Enumerable<EventoCreateWithoutAdministradorInput>, Enumerable<EventoUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<EventoCreateOrConnectWithoutAdministradorInput>
    upsert?: Enumerable<EventoUpsertWithWhereUniqueWithoutAdministradorInput>
    createMany?: EventoCreateManyAdministradorInputEnvelope
    set?: Enumerable<EventoWhereUniqueInput>
    disconnect?: Enumerable<EventoWhereUniqueInput>
    delete?: Enumerable<EventoWhereUniqueInput>
    connect?: Enumerable<EventoWhereUniqueInput>
    update?: Enumerable<EventoUpdateWithWhereUniqueWithoutAdministradorInput>
    updateMany?: Enumerable<EventoUpdateManyWithWhereWithoutAdministradorInput>
    deleteMany?: Enumerable<EventoScalarWhereInput>
  }

  export type MensagemSuporteUncheckedUpdateManyWithoutAdministradorNestedInput = {
    create?: XOR<Enumerable<MensagemSuporteCreateWithoutAdministradorInput>, Enumerable<MensagemSuporteUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<MensagemSuporteCreateOrConnectWithoutAdministradorInput>
    upsert?: Enumerable<MensagemSuporteUpsertWithWhereUniqueWithoutAdministradorInput>
    createMany?: MensagemSuporteCreateManyAdministradorInputEnvelope
    set?: Enumerable<MensagemSuporteWhereUniqueInput>
    disconnect?: Enumerable<MensagemSuporteWhereUniqueInput>
    delete?: Enumerable<MensagemSuporteWhereUniqueInput>
    connect?: Enumerable<MensagemSuporteWhereUniqueInput>
    update?: Enumerable<MensagemSuporteUpdateWithWhereUniqueWithoutAdministradorInput>
    updateMany?: Enumerable<MensagemSuporteUpdateManyWithWhereWithoutAdministradorInput>
    deleteMany?: Enumerable<MensagemSuporteScalarWhereInput>
  }

  export type NotificacaoUncheckedUpdateManyWithoutAdministradorNestedInput = {
    create?: XOR<Enumerable<NotificacaoCreateWithoutAdministradorInput>, Enumerable<NotificacaoUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<NotificacaoCreateOrConnectWithoutAdministradorInput>
    upsert?: Enumerable<NotificacaoUpsertWithWhereUniqueWithoutAdministradorInput>
    createMany?: NotificacaoCreateManyAdministradorInputEnvelope
    set?: Enumerable<NotificacaoWhereUniqueInput>
    disconnect?: Enumerable<NotificacaoWhereUniqueInput>
    delete?: Enumerable<NotificacaoWhereUniqueInput>
    connect?: Enumerable<NotificacaoWhereUniqueInput>
    update?: Enumerable<NotificacaoUpdateWithWhereUniqueWithoutAdministradorInput>
    updateMany?: Enumerable<NotificacaoUpdateManyWithWhereWithoutAdministradorInput>
    deleteMany?: Enumerable<NotificacaoScalarWhereInput>
  }

  export type RifaUncheckedUpdateManyWithoutAdministradorNestedInput = {
    create?: XOR<Enumerable<RifaCreateWithoutAdministradorInput>, Enumerable<RifaUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<RifaCreateOrConnectWithoutAdministradorInput>
    upsert?: Enumerable<RifaUpsertWithWhereUniqueWithoutAdministradorInput>
    createMany?: RifaCreateManyAdministradorInputEnvelope
    set?: Enumerable<RifaWhereUniqueInput>
    disconnect?: Enumerable<RifaWhereUniqueInput>
    delete?: Enumerable<RifaWhereUniqueInput>
    connect?: Enumerable<RifaWhereUniqueInput>
    update?: Enumerable<RifaUpdateWithWhereUniqueWithoutAdministradorInput>
    updateMany?: Enumerable<RifaUpdateManyWithWhereWithoutAdministradorInput>
    deleteMany?: Enumerable<RifaScalarWhereInput>
  }

  export type AdministradorCreateNestedOneWithoutAnuncioInput = {
    create?: XOR<AdministradorCreateWithoutAnuncioInput, AdministradorUncheckedCreateWithoutAnuncioInput>
    connectOrCreate?: AdministradorCreateOrConnectWithoutAnuncioInput
    connect?: AdministradorWhereUniqueInput
  }

  export type EventoCreateNestedOneWithoutAnuncioInput = {
    create?: XOR<EventoCreateWithoutAnuncioInput, EventoUncheckedCreateWithoutAnuncioInput>
    connectOrCreate?: EventoCreateOrConnectWithoutAnuncioInput
    connect?: EventoWhereUniqueInput
  }

  export type CandidaturaVoluntariadoCreateNestedManyWithoutAnuncioInput = {
    create?: XOR<Enumerable<CandidaturaVoluntariadoCreateWithoutAnuncioInput>, Enumerable<CandidaturaVoluntariadoUncheckedCreateWithoutAnuncioInput>>
    connectOrCreate?: Enumerable<CandidaturaVoluntariadoCreateOrConnectWithoutAnuncioInput>
    createMany?: CandidaturaVoluntariadoCreateManyAnuncioInputEnvelope
    connect?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
  }

  export type CandidaturaVoluntariadoUncheckedCreateNestedManyWithoutAnuncioInput = {
    create?: XOR<Enumerable<CandidaturaVoluntariadoCreateWithoutAnuncioInput>, Enumerable<CandidaturaVoluntariadoUncheckedCreateWithoutAnuncioInput>>
    connectOrCreate?: Enumerable<CandidaturaVoluntariadoCreateOrConnectWithoutAnuncioInput>
    createMany?: CandidaturaVoluntariadoCreateManyAnuncioInputEnvelope
    connect?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AdministradorUpdateOneRequiredWithoutAnuncioNestedInput = {
    create?: XOR<AdministradorCreateWithoutAnuncioInput, AdministradorUncheckedCreateWithoutAnuncioInput>
    connectOrCreate?: AdministradorCreateOrConnectWithoutAnuncioInput
    upsert?: AdministradorUpsertWithoutAnuncioInput
    connect?: AdministradorWhereUniqueInput
    update?: XOR<AdministradorUpdateWithoutAnuncioInput, AdministradorUncheckedUpdateWithoutAnuncioInput>
  }

  export type EventoUpdateOneRequiredWithoutAnuncioNestedInput = {
    create?: XOR<EventoCreateWithoutAnuncioInput, EventoUncheckedCreateWithoutAnuncioInput>
    connectOrCreate?: EventoCreateOrConnectWithoutAnuncioInput
    upsert?: EventoUpsertWithoutAnuncioInput
    connect?: EventoWhereUniqueInput
    update?: XOR<EventoUpdateWithoutAnuncioInput, EventoUncheckedUpdateWithoutAnuncioInput>
  }

  export type CandidaturaVoluntariadoUpdateManyWithoutAnuncioNestedInput = {
    create?: XOR<Enumerable<CandidaturaVoluntariadoCreateWithoutAnuncioInput>, Enumerable<CandidaturaVoluntariadoUncheckedCreateWithoutAnuncioInput>>
    connectOrCreate?: Enumerable<CandidaturaVoluntariadoCreateOrConnectWithoutAnuncioInput>
    upsert?: Enumerable<CandidaturaVoluntariadoUpsertWithWhereUniqueWithoutAnuncioInput>
    createMany?: CandidaturaVoluntariadoCreateManyAnuncioInputEnvelope
    set?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    disconnect?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    delete?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    connect?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    update?: Enumerable<CandidaturaVoluntariadoUpdateWithWhereUniqueWithoutAnuncioInput>
    updateMany?: Enumerable<CandidaturaVoluntariadoUpdateManyWithWhereWithoutAnuncioInput>
    deleteMany?: Enumerable<CandidaturaVoluntariadoScalarWhereInput>
  }

  export type CandidaturaVoluntariadoUncheckedUpdateManyWithoutAnuncioNestedInput = {
    create?: XOR<Enumerable<CandidaturaVoluntariadoCreateWithoutAnuncioInput>, Enumerable<CandidaturaVoluntariadoUncheckedCreateWithoutAnuncioInput>>
    connectOrCreate?: Enumerable<CandidaturaVoluntariadoCreateOrConnectWithoutAnuncioInput>
    upsert?: Enumerable<CandidaturaVoluntariadoUpsertWithWhereUniqueWithoutAnuncioInput>
    createMany?: CandidaturaVoluntariadoCreateManyAnuncioInputEnvelope
    set?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    disconnect?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    delete?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    connect?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    update?: Enumerable<CandidaturaVoluntariadoUpdateWithWhereUniqueWithoutAnuncioInput>
    updateMany?: Enumerable<CandidaturaVoluntariadoUpdateManyWithWhereWithoutAnuncioInput>
    deleteMany?: Enumerable<CandidaturaVoluntariadoScalarWhereInput>
  }

  export type UtilizadorCreateNestedOneWithoutAvaliacaoEventoInput = {
    create?: XOR<UtilizadorCreateWithoutAvaliacaoEventoInput, UtilizadorUncheckedCreateWithoutAvaliacaoEventoInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutAvaliacaoEventoInput
    connect?: UtilizadorWhereUniqueInput
  }

  export type EventoCreateNestedOneWithoutAvaliacaoEventoInput = {
    create?: XOR<EventoCreateWithoutAvaliacaoEventoInput, EventoUncheckedCreateWithoutAvaliacaoEventoInput>
    connectOrCreate?: EventoCreateOrConnectWithoutAvaliacaoEventoInput
    connect?: EventoWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UtilizadorUpdateOneRequiredWithoutAvaliacaoEventoNestedInput = {
    create?: XOR<UtilizadorCreateWithoutAvaliacaoEventoInput, UtilizadorUncheckedCreateWithoutAvaliacaoEventoInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutAvaliacaoEventoInput
    upsert?: UtilizadorUpsertWithoutAvaliacaoEventoInput
    connect?: UtilizadorWhereUniqueInput
    update?: XOR<UtilizadorUpdateWithoutAvaliacaoEventoInput, UtilizadorUncheckedUpdateWithoutAvaliacaoEventoInput>
  }

  export type EventoUpdateOneRequiredWithoutAvaliacaoEventoNestedInput = {
    create?: XOR<EventoCreateWithoutAvaliacaoEventoInput, EventoUncheckedCreateWithoutAvaliacaoEventoInput>
    connectOrCreate?: EventoCreateOrConnectWithoutAvaliacaoEventoInput
    upsert?: EventoUpsertWithoutAvaliacaoEventoInput
    connect?: EventoWhereUniqueInput
    update?: XOR<EventoUpdateWithoutAvaliacaoEventoInput, EventoUncheckedUpdateWithoutAvaliacaoEventoInput>
  }

  export type UtilizadorCreateNestedOneWithoutCandidaturaVoluntariadoInput = {
    create?: XOR<UtilizadorCreateWithoutCandidaturaVoluntariadoInput, UtilizadorUncheckedCreateWithoutCandidaturaVoluntariadoInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutCandidaturaVoluntariadoInput
    connect?: UtilizadorWhereUniqueInput
  }

  export type AnuncioCreateNestedOneWithoutCandidaturaVoluntariadoInput = {
    create?: XOR<AnuncioCreateWithoutCandidaturaVoluntariadoInput, AnuncioUncheckedCreateWithoutCandidaturaVoluntariadoInput>
    connectOrCreate?: AnuncioCreateOrConnectWithoutCandidaturaVoluntariadoInput
    connect?: AnuncioWhereUniqueInput
  }

  export type NullableEnumCandidaturaVoluntariado_estadoFieldUpdateOperationsInput = {
    set?: CandidaturaVoluntariado_estado | null
  }

  export type UtilizadorUpdateOneRequiredWithoutCandidaturaVoluntariadoNestedInput = {
    create?: XOR<UtilizadorCreateWithoutCandidaturaVoluntariadoInput, UtilizadorUncheckedCreateWithoutCandidaturaVoluntariadoInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutCandidaturaVoluntariadoInput
    upsert?: UtilizadorUpsertWithoutCandidaturaVoluntariadoInput
    connect?: UtilizadorWhereUniqueInput
    update?: XOR<UtilizadorUpdateWithoutCandidaturaVoluntariadoInput, UtilizadorUncheckedUpdateWithoutCandidaturaVoluntariadoInput>
  }

  export type AnuncioUpdateOneRequiredWithoutCandidaturaVoluntariadoNestedInput = {
    create?: XOR<AnuncioCreateWithoutCandidaturaVoluntariadoInput, AnuncioUncheckedCreateWithoutCandidaturaVoluntariadoInput>
    connectOrCreate?: AnuncioCreateOrConnectWithoutCandidaturaVoluntariadoInput
    upsert?: AnuncioUpsertWithoutCandidaturaVoluntariadoInput
    connect?: AnuncioWhereUniqueInput
    update?: XOR<AnuncioUpdateWithoutCandidaturaVoluntariadoInput, AnuncioUncheckedUpdateWithoutCandidaturaVoluntariadoInput>
  }

  export type EventoCreateNestedManyWithoutCategoriaEventoInput = {
    create?: XOR<Enumerable<EventoCreateWithoutCategoriaEventoInput>, Enumerable<EventoUncheckedCreateWithoutCategoriaEventoInput>>
    connectOrCreate?: Enumerable<EventoCreateOrConnectWithoutCategoriaEventoInput>
    createMany?: EventoCreateManyCategoriaEventoInputEnvelope
    connect?: Enumerable<EventoWhereUniqueInput>
  }

  export type EventoUncheckedCreateNestedManyWithoutCategoriaEventoInput = {
    create?: XOR<Enumerable<EventoCreateWithoutCategoriaEventoInput>, Enumerable<EventoUncheckedCreateWithoutCategoriaEventoInput>>
    connectOrCreate?: Enumerable<EventoCreateOrConnectWithoutCategoriaEventoInput>
    createMany?: EventoCreateManyCategoriaEventoInputEnvelope
    connect?: Enumerable<EventoWhereUniqueInput>
  }

  export type EventoUpdateManyWithoutCategoriaEventoNestedInput = {
    create?: XOR<Enumerable<EventoCreateWithoutCategoriaEventoInput>, Enumerable<EventoUncheckedCreateWithoutCategoriaEventoInput>>
    connectOrCreate?: Enumerable<EventoCreateOrConnectWithoutCategoriaEventoInput>
    upsert?: Enumerable<EventoUpsertWithWhereUniqueWithoutCategoriaEventoInput>
    createMany?: EventoCreateManyCategoriaEventoInputEnvelope
    set?: Enumerable<EventoWhereUniqueInput>
    disconnect?: Enumerable<EventoWhereUniqueInput>
    delete?: Enumerable<EventoWhereUniqueInput>
    connect?: Enumerable<EventoWhereUniqueInput>
    update?: Enumerable<EventoUpdateWithWhereUniqueWithoutCategoriaEventoInput>
    updateMany?: Enumerable<EventoUpdateManyWithWhereWithoutCategoriaEventoInput>
    deleteMany?: Enumerable<EventoScalarWhereInput>
  }

  export type EventoUncheckedUpdateManyWithoutCategoriaEventoNestedInput = {
    create?: XOR<Enumerable<EventoCreateWithoutCategoriaEventoInput>, Enumerable<EventoUncheckedCreateWithoutCategoriaEventoInput>>
    connectOrCreate?: Enumerable<EventoCreateOrConnectWithoutCategoriaEventoInput>
    upsert?: Enumerable<EventoUpsertWithWhereUniqueWithoutCategoriaEventoInput>
    createMany?: EventoCreateManyCategoriaEventoInputEnvelope
    set?: Enumerable<EventoWhereUniqueInput>
    disconnect?: Enumerable<EventoWhereUniqueInput>
    delete?: Enumerable<EventoWhereUniqueInput>
    connect?: Enumerable<EventoWhereUniqueInput>
    update?: Enumerable<EventoUpdateWithWhereUniqueWithoutCategoriaEventoInput>
    updateMany?: Enumerable<EventoUpdateManyWithWhereWithoutCategoriaEventoInput>
    deleteMany?: Enumerable<EventoScalarWhereInput>
  }

  export type UtilizadorCreateNestedOneWithoutCompraRifaInput = {
    create?: XOR<UtilizadorCreateWithoutCompraRifaInput, UtilizadorUncheckedCreateWithoutCompraRifaInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutCompraRifaInput
    connect?: UtilizadorWhereUniqueInput
  }

  export type RifaCreateNestedOneWithoutCompraRifaInput = {
    create?: XOR<RifaCreateWithoutCompraRifaInput, RifaUncheckedCreateWithoutCompraRifaInput>
    connectOrCreate?: RifaCreateOrConnectWithoutCompraRifaInput
    connect?: RifaWhereUniqueInput
  }

  export type NullableEnumCompraRifa_estadoFieldUpdateOperationsInput = {
    set?: CompraRifa_estado | null
  }

  export type UtilizadorUpdateOneRequiredWithoutCompraRifaNestedInput = {
    create?: XOR<UtilizadorCreateWithoutCompraRifaInput, UtilizadorUncheckedCreateWithoutCompraRifaInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutCompraRifaInput
    upsert?: UtilizadorUpsertWithoutCompraRifaInput
    connect?: UtilizadorWhereUniqueInput
    update?: XOR<UtilizadorUpdateWithoutCompraRifaInput, UtilizadorUncheckedUpdateWithoutCompraRifaInput>
  }

  export type RifaUpdateOneRequiredWithoutCompraRifaNestedInput = {
    create?: XOR<RifaCreateWithoutCompraRifaInput, RifaUncheckedCreateWithoutCompraRifaInput>
    connectOrCreate?: RifaCreateOrConnectWithoutCompraRifaInput
    upsert?: RifaUpsertWithoutCompraRifaInput
    connect?: RifaWhereUniqueInput
    update?: XOR<RifaUpdateWithoutCompraRifaInput, RifaUncheckedUpdateWithoutCompraRifaInput>
  }

  export type UtilizadorCreateNestedOneWithoutDoacaoInput = {
    create?: XOR<UtilizadorCreateWithoutDoacaoInput, UtilizadorUncheckedCreateWithoutDoacaoInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutDoacaoInput
    connect?: UtilizadorWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumDoacao_metodo_pagamentoFieldUpdateOperationsInput = {
    set?: Doacao_metodo_pagamento
  }

  export type UtilizadorUpdateOneRequiredWithoutDoacaoNestedInput = {
    create?: XOR<UtilizadorCreateWithoutDoacaoInput, UtilizadorUncheckedCreateWithoutDoacaoInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutDoacaoInput
    upsert?: UtilizadorUpsertWithoutDoacaoInput
    connect?: UtilizadorWhereUniqueInput
    update?: XOR<UtilizadorUpdateWithoutDoacaoInput, UtilizadorUncheckedUpdateWithoutDoacaoInput>
  }

  export type AnuncioCreateNestedManyWithoutEventoInput = {
    create?: XOR<Enumerable<AnuncioCreateWithoutEventoInput>, Enumerable<AnuncioUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<AnuncioCreateOrConnectWithoutEventoInput>
    createMany?: AnuncioCreateManyEventoInputEnvelope
    connect?: Enumerable<AnuncioWhereUniqueInput>
  }

  export type AvaliacaoEventoCreateNestedManyWithoutEventoInput = {
    create?: XOR<Enumerable<AvaliacaoEventoCreateWithoutEventoInput>, Enumerable<AvaliacaoEventoUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<AvaliacaoEventoCreateOrConnectWithoutEventoInput>
    createMany?: AvaliacaoEventoCreateManyEventoInputEnvelope
    connect?: Enumerable<AvaliacaoEventoWhereUniqueInput>
  }

  export type AdministradorCreateNestedOneWithoutEventoInput = {
    create?: XOR<AdministradorCreateWithoutEventoInput, AdministradorUncheckedCreateWithoutEventoInput>
    connectOrCreate?: AdministradorCreateOrConnectWithoutEventoInput
    connect?: AdministradorWhereUniqueInput
  }

  export type CategoriaEventoCreateNestedOneWithoutEventoInput = {
    create?: XOR<CategoriaEventoCreateWithoutEventoInput, CategoriaEventoUncheckedCreateWithoutEventoInput>
    connectOrCreate?: CategoriaEventoCreateOrConnectWithoutEventoInput
    connect?: CategoriaEventoWhereUniqueInput
  }

  export type RifaCreateNestedManyWithoutEventoInput = {
    create?: XOR<Enumerable<RifaCreateWithoutEventoInput>, Enumerable<RifaUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<RifaCreateOrConnectWithoutEventoInput>
    createMany?: RifaCreateManyEventoInputEnvelope
    connect?: Enumerable<RifaWhereUniqueInput>
  }

  export type AnuncioUncheckedCreateNestedManyWithoutEventoInput = {
    create?: XOR<Enumerable<AnuncioCreateWithoutEventoInput>, Enumerable<AnuncioUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<AnuncioCreateOrConnectWithoutEventoInput>
    createMany?: AnuncioCreateManyEventoInputEnvelope
    connect?: Enumerable<AnuncioWhereUniqueInput>
  }

  export type AvaliacaoEventoUncheckedCreateNestedManyWithoutEventoInput = {
    create?: XOR<Enumerable<AvaliacaoEventoCreateWithoutEventoInput>, Enumerable<AvaliacaoEventoUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<AvaliacaoEventoCreateOrConnectWithoutEventoInput>
    createMany?: AvaliacaoEventoCreateManyEventoInputEnvelope
    connect?: Enumerable<AvaliacaoEventoWhereUniqueInput>
  }

  export type RifaUncheckedCreateNestedManyWithoutEventoInput = {
    create?: XOR<Enumerable<RifaCreateWithoutEventoInput>, Enumerable<RifaUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<RifaCreateOrConnectWithoutEventoInput>
    createMany?: RifaCreateManyEventoInputEnvelope
    connect?: Enumerable<RifaWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableEnumEvento_estadoFieldUpdateOperationsInput = {
    set?: Evento_estado | null
  }

  export type AnuncioUpdateManyWithoutEventoNestedInput = {
    create?: XOR<Enumerable<AnuncioCreateWithoutEventoInput>, Enumerable<AnuncioUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<AnuncioCreateOrConnectWithoutEventoInput>
    upsert?: Enumerable<AnuncioUpsertWithWhereUniqueWithoutEventoInput>
    createMany?: AnuncioCreateManyEventoInputEnvelope
    set?: Enumerable<AnuncioWhereUniqueInput>
    disconnect?: Enumerable<AnuncioWhereUniqueInput>
    delete?: Enumerable<AnuncioWhereUniqueInput>
    connect?: Enumerable<AnuncioWhereUniqueInput>
    update?: Enumerable<AnuncioUpdateWithWhereUniqueWithoutEventoInput>
    updateMany?: Enumerable<AnuncioUpdateManyWithWhereWithoutEventoInput>
    deleteMany?: Enumerable<AnuncioScalarWhereInput>
  }

  export type AvaliacaoEventoUpdateManyWithoutEventoNestedInput = {
    create?: XOR<Enumerable<AvaliacaoEventoCreateWithoutEventoInput>, Enumerable<AvaliacaoEventoUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<AvaliacaoEventoCreateOrConnectWithoutEventoInput>
    upsert?: Enumerable<AvaliacaoEventoUpsertWithWhereUniqueWithoutEventoInput>
    createMany?: AvaliacaoEventoCreateManyEventoInputEnvelope
    set?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    disconnect?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    delete?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    connect?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    update?: Enumerable<AvaliacaoEventoUpdateWithWhereUniqueWithoutEventoInput>
    updateMany?: Enumerable<AvaliacaoEventoUpdateManyWithWhereWithoutEventoInput>
    deleteMany?: Enumerable<AvaliacaoEventoScalarWhereInput>
  }

  export type AdministradorUpdateOneRequiredWithoutEventoNestedInput = {
    create?: XOR<AdministradorCreateWithoutEventoInput, AdministradorUncheckedCreateWithoutEventoInput>
    connectOrCreate?: AdministradorCreateOrConnectWithoutEventoInput
    upsert?: AdministradorUpsertWithoutEventoInput
    connect?: AdministradorWhereUniqueInput
    update?: XOR<AdministradorUpdateWithoutEventoInput, AdministradorUncheckedUpdateWithoutEventoInput>
  }

  export type CategoriaEventoUpdateOneRequiredWithoutEventoNestedInput = {
    create?: XOR<CategoriaEventoCreateWithoutEventoInput, CategoriaEventoUncheckedCreateWithoutEventoInput>
    connectOrCreate?: CategoriaEventoCreateOrConnectWithoutEventoInput
    upsert?: CategoriaEventoUpsertWithoutEventoInput
    connect?: CategoriaEventoWhereUniqueInput
    update?: XOR<CategoriaEventoUpdateWithoutEventoInput, CategoriaEventoUncheckedUpdateWithoutEventoInput>
  }

  export type RifaUpdateManyWithoutEventoNestedInput = {
    create?: XOR<Enumerable<RifaCreateWithoutEventoInput>, Enumerable<RifaUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<RifaCreateOrConnectWithoutEventoInput>
    upsert?: Enumerable<RifaUpsertWithWhereUniqueWithoutEventoInput>
    createMany?: RifaCreateManyEventoInputEnvelope
    set?: Enumerable<RifaWhereUniqueInput>
    disconnect?: Enumerable<RifaWhereUniqueInput>
    delete?: Enumerable<RifaWhereUniqueInput>
    connect?: Enumerable<RifaWhereUniqueInput>
    update?: Enumerable<RifaUpdateWithWhereUniqueWithoutEventoInput>
    updateMany?: Enumerable<RifaUpdateManyWithWhereWithoutEventoInput>
    deleteMany?: Enumerable<RifaScalarWhereInput>
  }

  export type AnuncioUncheckedUpdateManyWithoutEventoNestedInput = {
    create?: XOR<Enumerable<AnuncioCreateWithoutEventoInput>, Enumerable<AnuncioUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<AnuncioCreateOrConnectWithoutEventoInput>
    upsert?: Enumerable<AnuncioUpsertWithWhereUniqueWithoutEventoInput>
    createMany?: AnuncioCreateManyEventoInputEnvelope
    set?: Enumerable<AnuncioWhereUniqueInput>
    disconnect?: Enumerable<AnuncioWhereUniqueInput>
    delete?: Enumerable<AnuncioWhereUniqueInput>
    connect?: Enumerable<AnuncioWhereUniqueInput>
    update?: Enumerable<AnuncioUpdateWithWhereUniqueWithoutEventoInput>
    updateMany?: Enumerable<AnuncioUpdateManyWithWhereWithoutEventoInput>
    deleteMany?: Enumerable<AnuncioScalarWhereInput>
  }

  export type AvaliacaoEventoUncheckedUpdateManyWithoutEventoNestedInput = {
    create?: XOR<Enumerable<AvaliacaoEventoCreateWithoutEventoInput>, Enumerable<AvaliacaoEventoUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<AvaliacaoEventoCreateOrConnectWithoutEventoInput>
    upsert?: Enumerable<AvaliacaoEventoUpsertWithWhereUniqueWithoutEventoInput>
    createMany?: AvaliacaoEventoCreateManyEventoInputEnvelope
    set?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    disconnect?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    delete?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    connect?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    update?: Enumerable<AvaliacaoEventoUpdateWithWhereUniqueWithoutEventoInput>
    updateMany?: Enumerable<AvaliacaoEventoUpdateManyWithWhereWithoutEventoInput>
    deleteMany?: Enumerable<AvaliacaoEventoScalarWhereInput>
  }

  export type RifaUncheckedUpdateManyWithoutEventoNestedInput = {
    create?: XOR<Enumerable<RifaCreateWithoutEventoInput>, Enumerable<RifaUncheckedCreateWithoutEventoInput>>
    connectOrCreate?: Enumerable<RifaCreateOrConnectWithoutEventoInput>
    upsert?: Enumerable<RifaUpsertWithWhereUniqueWithoutEventoInput>
    createMany?: RifaCreateManyEventoInputEnvelope
    set?: Enumerable<RifaWhereUniqueInput>
    disconnect?: Enumerable<RifaWhereUniqueInput>
    delete?: Enumerable<RifaWhereUniqueInput>
    connect?: Enumerable<RifaWhereUniqueInput>
    update?: Enumerable<RifaUpdateWithWhereUniqueWithoutEventoInput>
    updateMany?: Enumerable<RifaUpdateManyWithWhereWithoutEventoInput>
    deleteMany?: Enumerable<RifaScalarWhereInput>
  }

  export type UtilizadorCreateNestedOneWithoutMensagemSuporteInput = {
    create?: XOR<UtilizadorCreateWithoutMensagemSuporteInput, UtilizadorUncheckedCreateWithoutMensagemSuporteInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutMensagemSuporteInput
    connect?: UtilizadorWhereUniqueInput
  }

  export type AdministradorCreateNestedOneWithoutMensagemSuporteInput = {
    create?: XOR<AdministradorCreateWithoutMensagemSuporteInput, AdministradorUncheckedCreateWithoutMensagemSuporteInput>
    connectOrCreate?: AdministradorCreateOrConnectWithoutMensagemSuporteInput
    connect?: AdministradorWhereUniqueInput
  }

  export type NullableEnumMensagemSuporte_estadoFieldUpdateOperationsInput = {
    set?: MensagemSuporte_estado | null
  }

  export type UtilizadorUpdateOneRequiredWithoutMensagemSuporteNestedInput = {
    create?: XOR<UtilizadorCreateWithoutMensagemSuporteInput, UtilizadorUncheckedCreateWithoutMensagemSuporteInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutMensagemSuporteInput
    upsert?: UtilizadorUpsertWithoutMensagemSuporteInput
    connect?: UtilizadorWhereUniqueInput
    update?: XOR<UtilizadorUpdateWithoutMensagemSuporteInput, UtilizadorUncheckedUpdateWithoutMensagemSuporteInput>
  }

  export type AdministradorUpdateOneRequiredWithoutMensagemSuporteNestedInput = {
    create?: XOR<AdministradorCreateWithoutMensagemSuporteInput, AdministradorUncheckedCreateWithoutMensagemSuporteInput>
    connectOrCreate?: AdministradorCreateOrConnectWithoutMensagemSuporteInput
    upsert?: AdministradorUpsertWithoutMensagemSuporteInput
    connect?: AdministradorWhereUniqueInput
    update?: XOR<AdministradorUpdateWithoutMensagemSuporteInput, AdministradorUncheckedUpdateWithoutMensagemSuporteInput>
  }

  export type UtilizadorCreateNestedOneWithoutNotificacaoInput = {
    create?: XOR<UtilizadorCreateWithoutNotificacaoInput, UtilizadorUncheckedCreateWithoutNotificacaoInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutNotificacaoInput
    connect?: UtilizadorWhereUniqueInput
  }

  export type AdministradorCreateNestedOneWithoutNotificacaoInput = {
    create?: XOR<AdministradorCreateWithoutNotificacaoInput, AdministradorUncheckedCreateWithoutNotificacaoInput>
    connectOrCreate?: AdministradorCreateOrConnectWithoutNotificacaoInput
    connect?: AdministradorWhereUniqueInput
  }

  export type NullableEnumNotificacao_estadoFieldUpdateOperationsInput = {
    set?: Notificacao_estado | null
  }

  export type UtilizadorUpdateOneRequiredWithoutNotificacaoNestedInput = {
    create?: XOR<UtilizadorCreateWithoutNotificacaoInput, UtilizadorUncheckedCreateWithoutNotificacaoInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutNotificacaoInput
    upsert?: UtilizadorUpsertWithoutNotificacaoInput
    connect?: UtilizadorWhereUniqueInput
    update?: XOR<UtilizadorUpdateWithoutNotificacaoInput, UtilizadorUncheckedUpdateWithoutNotificacaoInput>
  }

  export type AdministradorUpdateOneRequiredWithoutNotificacaoNestedInput = {
    create?: XOR<AdministradorCreateWithoutNotificacaoInput, AdministradorUncheckedCreateWithoutNotificacaoInput>
    connectOrCreate?: AdministradorCreateOrConnectWithoutNotificacaoInput
    upsert?: AdministradorUpsertWithoutNotificacaoInput
    connect?: AdministradorWhereUniqueInput
    update?: XOR<AdministradorUpdateWithoutNotificacaoInput, AdministradorUncheckedUpdateWithoutNotificacaoInput>
  }

  export type UtilizadorCreateNestedOneWithoutPagamentoInput = {
    create?: XOR<UtilizadorCreateWithoutPagamentoInput, UtilizadorUncheckedCreateWithoutPagamentoInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutPagamentoInput
    connect?: UtilizadorWhereUniqueInput
  }

  export type EnumPagamento_metodo_pagamentoFieldUpdateOperationsInput = {
    set?: Pagamento_metodo_pagamento
  }

  export type NullableEnumPagamento_estadoFieldUpdateOperationsInput = {
    set?: Pagamento_estado | null
  }

  export type UtilizadorUpdateOneRequiredWithoutPagamentoNestedInput = {
    create?: XOR<UtilizadorCreateWithoutPagamentoInput, UtilizadorUncheckedCreateWithoutPagamentoInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutPagamentoInput
    upsert?: UtilizadorUpsertWithoutPagamentoInput
    connect?: UtilizadorWhereUniqueInput
    update?: XOR<UtilizadorUpdateWithoutPagamentoInput, UtilizadorUncheckedUpdateWithoutPagamentoInput>
  }

  export type CompraRifaCreateNestedManyWithoutRifaInput = {
    create?: XOR<Enumerable<CompraRifaCreateWithoutRifaInput>, Enumerable<CompraRifaUncheckedCreateWithoutRifaInput>>
    connectOrCreate?: Enumerable<CompraRifaCreateOrConnectWithoutRifaInput>
    createMany?: CompraRifaCreateManyRifaInputEnvelope
    connect?: Enumerable<CompraRifaWhereUniqueInput>
  }

  export type AdministradorCreateNestedOneWithoutRifaInput = {
    create?: XOR<AdministradorCreateWithoutRifaInput, AdministradorUncheckedCreateWithoutRifaInput>
    connectOrCreate?: AdministradorCreateOrConnectWithoutRifaInput
    connect?: AdministradorWhereUniqueInput
  }

  export type EventoCreateNestedOneWithoutRifaInput = {
    create?: XOR<EventoCreateWithoutRifaInput, EventoUncheckedCreateWithoutRifaInput>
    connectOrCreate?: EventoCreateOrConnectWithoutRifaInput
    connect?: EventoWhereUniqueInput
  }

  export type CompraRifaUncheckedCreateNestedManyWithoutRifaInput = {
    create?: XOR<Enumerable<CompraRifaCreateWithoutRifaInput>, Enumerable<CompraRifaUncheckedCreateWithoutRifaInput>>
    connectOrCreate?: Enumerable<CompraRifaCreateOrConnectWithoutRifaInput>
    createMany?: CompraRifaCreateManyRifaInputEnvelope
    connect?: Enumerable<CompraRifaWhereUniqueInput>
  }

  export type CompraRifaUpdateManyWithoutRifaNestedInput = {
    create?: XOR<Enumerable<CompraRifaCreateWithoutRifaInput>, Enumerable<CompraRifaUncheckedCreateWithoutRifaInput>>
    connectOrCreate?: Enumerable<CompraRifaCreateOrConnectWithoutRifaInput>
    upsert?: Enumerable<CompraRifaUpsertWithWhereUniqueWithoutRifaInput>
    createMany?: CompraRifaCreateManyRifaInputEnvelope
    set?: Enumerable<CompraRifaWhereUniqueInput>
    disconnect?: Enumerable<CompraRifaWhereUniqueInput>
    delete?: Enumerable<CompraRifaWhereUniqueInput>
    connect?: Enumerable<CompraRifaWhereUniqueInput>
    update?: Enumerable<CompraRifaUpdateWithWhereUniqueWithoutRifaInput>
    updateMany?: Enumerable<CompraRifaUpdateManyWithWhereWithoutRifaInput>
    deleteMany?: Enumerable<CompraRifaScalarWhereInput>
  }

  export type AdministradorUpdateOneRequiredWithoutRifaNestedInput = {
    create?: XOR<AdministradorCreateWithoutRifaInput, AdministradorUncheckedCreateWithoutRifaInput>
    connectOrCreate?: AdministradorCreateOrConnectWithoutRifaInput
    upsert?: AdministradorUpsertWithoutRifaInput
    connect?: AdministradorWhereUniqueInput
    update?: XOR<AdministradorUpdateWithoutRifaInput, AdministradorUncheckedUpdateWithoutRifaInput>
  }

  export type EventoUpdateOneRequiredWithoutRifaNestedInput = {
    create?: XOR<EventoCreateWithoutRifaInput, EventoUncheckedCreateWithoutRifaInput>
    connectOrCreate?: EventoCreateOrConnectWithoutRifaInput
    upsert?: EventoUpsertWithoutRifaInput
    connect?: EventoWhereUniqueInput
    update?: XOR<EventoUpdateWithoutRifaInput, EventoUncheckedUpdateWithoutRifaInput>
  }

  export type CompraRifaUncheckedUpdateManyWithoutRifaNestedInput = {
    create?: XOR<Enumerable<CompraRifaCreateWithoutRifaInput>, Enumerable<CompraRifaUncheckedCreateWithoutRifaInput>>
    connectOrCreate?: Enumerable<CompraRifaCreateOrConnectWithoutRifaInput>
    upsert?: Enumerable<CompraRifaUpsertWithWhereUniqueWithoutRifaInput>
    createMany?: CompraRifaCreateManyRifaInputEnvelope
    set?: Enumerable<CompraRifaWhereUniqueInput>
    disconnect?: Enumerable<CompraRifaWhereUniqueInput>
    delete?: Enumerable<CompraRifaWhereUniqueInput>
    connect?: Enumerable<CompraRifaWhereUniqueInput>
    update?: Enumerable<CompraRifaUpdateWithWhereUniqueWithoutRifaInput>
    updateMany?: Enumerable<CompraRifaUpdateManyWithWhereWithoutRifaInput>
    deleteMany?: Enumerable<CompraRifaScalarWhereInput>
  }

  export type AvaliacaoEventoCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<AvaliacaoEventoCreateWithoutUtilizadorInput>, Enumerable<AvaliacaoEventoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<AvaliacaoEventoCreateOrConnectWithoutUtilizadorInput>
    createMany?: AvaliacaoEventoCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<AvaliacaoEventoWhereUniqueInput>
  }

  export type CandidaturaVoluntariadoCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<CandidaturaVoluntariadoCreateWithoutUtilizadorInput>, Enumerable<CandidaturaVoluntariadoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<CandidaturaVoluntariadoCreateOrConnectWithoutUtilizadorInput>
    createMany?: CandidaturaVoluntariadoCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
  }

  export type CompraRifaCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<CompraRifaCreateWithoutUtilizadorInput>, Enumerable<CompraRifaUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<CompraRifaCreateOrConnectWithoutUtilizadorInput>
    createMany?: CompraRifaCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<CompraRifaWhereUniqueInput>
  }

  export type DoacaoCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<DoacaoCreateWithoutUtilizadorInput>, Enumerable<DoacaoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<DoacaoCreateOrConnectWithoutUtilizadorInput>
    createMany?: DoacaoCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<DoacaoWhereUniqueInput>
  }

  export type MensagemSuporteCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<MensagemSuporteCreateWithoutUtilizadorInput>, Enumerable<MensagemSuporteUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<MensagemSuporteCreateOrConnectWithoutUtilizadorInput>
    createMany?: MensagemSuporteCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<MensagemSuporteWhereUniqueInput>
  }

  export type NotificacaoCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<NotificacaoCreateWithoutUtilizadorInput>, Enumerable<NotificacaoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<NotificacaoCreateOrConnectWithoutUtilizadorInput>
    createMany?: NotificacaoCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<NotificacaoWhereUniqueInput>
  }

  export type PagamentoCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<PagamentoCreateWithoutUtilizadorInput>, Enumerable<PagamentoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<PagamentoCreateOrConnectWithoutUtilizadorInput>
    createMany?: PagamentoCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<PagamentoWhereUniqueInput>
  }

  export type AvaliacaoEventoUncheckedCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<AvaliacaoEventoCreateWithoutUtilizadorInput>, Enumerable<AvaliacaoEventoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<AvaliacaoEventoCreateOrConnectWithoutUtilizadorInput>
    createMany?: AvaliacaoEventoCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<AvaliacaoEventoWhereUniqueInput>
  }

  export type CandidaturaVoluntariadoUncheckedCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<CandidaturaVoluntariadoCreateWithoutUtilizadorInput>, Enumerable<CandidaturaVoluntariadoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<CandidaturaVoluntariadoCreateOrConnectWithoutUtilizadorInput>
    createMany?: CandidaturaVoluntariadoCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
  }

  export type CompraRifaUncheckedCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<CompraRifaCreateWithoutUtilizadorInput>, Enumerable<CompraRifaUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<CompraRifaCreateOrConnectWithoutUtilizadorInput>
    createMany?: CompraRifaCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<CompraRifaWhereUniqueInput>
  }

  export type DoacaoUncheckedCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<DoacaoCreateWithoutUtilizadorInput>, Enumerable<DoacaoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<DoacaoCreateOrConnectWithoutUtilizadorInput>
    createMany?: DoacaoCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<DoacaoWhereUniqueInput>
  }

  export type MensagemSuporteUncheckedCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<MensagemSuporteCreateWithoutUtilizadorInput>, Enumerable<MensagemSuporteUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<MensagemSuporteCreateOrConnectWithoutUtilizadorInput>
    createMany?: MensagemSuporteCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<MensagemSuporteWhereUniqueInput>
  }

  export type NotificacaoUncheckedCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<NotificacaoCreateWithoutUtilizadorInput>, Enumerable<NotificacaoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<NotificacaoCreateOrConnectWithoutUtilizadorInput>
    createMany?: NotificacaoCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<NotificacaoWhereUniqueInput>
  }

  export type PagamentoUncheckedCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<Enumerable<PagamentoCreateWithoutUtilizadorInput>, Enumerable<PagamentoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<PagamentoCreateOrConnectWithoutUtilizadorInput>
    createMany?: PagamentoCreateManyUtilizadorInputEnvelope
    connect?: Enumerable<PagamentoWhereUniqueInput>
  }

  export type AvaliacaoEventoUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<AvaliacaoEventoCreateWithoutUtilizadorInput>, Enumerable<AvaliacaoEventoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<AvaliacaoEventoCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<AvaliacaoEventoUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: AvaliacaoEventoCreateManyUtilizadorInputEnvelope
    set?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    disconnect?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    delete?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    connect?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    update?: Enumerable<AvaliacaoEventoUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<AvaliacaoEventoUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<AvaliacaoEventoScalarWhereInput>
  }

  export type CandidaturaVoluntariadoUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<CandidaturaVoluntariadoCreateWithoutUtilizadorInput>, Enumerable<CandidaturaVoluntariadoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<CandidaturaVoluntariadoCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<CandidaturaVoluntariadoUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: CandidaturaVoluntariadoCreateManyUtilizadorInputEnvelope
    set?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    disconnect?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    delete?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    connect?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    update?: Enumerable<CandidaturaVoluntariadoUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<CandidaturaVoluntariadoUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<CandidaturaVoluntariadoScalarWhereInput>
  }

  export type CompraRifaUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<CompraRifaCreateWithoutUtilizadorInput>, Enumerable<CompraRifaUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<CompraRifaCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<CompraRifaUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: CompraRifaCreateManyUtilizadorInputEnvelope
    set?: Enumerable<CompraRifaWhereUniqueInput>
    disconnect?: Enumerable<CompraRifaWhereUniqueInput>
    delete?: Enumerable<CompraRifaWhereUniqueInput>
    connect?: Enumerable<CompraRifaWhereUniqueInput>
    update?: Enumerable<CompraRifaUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<CompraRifaUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<CompraRifaScalarWhereInput>
  }

  export type DoacaoUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<DoacaoCreateWithoutUtilizadorInput>, Enumerable<DoacaoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<DoacaoCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<DoacaoUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: DoacaoCreateManyUtilizadorInputEnvelope
    set?: Enumerable<DoacaoWhereUniqueInput>
    disconnect?: Enumerable<DoacaoWhereUniqueInput>
    delete?: Enumerable<DoacaoWhereUniqueInput>
    connect?: Enumerable<DoacaoWhereUniqueInput>
    update?: Enumerable<DoacaoUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<DoacaoUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<DoacaoScalarWhereInput>
  }

  export type MensagemSuporteUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<MensagemSuporteCreateWithoutUtilizadorInput>, Enumerable<MensagemSuporteUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<MensagemSuporteCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<MensagemSuporteUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: MensagemSuporteCreateManyUtilizadorInputEnvelope
    set?: Enumerable<MensagemSuporteWhereUniqueInput>
    disconnect?: Enumerable<MensagemSuporteWhereUniqueInput>
    delete?: Enumerable<MensagemSuporteWhereUniqueInput>
    connect?: Enumerable<MensagemSuporteWhereUniqueInput>
    update?: Enumerable<MensagemSuporteUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<MensagemSuporteUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<MensagemSuporteScalarWhereInput>
  }

  export type NotificacaoUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<NotificacaoCreateWithoutUtilizadorInput>, Enumerable<NotificacaoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<NotificacaoCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<NotificacaoUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: NotificacaoCreateManyUtilizadorInputEnvelope
    set?: Enumerable<NotificacaoWhereUniqueInput>
    disconnect?: Enumerable<NotificacaoWhereUniqueInput>
    delete?: Enumerable<NotificacaoWhereUniqueInput>
    connect?: Enumerable<NotificacaoWhereUniqueInput>
    update?: Enumerable<NotificacaoUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<NotificacaoUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<NotificacaoScalarWhereInput>
  }

  export type PagamentoUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<PagamentoCreateWithoutUtilizadorInput>, Enumerable<PagamentoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<PagamentoCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<PagamentoUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: PagamentoCreateManyUtilizadorInputEnvelope
    set?: Enumerable<PagamentoWhereUniqueInput>
    disconnect?: Enumerable<PagamentoWhereUniqueInput>
    delete?: Enumerable<PagamentoWhereUniqueInput>
    connect?: Enumerable<PagamentoWhereUniqueInput>
    update?: Enumerable<PagamentoUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<PagamentoUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<PagamentoScalarWhereInput>
  }

  export type AvaliacaoEventoUncheckedUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<AvaliacaoEventoCreateWithoutUtilizadorInput>, Enumerable<AvaliacaoEventoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<AvaliacaoEventoCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<AvaliacaoEventoUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: AvaliacaoEventoCreateManyUtilizadorInputEnvelope
    set?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    disconnect?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    delete?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    connect?: Enumerable<AvaliacaoEventoWhereUniqueInput>
    update?: Enumerable<AvaliacaoEventoUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<AvaliacaoEventoUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<AvaliacaoEventoScalarWhereInput>
  }

  export type CandidaturaVoluntariadoUncheckedUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<CandidaturaVoluntariadoCreateWithoutUtilizadorInput>, Enumerable<CandidaturaVoluntariadoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<CandidaturaVoluntariadoCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<CandidaturaVoluntariadoUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: CandidaturaVoluntariadoCreateManyUtilizadorInputEnvelope
    set?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    disconnect?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    delete?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    connect?: Enumerable<CandidaturaVoluntariadoWhereUniqueInput>
    update?: Enumerable<CandidaturaVoluntariadoUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<CandidaturaVoluntariadoUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<CandidaturaVoluntariadoScalarWhereInput>
  }

  export type CompraRifaUncheckedUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<CompraRifaCreateWithoutUtilizadorInput>, Enumerable<CompraRifaUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<CompraRifaCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<CompraRifaUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: CompraRifaCreateManyUtilizadorInputEnvelope
    set?: Enumerable<CompraRifaWhereUniqueInput>
    disconnect?: Enumerable<CompraRifaWhereUniqueInput>
    delete?: Enumerable<CompraRifaWhereUniqueInput>
    connect?: Enumerable<CompraRifaWhereUniqueInput>
    update?: Enumerable<CompraRifaUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<CompraRifaUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<CompraRifaScalarWhereInput>
  }

  export type DoacaoUncheckedUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<DoacaoCreateWithoutUtilizadorInput>, Enumerable<DoacaoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<DoacaoCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<DoacaoUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: DoacaoCreateManyUtilizadorInputEnvelope
    set?: Enumerable<DoacaoWhereUniqueInput>
    disconnect?: Enumerable<DoacaoWhereUniqueInput>
    delete?: Enumerable<DoacaoWhereUniqueInput>
    connect?: Enumerable<DoacaoWhereUniqueInput>
    update?: Enumerable<DoacaoUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<DoacaoUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<DoacaoScalarWhereInput>
  }

  export type MensagemSuporteUncheckedUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<MensagemSuporteCreateWithoutUtilizadorInput>, Enumerable<MensagemSuporteUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<MensagemSuporteCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<MensagemSuporteUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: MensagemSuporteCreateManyUtilizadorInputEnvelope
    set?: Enumerable<MensagemSuporteWhereUniqueInput>
    disconnect?: Enumerable<MensagemSuporteWhereUniqueInput>
    delete?: Enumerable<MensagemSuporteWhereUniqueInput>
    connect?: Enumerable<MensagemSuporteWhereUniqueInput>
    update?: Enumerable<MensagemSuporteUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<MensagemSuporteUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<MensagemSuporteScalarWhereInput>
  }

  export type NotificacaoUncheckedUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<NotificacaoCreateWithoutUtilizadorInput>, Enumerable<NotificacaoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<NotificacaoCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<NotificacaoUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: NotificacaoCreateManyUtilizadorInputEnvelope
    set?: Enumerable<NotificacaoWhereUniqueInput>
    disconnect?: Enumerable<NotificacaoWhereUniqueInput>
    delete?: Enumerable<NotificacaoWhereUniqueInput>
    connect?: Enumerable<NotificacaoWhereUniqueInput>
    update?: Enumerable<NotificacaoUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<NotificacaoUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<NotificacaoScalarWhereInput>
  }

  export type PagamentoUncheckedUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<Enumerable<PagamentoCreateWithoutUtilizadorInput>, Enumerable<PagamentoUncheckedCreateWithoutUtilizadorInput>>
    connectOrCreate?: Enumerable<PagamentoCreateOrConnectWithoutUtilizadorInput>
    upsert?: Enumerable<PagamentoUpsertWithWhereUniqueWithoutUtilizadorInput>
    createMany?: PagamentoCreateManyUtilizadorInputEnvelope
    set?: Enumerable<PagamentoWhereUniqueInput>
    disconnect?: Enumerable<PagamentoWhereUniqueInput>
    delete?: Enumerable<PagamentoWhereUniqueInput>
    connect?: Enumerable<PagamentoWhereUniqueInput>
    update?: Enumerable<PagamentoUpdateWithWhereUniqueWithoutUtilizadorInput>
    updateMany?: Enumerable<PagamentoUpdateManyWithWhereWithoutUtilizadorInput>
    deleteMany?: Enumerable<PagamentoScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumCandidaturaVoluntariado_estadoNullableFilter = {
    equals?: CandidaturaVoluntariado_estado | null
    in?: Enumerable<CandidaturaVoluntariado_estado> | null
    notIn?: Enumerable<CandidaturaVoluntariado_estado> | null
    not?: NestedEnumCandidaturaVoluntariado_estadoNullableFilter | CandidaturaVoluntariado_estado | null
  }

  export type NestedEnumCandidaturaVoluntariado_estadoNullableWithAggregatesFilter = {
    equals?: CandidaturaVoluntariado_estado | null
    in?: Enumerable<CandidaturaVoluntariado_estado> | null
    notIn?: Enumerable<CandidaturaVoluntariado_estado> | null
    not?: NestedEnumCandidaturaVoluntariado_estadoNullableWithAggregatesFilter | CandidaturaVoluntariado_estado | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumCandidaturaVoluntariado_estadoNullableFilter
    _max?: NestedEnumCandidaturaVoluntariado_estadoNullableFilter
  }

  export type NestedEnumCompraRifa_estadoNullableFilter = {
    equals?: CompraRifa_estado | null
    in?: Enumerable<CompraRifa_estado> | null
    notIn?: Enumerable<CompraRifa_estado> | null
    not?: NestedEnumCompraRifa_estadoNullableFilter | CompraRifa_estado | null
  }

  export type NestedEnumCompraRifa_estadoNullableWithAggregatesFilter = {
    equals?: CompraRifa_estado | null
    in?: Enumerable<CompraRifa_estado> | null
    notIn?: Enumerable<CompraRifa_estado> | null
    not?: NestedEnumCompraRifa_estadoNullableWithAggregatesFilter | CompraRifa_estado | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumCompraRifa_estadoNullableFilter
    _max?: NestedEnumCompraRifa_estadoNullableFilter
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumDoacao_metodo_pagamentoFilter = {
    equals?: Doacao_metodo_pagamento
    in?: Enumerable<Doacao_metodo_pagamento>
    notIn?: Enumerable<Doacao_metodo_pagamento>
    not?: NestedEnumDoacao_metodo_pagamentoFilter | Doacao_metodo_pagamento
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type NestedEnumDoacao_metodo_pagamentoWithAggregatesFilter = {
    equals?: Doacao_metodo_pagamento
    in?: Enumerable<Doacao_metodo_pagamento>
    notIn?: Enumerable<Doacao_metodo_pagamento>
    not?: NestedEnumDoacao_metodo_pagamentoWithAggregatesFilter | Doacao_metodo_pagamento
    _count?: NestedIntFilter
    _min?: NestedEnumDoacao_metodo_pagamentoFilter
    _max?: NestedEnumDoacao_metodo_pagamentoFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumEvento_estadoNullableFilter = {
    equals?: Evento_estado | null
    in?: Enumerable<Evento_estado> | null
    notIn?: Enumerable<Evento_estado> | null
    not?: NestedEnumEvento_estadoNullableFilter | Evento_estado | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumEvento_estadoNullableWithAggregatesFilter = {
    equals?: Evento_estado | null
    in?: Enumerable<Evento_estado> | null
    notIn?: Enumerable<Evento_estado> | null
    not?: NestedEnumEvento_estadoNullableWithAggregatesFilter | Evento_estado | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumEvento_estadoNullableFilter
    _max?: NestedEnumEvento_estadoNullableFilter
  }

  export type NestedEnumMensagemSuporte_estadoNullableFilter = {
    equals?: MensagemSuporte_estado | null
    in?: Enumerable<MensagemSuporte_estado> | null
    notIn?: Enumerable<MensagemSuporte_estado> | null
    not?: NestedEnumMensagemSuporte_estadoNullableFilter | MensagemSuporte_estado | null
  }

  export type NestedEnumMensagemSuporte_estadoNullableWithAggregatesFilter = {
    equals?: MensagemSuporte_estado | null
    in?: Enumerable<MensagemSuporte_estado> | null
    notIn?: Enumerable<MensagemSuporte_estado> | null
    not?: NestedEnumMensagemSuporte_estadoNullableWithAggregatesFilter | MensagemSuporte_estado | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumMensagemSuporte_estadoNullableFilter
    _max?: NestedEnumMensagemSuporte_estadoNullableFilter
  }

  export type NestedEnumNotificacao_estadoNullableFilter = {
    equals?: Notificacao_estado | null
    in?: Enumerable<Notificacao_estado> | null
    notIn?: Enumerable<Notificacao_estado> | null
    not?: NestedEnumNotificacao_estadoNullableFilter | Notificacao_estado | null
  }

  export type NestedEnumNotificacao_estadoNullableWithAggregatesFilter = {
    equals?: Notificacao_estado | null
    in?: Enumerable<Notificacao_estado> | null
    notIn?: Enumerable<Notificacao_estado> | null
    not?: NestedEnumNotificacao_estadoNullableWithAggregatesFilter | Notificacao_estado | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumNotificacao_estadoNullableFilter
    _max?: NestedEnumNotificacao_estadoNullableFilter
  }

  export type NestedEnumPagamento_metodo_pagamentoFilter = {
    equals?: Pagamento_metodo_pagamento
    in?: Enumerable<Pagamento_metodo_pagamento>
    notIn?: Enumerable<Pagamento_metodo_pagamento>
    not?: NestedEnumPagamento_metodo_pagamentoFilter | Pagamento_metodo_pagamento
  }

  export type NestedEnumPagamento_estadoNullableFilter = {
    equals?: Pagamento_estado | null
    in?: Enumerable<Pagamento_estado> | null
    notIn?: Enumerable<Pagamento_estado> | null
    not?: NestedEnumPagamento_estadoNullableFilter | Pagamento_estado | null
  }

  export type NestedEnumPagamento_metodo_pagamentoWithAggregatesFilter = {
    equals?: Pagamento_metodo_pagamento
    in?: Enumerable<Pagamento_metodo_pagamento>
    notIn?: Enumerable<Pagamento_metodo_pagamento>
    not?: NestedEnumPagamento_metodo_pagamentoWithAggregatesFilter | Pagamento_metodo_pagamento
    _count?: NestedIntFilter
    _min?: NestedEnumPagamento_metodo_pagamentoFilter
    _max?: NestedEnumPagamento_metodo_pagamentoFilter
  }

  export type NestedEnumPagamento_estadoNullableWithAggregatesFilter = {
    equals?: Pagamento_estado | null
    in?: Enumerable<Pagamento_estado> | null
    notIn?: Enumerable<Pagamento_estado> | null
    not?: NestedEnumPagamento_estadoNullableWithAggregatesFilter | Pagamento_estado | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumPagamento_estadoNullableFilter
    _max?: NestedEnumPagamento_estadoNullableFilter
  }

  export type AnuncioCreateWithoutAdministradorInput = {
    cargo: string
    descricao: string
    data_publicacao?: Date | string | null
    Evento: EventoCreateNestedOneWithoutAnuncioInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoCreateNestedManyWithoutAnuncioInput
  }

  export type AnuncioUncheckedCreateWithoutAdministradorInput = {
    id?: number
    cargo: string
    descricao: string
    data_publicacao?: Date | string | null
    id_evento: number
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedCreateNestedManyWithoutAnuncioInput
  }

  export type AnuncioCreateOrConnectWithoutAdministradorInput = {
    where: AnuncioWhereUniqueInput
    create: XOR<AnuncioCreateWithoutAdministradorInput, AnuncioUncheckedCreateWithoutAdministradorInput>
  }

  export type AnuncioCreateManyAdministradorInputEnvelope = {
    data: Enumerable<AnuncioCreateManyAdministradorInput>
    skipDuplicates?: boolean
  }

  export type EventoCreateWithoutAdministradorInput = {
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    Anuncio?: AnuncioCreateNestedManyWithoutEventoInput
    AvaliacaoEvento?: AvaliacaoEventoCreateNestedManyWithoutEventoInput
    CategoriaEvento: CategoriaEventoCreateNestedOneWithoutEventoInput
    Rifa?: RifaCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutAdministradorInput = {
    id?: number
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    id_categoria: number
    Anuncio?: AnuncioUncheckedCreateNestedManyWithoutEventoInput
    AvaliacaoEvento?: AvaliacaoEventoUncheckedCreateNestedManyWithoutEventoInput
    Rifa?: RifaUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutAdministradorInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutAdministradorInput, EventoUncheckedCreateWithoutAdministradorInput>
  }

  export type EventoCreateManyAdministradorInputEnvelope = {
    data: Enumerable<EventoCreateManyAdministradorInput>
    skipDuplicates?: boolean
  }

  export type MensagemSuporteCreateWithoutAdministradorInput = {
    mensagem: string
    data_abertura?: Date | string | null
    data_encerramento?: Date | string | null
    estado?: MensagemSuporte_estado | null
    Utilizador: UtilizadorCreateNestedOneWithoutMensagemSuporteInput
  }

  export type MensagemSuporteUncheckedCreateWithoutAdministradorInput = {
    id?: number
    id_utilizador: number
    mensagem: string
    data_abertura?: Date | string | null
    data_encerramento?: Date | string | null
    estado?: MensagemSuporte_estado | null
  }

  export type MensagemSuporteCreateOrConnectWithoutAdministradorInput = {
    where: MensagemSuporteWhereUniqueInput
    create: XOR<MensagemSuporteCreateWithoutAdministradorInput, MensagemSuporteUncheckedCreateWithoutAdministradorInput>
  }

  export type MensagemSuporteCreateManyAdministradorInputEnvelope = {
    data: Enumerable<MensagemSuporteCreateManyAdministradorInput>
    skipDuplicates?: boolean
  }

  export type NotificacaoCreateWithoutAdministradorInput = {
    mensagem: string
    data_envio?: Date | string | null
    estado?: Notificacao_estado | null
    Utilizador: UtilizadorCreateNestedOneWithoutNotificacaoInput
  }

  export type NotificacaoUncheckedCreateWithoutAdministradorInput = {
    id?: number
    id_utilizador: number
    mensagem: string
    data_envio?: Date | string | null
    estado?: Notificacao_estado | null
  }

  export type NotificacaoCreateOrConnectWithoutAdministradorInput = {
    where: NotificacaoWhereUniqueInput
    create: XOR<NotificacaoCreateWithoutAdministradorInput, NotificacaoUncheckedCreateWithoutAdministradorInput>
  }

  export type NotificacaoCreateManyAdministradorInputEnvelope = {
    data: Enumerable<NotificacaoCreateManyAdministradorInput>
    skipDuplicates?: boolean
  }

  export type RifaCreateWithoutAdministradorInput = {
    nome: string
    preco: Decimal | DecimalJsLike | number | string
    quantidade: number
    descricao: string
    premio: string
    data_sorteio: Date | string
    CompraRifa?: CompraRifaCreateNestedManyWithoutRifaInput
    Evento: EventoCreateNestedOneWithoutRifaInput
  }

  export type RifaUncheckedCreateWithoutAdministradorInput = {
    id?: number
    nome: string
    preco: Decimal | DecimalJsLike | number | string
    quantidade: number
    descricao: string
    premio: string
    data_sorteio: Date | string
    id_evento: number
    CompraRifa?: CompraRifaUncheckedCreateNestedManyWithoutRifaInput
  }

  export type RifaCreateOrConnectWithoutAdministradorInput = {
    where: RifaWhereUniqueInput
    create: XOR<RifaCreateWithoutAdministradorInput, RifaUncheckedCreateWithoutAdministradorInput>
  }

  export type RifaCreateManyAdministradorInputEnvelope = {
    data: Enumerable<RifaCreateManyAdministradorInput>
    skipDuplicates?: boolean
  }

  export type AnuncioUpsertWithWhereUniqueWithoutAdministradorInput = {
    where: AnuncioWhereUniqueInput
    update: XOR<AnuncioUpdateWithoutAdministradorInput, AnuncioUncheckedUpdateWithoutAdministradorInput>
    create: XOR<AnuncioCreateWithoutAdministradorInput, AnuncioUncheckedCreateWithoutAdministradorInput>
  }

  export type AnuncioUpdateWithWhereUniqueWithoutAdministradorInput = {
    where: AnuncioWhereUniqueInput
    data: XOR<AnuncioUpdateWithoutAdministradorInput, AnuncioUncheckedUpdateWithoutAdministradorInput>
  }

  export type AnuncioUpdateManyWithWhereWithoutAdministradorInput = {
    where: AnuncioScalarWhereInput
    data: XOR<AnuncioUpdateManyMutationInput, AnuncioUncheckedUpdateManyWithoutAnuncioInput>
  }

  export type AnuncioScalarWhereInput = {
    AND?: Enumerable<AnuncioScalarWhereInput>
    OR?: Enumerable<AnuncioScalarWhereInput>
    NOT?: Enumerable<AnuncioScalarWhereInput>
    id?: IntFilter | number
    cargo?: StringFilter | string
    descricao?: StringFilter | string
    data_publicacao?: DateTimeNullableFilter | Date | string | null
    id_administrador?: IntFilter | number
    id_evento?: IntFilter | number
  }

  export type EventoUpsertWithWhereUniqueWithoutAdministradorInput = {
    where: EventoWhereUniqueInput
    update: XOR<EventoUpdateWithoutAdministradorInput, EventoUncheckedUpdateWithoutAdministradorInput>
    create: XOR<EventoCreateWithoutAdministradorInput, EventoUncheckedCreateWithoutAdministradorInput>
  }

  export type EventoUpdateWithWhereUniqueWithoutAdministradorInput = {
    where: EventoWhereUniqueInput
    data: XOR<EventoUpdateWithoutAdministradorInput, EventoUncheckedUpdateWithoutAdministradorInput>
  }

  export type EventoUpdateManyWithWhereWithoutAdministradorInput = {
    where: EventoScalarWhereInput
    data: XOR<EventoUpdateManyMutationInput, EventoUncheckedUpdateManyWithoutEventoInput>
  }

  export type EventoScalarWhereInput = {
    AND?: Enumerable<EventoScalarWhereInput>
    OR?: Enumerable<EventoScalarWhereInput>
    NOT?: Enumerable<EventoScalarWhereInput>
    id?: IntFilter | number
    titulo?: StringFilter | string
    localizacao?: StringFilter | string
    descricao?: StringNullableFilter | string | null
    data_evento?: DateTimeFilter | Date | string
    fotografia?: StringFilter | string
    estado?: EnumEvento_estadoNullableFilter | Evento_estado | null
    id_administrador?: IntFilter | number
    id_categoria?: IntFilter | number
  }

  export type MensagemSuporteUpsertWithWhereUniqueWithoutAdministradorInput = {
    where: MensagemSuporteWhereUniqueInput
    update: XOR<MensagemSuporteUpdateWithoutAdministradorInput, MensagemSuporteUncheckedUpdateWithoutAdministradorInput>
    create: XOR<MensagemSuporteCreateWithoutAdministradorInput, MensagemSuporteUncheckedCreateWithoutAdministradorInput>
  }

  export type MensagemSuporteUpdateWithWhereUniqueWithoutAdministradorInput = {
    where: MensagemSuporteWhereUniqueInput
    data: XOR<MensagemSuporteUpdateWithoutAdministradorInput, MensagemSuporteUncheckedUpdateWithoutAdministradorInput>
  }

  export type MensagemSuporteUpdateManyWithWhereWithoutAdministradorInput = {
    where: MensagemSuporteScalarWhereInput
    data: XOR<MensagemSuporteUpdateManyMutationInput, MensagemSuporteUncheckedUpdateManyWithoutMensagemSuporteInput>
  }

  export type MensagemSuporteScalarWhereInput = {
    AND?: Enumerable<MensagemSuporteScalarWhereInput>
    OR?: Enumerable<MensagemSuporteScalarWhereInput>
    NOT?: Enumerable<MensagemSuporteScalarWhereInput>
    id?: IntFilter | number
    id_utilizador?: IntFilter | number
    id_administrador?: IntFilter | number
    mensagem?: StringFilter | string
    data_abertura?: DateTimeNullableFilter | Date | string | null
    data_encerramento?: DateTimeNullableFilter | Date | string | null
    estado?: EnumMensagemSuporte_estadoNullableFilter | MensagemSuporte_estado | null
  }

  export type NotificacaoUpsertWithWhereUniqueWithoutAdministradorInput = {
    where: NotificacaoWhereUniqueInput
    update: XOR<NotificacaoUpdateWithoutAdministradorInput, NotificacaoUncheckedUpdateWithoutAdministradorInput>
    create: XOR<NotificacaoCreateWithoutAdministradorInput, NotificacaoUncheckedCreateWithoutAdministradorInput>
  }

  export type NotificacaoUpdateWithWhereUniqueWithoutAdministradorInput = {
    where: NotificacaoWhereUniqueInput
    data: XOR<NotificacaoUpdateWithoutAdministradorInput, NotificacaoUncheckedUpdateWithoutAdministradorInput>
  }

  export type NotificacaoUpdateManyWithWhereWithoutAdministradorInput = {
    where: NotificacaoScalarWhereInput
    data: XOR<NotificacaoUpdateManyMutationInput, NotificacaoUncheckedUpdateManyWithoutNotificacaoInput>
  }

  export type NotificacaoScalarWhereInput = {
    AND?: Enumerable<NotificacaoScalarWhereInput>
    OR?: Enumerable<NotificacaoScalarWhereInput>
    NOT?: Enumerable<NotificacaoScalarWhereInput>
    id?: IntFilter | number
    id_utilizador?: IntFilter | number
    id_administrador?: IntFilter | number
    mensagem?: StringFilter | string
    data_envio?: DateTimeNullableFilter | Date | string | null
    estado?: EnumNotificacao_estadoNullableFilter | Notificacao_estado | null
  }

  export type RifaUpsertWithWhereUniqueWithoutAdministradorInput = {
    where: RifaWhereUniqueInput
    update: XOR<RifaUpdateWithoutAdministradorInput, RifaUncheckedUpdateWithoutAdministradorInput>
    create: XOR<RifaCreateWithoutAdministradorInput, RifaUncheckedCreateWithoutAdministradorInput>
  }

  export type RifaUpdateWithWhereUniqueWithoutAdministradorInput = {
    where: RifaWhereUniqueInput
    data: XOR<RifaUpdateWithoutAdministradorInput, RifaUncheckedUpdateWithoutAdministradorInput>
  }

  export type RifaUpdateManyWithWhereWithoutAdministradorInput = {
    where: RifaScalarWhereInput
    data: XOR<RifaUpdateManyMutationInput, RifaUncheckedUpdateManyWithoutRifaInput>
  }

  export type RifaScalarWhereInput = {
    AND?: Enumerable<RifaScalarWhereInput>
    OR?: Enumerable<RifaScalarWhereInput>
    NOT?: Enumerable<RifaScalarWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    preco?: DecimalFilter | Decimal | DecimalJsLike | number | string
    quantidade?: IntFilter | number
    descricao?: StringFilter | string
    premio?: StringFilter | string
    data_sorteio?: DateTimeFilter | Date | string
    id_administrador?: IntFilter | number
    id_evento?: IntFilter | number
  }

  export type AdministradorCreateWithoutAnuncioInput = {
    username: string
    nome: string
    email: string
    password_hash: string
    Evento?: EventoCreateNestedManyWithoutAdministradorInput
    MensagemSuporte?: MensagemSuporteCreateNestedManyWithoutAdministradorInput
    Notificacao?: NotificacaoCreateNestedManyWithoutAdministradorInput
    Rifa?: RifaCreateNestedManyWithoutAdministradorInput
  }

  export type AdministradorUncheckedCreateWithoutAnuncioInput = {
    id?: number
    username: string
    nome: string
    email: string
    password_hash: string
    Evento?: EventoUncheckedCreateNestedManyWithoutAdministradorInput
    MensagemSuporte?: MensagemSuporteUncheckedCreateNestedManyWithoutAdministradorInput
    Notificacao?: NotificacaoUncheckedCreateNestedManyWithoutAdministradorInput
    Rifa?: RifaUncheckedCreateNestedManyWithoutAdministradorInput
  }

  export type AdministradorCreateOrConnectWithoutAnuncioInput = {
    where: AdministradorWhereUniqueInput
    create: XOR<AdministradorCreateWithoutAnuncioInput, AdministradorUncheckedCreateWithoutAnuncioInput>
  }

  export type EventoCreateWithoutAnuncioInput = {
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    AvaliacaoEvento?: AvaliacaoEventoCreateNestedManyWithoutEventoInput
    Administrador: AdministradorCreateNestedOneWithoutEventoInput
    CategoriaEvento: CategoriaEventoCreateNestedOneWithoutEventoInput
    Rifa?: RifaCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutAnuncioInput = {
    id?: number
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    id_administrador: number
    id_categoria: number
    AvaliacaoEvento?: AvaliacaoEventoUncheckedCreateNestedManyWithoutEventoInput
    Rifa?: RifaUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutAnuncioInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutAnuncioInput, EventoUncheckedCreateWithoutAnuncioInput>
  }

  export type CandidaturaVoluntariadoCreateWithoutAnuncioInput = {
    estado?: CandidaturaVoluntariado_estado | null
    Utilizador: UtilizadorCreateNestedOneWithoutCandidaturaVoluntariadoInput
  }

  export type CandidaturaVoluntariadoUncheckedCreateWithoutAnuncioInput = {
    id?: number
    id_utilizador: number
    estado?: CandidaturaVoluntariado_estado | null
  }

  export type CandidaturaVoluntariadoCreateOrConnectWithoutAnuncioInput = {
    where: CandidaturaVoluntariadoWhereUniqueInput
    create: XOR<CandidaturaVoluntariadoCreateWithoutAnuncioInput, CandidaturaVoluntariadoUncheckedCreateWithoutAnuncioInput>
  }

  export type CandidaturaVoluntariadoCreateManyAnuncioInputEnvelope = {
    data: Enumerable<CandidaturaVoluntariadoCreateManyAnuncioInput>
    skipDuplicates?: boolean
  }

  export type AdministradorUpsertWithoutAnuncioInput = {
    update: XOR<AdministradorUpdateWithoutAnuncioInput, AdministradorUncheckedUpdateWithoutAnuncioInput>
    create: XOR<AdministradorCreateWithoutAnuncioInput, AdministradorUncheckedCreateWithoutAnuncioInput>
  }

  export type AdministradorUpdateWithoutAnuncioInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    Evento?: EventoUpdateManyWithoutAdministradorNestedInput
    MensagemSuporte?: MensagemSuporteUpdateManyWithoutAdministradorNestedInput
    Notificacao?: NotificacaoUpdateManyWithoutAdministradorNestedInput
    Rifa?: RifaUpdateManyWithoutAdministradorNestedInput
  }

  export type AdministradorUncheckedUpdateWithoutAnuncioInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    Evento?: EventoUncheckedUpdateManyWithoutAdministradorNestedInput
    MensagemSuporte?: MensagemSuporteUncheckedUpdateManyWithoutAdministradorNestedInput
    Notificacao?: NotificacaoUncheckedUpdateManyWithoutAdministradorNestedInput
    Rifa?: RifaUncheckedUpdateManyWithoutAdministradorNestedInput
  }

  export type EventoUpsertWithoutAnuncioInput = {
    update: XOR<EventoUpdateWithoutAnuncioInput, EventoUncheckedUpdateWithoutAnuncioInput>
    create: XOR<EventoCreateWithoutAnuncioInput, EventoUncheckedCreateWithoutAnuncioInput>
  }

  export type EventoUpdateWithoutAnuncioInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
    AvaliacaoEvento?: AvaliacaoEventoUpdateManyWithoutEventoNestedInput
    Administrador?: AdministradorUpdateOneRequiredWithoutEventoNestedInput
    CategoriaEvento?: CategoriaEventoUpdateOneRequiredWithoutEventoNestedInput
    Rifa?: RifaUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutAnuncioInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
    id_administrador?: IntFieldUpdateOperationsInput | number
    id_categoria?: IntFieldUpdateOperationsInput | number
    AvaliacaoEvento?: AvaliacaoEventoUncheckedUpdateManyWithoutEventoNestedInput
    Rifa?: RifaUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type CandidaturaVoluntariadoUpsertWithWhereUniqueWithoutAnuncioInput = {
    where: CandidaturaVoluntariadoWhereUniqueInput
    update: XOR<CandidaturaVoluntariadoUpdateWithoutAnuncioInput, CandidaturaVoluntariadoUncheckedUpdateWithoutAnuncioInput>
    create: XOR<CandidaturaVoluntariadoCreateWithoutAnuncioInput, CandidaturaVoluntariadoUncheckedCreateWithoutAnuncioInput>
  }

  export type CandidaturaVoluntariadoUpdateWithWhereUniqueWithoutAnuncioInput = {
    where: CandidaturaVoluntariadoWhereUniqueInput
    data: XOR<CandidaturaVoluntariadoUpdateWithoutAnuncioInput, CandidaturaVoluntariadoUncheckedUpdateWithoutAnuncioInput>
  }

  export type CandidaturaVoluntariadoUpdateManyWithWhereWithoutAnuncioInput = {
    where: CandidaturaVoluntariadoScalarWhereInput
    data: XOR<CandidaturaVoluntariadoUpdateManyMutationInput, CandidaturaVoluntariadoUncheckedUpdateManyWithoutCandidaturaVoluntariadoInput>
  }

  export type CandidaturaVoluntariadoScalarWhereInput = {
    AND?: Enumerable<CandidaturaVoluntariadoScalarWhereInput>
    OR?: Enumerable<CandidaturaVoluntariadoScalarWhereInput>
    NOT?: Enumerable<CandidaturaVoluntariadoScalarWhereInput>
    id?: IntFilter | number
    id_utilizador?: IntFilter | number
    id_anuncio?: IntFilter | number
    estado?: EnumCandidaturaVoluntariado_estadoNullableFilter | CandidaturaVoluntariado_estado | null
  }

  export type UtilizadorCreateWithoutAvaliacaoEventoInput = {
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    CandidaturaVoluntariado?: CandidaturaVoluntariadoCreateNestedManyWithoutUtilizadorInput
    CompraRifa?: CompraRifaCreateNestedManyWithoutUtilizadorInput
    Doacao?: DoacaoCreateNestedManyWithoutUtilizadorInput
    MensagemSuporte?: MensagemSuporteCreateNestedManyWithoutUtilizadorInput
    Notificacao?: NotificacaoCreateNestedManyWithoutUtilizadorInput
    Pagamento?: PagamentoCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUncheckedCreateWithoutAvaliacaoEventoInput = {
    id?: number
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedCreateNestedManyWithoutUtilizadorInput
    CompraRifa?: CompraRifaUncheckedCreateNestedManyWithoutUtilizadorInput
    Doacao?: DoacaoUncheckedCreateNestedManyWithoutUtilizadorInput
    MensagemSuporte?: MensagemSuporteUncheckedCreateNestedManyWithoutUtilizadorInput
    Notificacao?: NotificacaoUncheckedCreateNestedManyWithoutUtilizadorInput
    Pagamento?: PagamentoUncheckedCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorCreateOrConnectWithoutAvaliacaoEventoInput = {
    where: UtilizadorWhereUniqueInput
    create: XOR<UtilizadorCreateWithoutAvaliacaoEventoInput, UtilizadorUncheckedCreateWithoutAvaliacaoEventoInput>
  }

  export type EventoCreateWithoutAvaliacaoEventoInput = {
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    Anuncio?: AnuncioCreateNestedManyWithoutEventoInput
    Administrador: AdministradorCreateNestedOneWithoutEventoInput
    CategoriaEvento: CategoriaEventoCreateNestedOneWithoutEventoInput
    Rifa?: RifaCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutAvaliacaoEventoInput = {
    id?: number
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    id_administrador: number
    id_categoria: number
    Anuncio?: AnuncioUncheckedCreateNestedManyWithoutEventoInput
    Rifa?: RifaUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutAvaliacaoEventoInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutAvaliacaoEventoInput, EventoUncheckedCreateWithoutAvaliacaoEventoInput>
  }

  export type UtilizadorUpsertWithoutAvaliacaoEventoInput = {
    update: XOR<UtilizadorUpdateWithoutAvaliacaoEventoInput, UtilizadorUncheckedUpdateWithoutAvaliacaoEventoInput>
    create: XOR<UtilizadorCreateWithoutAvaliacaoEventoInput, UtilizadorUncheckedCreateWithoutAvaliacaoEventoInput>
  }

  export type UtilizadorUpdateWithoutAvaliacaoEventoInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUpdateManyWithoutUtilizadorNestedInput
    CompraRifa?: CompraRifaUpdateManyWithoutUtilizadorNestedInput
    Doacao?: DoacaoUpdateManyWithoutUtilizadorNestedInput
    MensagemSuporte?: MensagemSuporteUpdateManyWithoutUtilizadorNestedInput
    Notificacao?: NotificacaoUpdateManyWithoutUtilizadorNestedInput
    Pagamento?: PagamentoUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorUncheckedUpdateWithoutAvaliacaoEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedUpdateManyWithoutUtilizadorNestedInput
    CompraRifa?: CompraRifaUncheckedUpdateManyWithoutUtilizadorNestedInput
    Doacao?: DoacaoUncheckedUpdateManyWithoutUtilizadorNestedInput
    MensagemSuporte?: MensagemSuporteUncheckedUpdateManyWithoutUtilizadorNestedInput
    Notificacao?: NotificacaoUncheckedUpdateManyWithoutUtilizadorNestedInput
    Pagamento?: PagamentoUncheckedUpdateManyWithoutUtilizadorNestedInput
  }

  export type EventoUpsertWithoutAvaliacaoEventoInput = {
    update: XOR<EventoUpdateWithoutAvaliacaoEventoInput, EventoUncheckedUpdateWithoutAvaliacaoEventoInput>
    create: XOR<EventoCreateWithoutAvaliacaoEventoInput, EventoUncheckedCreateWithoutAvaliacaoEventoInput>
  }

  export type EventoUpdateWithoutAvaliacaoEventoInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
    Anuncio?: AnuncioUpdateManyWithoutEventoNestedInput
    Administrador?: AdministradorUpdateOneRequiredWithoutEventoNestedInput
    CategoriaEvento?: CategoriaEventoUpdateOneRequiredWithoutEventoNestedInput
    Rifa?: RifaUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutAvaliacaoEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
    id_administrador?: IntFieldUpdateOperationsInput | number
    id_categoria?: IntFieldUpdateOperationsInput | number
    Anuncio?: AnuncioUncheckedUpdateManyWithoutEventoNestedInput
    Rifa?: RifaUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type UtilizadorCreateWithoutCandidaturaVoluntariadoInput = {
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    AvaliacaoEvento?: AvaliacaoEventoCreateNestedManyWithoutUtilizadorInput
    CompraRifa?: CompraRifaCreateNestedManyWithoutUtilizadorInput
    Doacao?: DoacaoCreateNestedManyWithoutUtilizadorInput
    MensagemSuporte?: MensagemSuporteCreateNestedManyWithoutUtilizadorInput
    Notificacao?: NotificacaoCreateNestedManyWithoutUtilizadorInput
    Pagamento?: PagamentoCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUncheckedCreateWithoutCandidaturaVoluntariadoInput = {
    id?: number
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    AvaliacaoEvento?: AvaliacaoEventoUncheckedCreateNestedManyWithoutUtilizadorInput
    CompraRifa?: CompraRifaUncheckedCreateNestedManyWithoutUtilizadorInput
    Doacao?: DoacaoUncheckedCreateNestedManyWithoutUtilizadorInput
    MensagemSuporte?: MensagemSuporteUncheckedCreateNestedManyWithoutUtilizadorInput
    Notificacao?: NotificacaoUncheckedCreateNestedManyWithoutUtilizadorInput
    Pagamento?: PagamentoUncheckedCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorCreateOrConnectWithoutCandidaturaVoluntariadoInput = {
    where: UtilizadorWhereUniqueInput
    create: XOR<UtilizadorCreateWithoutCandidaturaVoluntariadoInput, UtilizadorUncheckedCreateWithoutCandidaturaVoluntariadoInput>
  }

  export type AnuncioCreateWithoutCandidaturaVoluntariadoInput = {
    cargo: string
    descricao: string
    data_publicacao?: Date | string | null
    Administrador: AdministradorCreateNestedOneWithoutAnuncioInput
    Evento: EventoCreateNestedOneWithoutAnuncioInput
  }

  export type AnuncioUncheckedCreateWithoutCandidaturaVoluntariadoInput = {
    id?: number
    cargo: string
    descricao: string
    data_publicacao?: Date | string | null
    id_administrador: number
    id_evento: number
  }

  export type AnuncioCreateOrConnectWithoutCandidaturaVoluntariadoInput = {
    where: AnuncioWhereUniqueInput
    create: XOR<AnuncioCreateWithoutCandidaturaVoluntariadoInput, AnuncioUncheckedCreateWithoutCandidaturaVoluntariadoInput>
  }

  export type UtilizadorUpsertWithoutCandidaturaVoluntariadoInput = {
    update: XOR<UtilizadorUpdateWithoutCandidaturaVoluntariadoInput, UtilizadorUncheckedUpdateWithoutCandidaturaVoluntariadoInput>
    create: XOR<UtilizadorCreateWithoutCandidaturaVoluntariadoInput, UtilizadorUncheckedCreateWithoutCandidaturaVoluntariadoInput>
  }

  export type UtilizadorUpdateWithoutCandidaturaVoluntariadoInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    AvaliacaoEvento?: AvaliacaoEventoUpdateManyWithoutUtilizadorNestedInput
    CompraRifa?: CompraRifaUpdateManyWithoutUtilizadorNestedInput
    Doacao?: DoacaoUpdateManyWithoutUtilizadorNestedInput
    MensagemSuporte?: MensagemSuporteUpdateManyWithoutUtilizadorNestedInput
    Notificacao?: NotificacaoUpdateManyWithoutUtilizadorNestedInput
    Pagamento?: PagamentoUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorUncheckedUpdateWithoutCandidaturaVoluntariadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    AvaliacaoEvento?: AvaliacaoEventoUncheckedUpdateManyWithoutUtilizadorNestedInput
    CompraRifa?: CompraRifaUncheckedUpdateManyWithoutUtilizadorNestedInput
    Doacao?: DoacaoUncheckedUpdateManyWithoutUtilizadorNestedInput
    MensagemSuporte?: MensagemSuporteUncheckedUpdateManyWithoutUtilizadorNestedInput
    Notificacao?: NotificacaoUncheckedUpdateManyWithoutUtilizadorNestedInput
    Pagamento?: PagamentoUncheckedUpdateManyWithoutUtilizadorNestedInput
  }

  export type AnuncioUpsertWithoutCandidaturaVoluntariadoInput = {
    update: XOR<AnuncioUpdateWithoutCandidaturaVoluntariadoInput, AnuncioUncheckedUpdateWithoutCandidaturaVoluntariadoInput>
    create: XOR<AnuncioCreateWithoutCandidaturaVoluntariadoInput, AnuncioUncheckedCreateWithoutCandidaturaVoluntariadoInput>
  }

  export type AnuncioUpdateWithoutCandidaturaVoluntariadoInput = {
    cargo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data_publicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Administrador?: AdministradorUpdateOneRequiredWithoutAnuncioNestedInput
    Evento?: EventoUpdateOneRequiredWithoutAnuncioNestedInput
  }

  export type AnuncioUncheckedUpdateWithoutCandidaturaVoluntariadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    cargo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data_publicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_administrador?: IntFieldUpdateOperationsInput | number
    id_evento?: IntFieldUpdateOperationsInput | number
  }

  export type EventoCreateWithoutCategoriaEventoInput = {
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    Anuncio?: AnuncioCreateNestedManyWithoutEventoInput
    AvaliacaoEvento?: AvaliacaoEventoCreateNestedManyWithoutEventoInput
    Administrador: AdministradorCreateNestedOneWithoutEventoInput
    Rifa?: RifaCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutCategoriaEventoInput = {
    id?: number
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    id_administrador: number
    Anuncio?: AnuncioUncheckedCreateNestedManyWithoutEventoInput
    AvaliacaoEvento?: AvaliacaoEventoUncheckedCreateNestedManyWithoutEventoInput
    Rifa?: RifaUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutCategoriaEventoInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutCategoriaEventoInput, EventoUncheckedCreateWithoutCategoriaEventoInput>
  }

  export type EventoCreateManyCategoriaEventoInputEnvelope = {
    data: Enumerable<EventoCreateManyCategoriaEventoInput>
    skipDuplicates?: boolean
  }

  export type EventoUpsertWithWhereUniqueWithoutCategoriaEventoInput = {
    where: EventoWhereUniqueInput
    update: XOR<EventoUpdateWithoutCategoriaEventoInput, EventoUncheckedUpdateWithoutCategoriaEventoInput>
    create: XOR<EventoCreateWithoutCategoriaEventoInput, EventoUncheckedCreateWithoutCategoriaEventoInput>
  }

  export type EventoUpdateWithWhereUniqueWithoutCategoriaEventoInput = {
    where: EventoWhereUniqueInput
    data: XOR<EventoUpdateWithoutCategoriaEventoInput, EventoUncheckedUpdateWithoutCategoriaEventoInput>
  }

  export type EventoUpdateManyWithWhereWithoutCategoriaEventoInput = {
    where: EventoScalarWhereInput
    data: XOR<EventoUpdateManyMutationInput, EventoUncheckedUpdateManyWithoutEventoInput>
  }

  export type UtilizadorCreateWithoutCompraRifaInput = {
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    AvaliacaoEvento?: AvaliacaoEventoCreateNestedManyWithoutUtilizadorInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoCreateNestedManyWithoutUtilizadorInput
    Doacao?: DoacaoCreateNestedManyWithoutUtilizadorInput
    MensagemSuporte?: MensagemSuporteCreateNestedManyWithoutUtilizadorInput
    Notificacao?: NotificacaoCreateNestedManyWithoutUtilizadorInput
    Pagamento?: PagamentoCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUncheckedCreateWithoutCompraRifaInput = {
    id?: number
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    AvaliacaoEvento?: AvaliacaoEventoUncheckedCreateNestedManyWithoutUtilizadorInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedCreateNestedManyWithoutUtilizadorInput
    Doacao?: DoacaoUncheckedCreateNestedManyWithoutUtilizadorInput
    MensagemSuporte?: MensagemSuporteUncheckedCreateNestedManyWithoutUtilizadorInput
    Notificacao?: NotificacaoUncheckedCreateNestedManyWithoutUtilizadorInput
    Pagamento?: PagamentoUncheckedCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorCreateOrConnectWithoutCompraRifaInput = {
    where: UtilizadorWhereUniqueInput
    create: XOR<UtilizadorCreateWithoutCompraRifaInput, UtilizadorUncheckedCreateWithoutCompraRifaInput>
  }

  export type RifaCreateWithoutCompraRifaInput = {
    nome: string
    preco: Decimal | DecimalJsLike | number | string
    quantidade: number
    descricao: string
    premio: string
    data_sorteio: Date | string
    Administrador: AdministradorCreateNestedOneWithoutRifaInput
    Evento: EventoCreateNestedOneWithoutRifaInput
  }

  export type RifaUncheckedCreateWithoutCompraRifaInput = {
    id?: number
    nome: string
    preco: Decimal | DecimalJsLike | number | string
    quantidade: number
    descricao: string
    premio: string
    data_sorteio: Date | string
    id_administrador: number
    id_evento: number
  }

  export type RifaCreateOrConnectWithoutCompraRifaInput = {
    where: RifaWhereUniqueInput
    create: XOR<RifaCreateWithoutCompraRifaInput, RifaUncheckedCreateWithoutCompraRifaInput>
  }

  export type UtilizadorUpsertWithoutCompraRifaInput = {
    update: XOR<UtilizadorUpdateWithoutCompraRifaInput, UtilizadorUncheckedUpdateWithoutCompraRifaInput>
    create: XOR<UtilizadorCreateWithoutCompraRifaInput, UtilizadorUncheckedCreateWithoutCompraRifaInput>
  }

  export type UtilizadorUpdateWithoutCompraRifaInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    AvaliacaoEvento?: AvaliacaoEventoUpdateManyWithoutUtilizadorNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUpdateManyWithoutUtilizadorNestedInput
    Doacao?: DoacaoUpdateManyWithoutUtilizadorNestedInput
    MensagemSuporte?: MensagemSuporteUpdateManyWithoutUtilizadorNestedInput
    Notificacao?: NotificacaoUpdateManyWithoutUtilizadorNestedInput
    Pagamento?: PagamentoUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorUncheckedUpdateWithoutCompraRifaInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    AvaliacaoEvento?: AvaliacaoEventoUncheckedUpdateManyWithoutUtilizadorNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedUpdateManyWithoutUtilizadorNestedInput
    Doacao?: DoacaoUncheckedUpdateManyWithoutUtilizadorNestedInput
    MensagemSuporte?: MensagemSuporteUncheckedUpdateManyWithoutUtilizadorNestedInput
    Notificacao?: NotificacaoUncheckedUpdateManyWithoutUtilizadorNestedInput
    Pagamento?: PagamentoUncheckedUpdateManyWithoutUtilizadorNestedInput
  }

  export type RifaUpsertWithoutCompraRifaInput = {
    update: XOR<RifaUpdateWithoutCompraRifaInput, RifaUncheckedUpdateWithoutCompraRifaInput>
    create: XOR<RifaCreateWithoutCompraRifaInput, RifaUncheckedCreateWithoutCompraRifaInput>
  }

  export type RifaUpdateWithoutCompraRifaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    premio?: StringFieldUpdateOperationsInput | string
    data_sorteio?: DateTimeFieldUpdateOperationsInput | Date | string
    Administrador?: AdministradorUpdateOneRequiredWithoutRifaNestedInput
    Evento?: EventoUpdateOneRequiredWithoutRifaNestedInput
  }

  export type RifaUncheckedUpdateWithoutCompraRifaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    premio?: StringFieldUpdateOperationsInput | string
    data_sorteio?: DateTimeFieldUpdateOperationsInput | Date | string
    id_administrador?: IntFieldUpdateOperationsInput | number
    id_evento?: IntFieldUpdateOperationsInput | number
  }

  export type UtilizadorCreateWithoutDoacaoInput = {
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    AvaliacaoEvento?: AvaliacaoEventoCreateNestedManyWithoutUtilizadorInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoCreateNestedManyWithoutUtilizadorInput
    CompraRifa?: CompraRifaCreateNestedManyWithoutUtilizadorInput
    MensagemSuporte?: MensagemSuporteCreateNestedManyWithoutUtilizadorInput
    Notificacao?: NotificacaoCreateNestedManyWithoutUtilizadorInput
    Pagamento?: PagamentoCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUncheckedCreateWithoutDoacaoInput = {
    id?: number
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    AvaliacaoEvento?: AvaliacaoEventoUncheckedCreateNestedManyWithoutUtilizadorInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedCreateNestedManyWithoutUtilizadorInput
    CompraRifa?: CompraRifaUncheckedCreateNestedManyWithoutUtilizadorInput
    MensagemSuporte?: MensagemSuporteUncheckedCreateNestedManyWithoutUtilizadorInput
    Notificacao?: NotificacaoUncheckedCreateNestedManyWithoutUtilizadorInput
    Pagamento?: PagamentoUncheckedCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorCreateOrConnectWithoutDoacaoInput = {
    where: UtilizadorWhereUniqueInput
    create: XOR<UtilizadorCreateWithoutDoacaoInput, UtilizadorUncheckedCreateWithoutDoacaoInput>
  }

  export type UtilizadorUpsertWithoutDoacaoInput = {
    update: XOR<UtilizadorUpdateWithoutDoacaoInput, UtilizadorUncheckedUpdateWithoutDoacaoInput>
    create: XOR<UtilizadorCreateWithoutDoacaoInput, UtilizadorUncheckedCreateWithoutDoacaoInput>
  }

  export type UtilizadorUpdateWithoutDoacaoInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    AvaliacaoEvento?: AvaliacaoEventoUpdateManyWithoutUtilizadorNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUpdateManyWithoutUtilizadorNestedInput
    CompraRifa?: CompraRifaUpdateManyWithoutUtilizadorNestedInput
    MensagemSuporte?: MensagemSuporteUpdateManyWithoutUtilizadorNestedInput
    Notificacao?: NotificacaoUpdateManyWithoutUtilizadorNestedInput
    Pagamento?: PagamentoUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorUncheckedUpdateWithoutDoacaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    AvaliacaoEvento?: AvaliacaoEventoUncheckedUpdateManyWithoutUtilizadorNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedUpdateManyWithoutUtilizadorNestedInput
    CompraRifa?: CompraRifaUncheckedUpdateManyWithoutUtilizadorNestedInput
    MensagemSuporte?: MensagemSuporteUncheckedUpdateManyWithoutUtilizadorNestedInput
    Notificacao?: NotificacaoUncheckedUpdateManyWithoutUtilizadorNestedInput
    Pagamento?: PagamentoUncheckedUpdateManyWithoutUtilizadorNestedInput
  }

  export type AnuncioCreateWithoutEventoInput = {
    cargo: string
    descricao: string
    data_publicacao?: Date | string | null
    Administrador: AdministradorCreateNestedOneWithoutAnuncioInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoCreateNestedManyWithoutAnuncioInput
  }

  export type AnuncioUncheckedCreateWithoutEventoInput = {
    id?: number
    cargo: string
    descricao: string
    data_publicacao?: Date | string | null
    id_administrador: number
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedCreateNestedManyWithoutAnuncioInput
  }

  export type AnuncioCreateOrConnectWithoutEventoInput = {
    where: AnuncioWhereUniqueInput
    create: XOR<AnuncioCreateWithoutEventoInput, AnuncioUncheckedCreateWithoutEventoInput>
  }

  export type AnuncioCreateManyEventoInputEnvelope = {
    data: Enumerable<AnuncioCreateManyEventoInput>
    skipDuplicates?: boolean
  }

  export type AvaliacaoEventoCreateWithoutEventoInput = {
    nota?: number | null
    data_avaliacao?: Date | string | null
    Utilizador: UtilizadorCreateNestedOneWithoutAvaliacaoEventoInput
  }

  export type AvaliacaoEventoUncheckedCreateWithoutEventoInput = {
    id?: number
    id_utilizador: number
    nota?: number | null
    data_avaliacao?: Date | string | null
  }

  export type AvaliacaoEventoCreateOrConnectWithoutEventoInput = {
    where: AvaliacaoEventoWhereUniqueInput
    create: XOR<AvaliacaoEventoCreateWithoutEventoInput, AvaliacaoEventoUncheckedCreateWithoutEventoInput>
  }

  export type AvaliacaoEventoCreateManyEventoInputEnvelope = {
    data: Enumerable<AvaliacaoEventoCreateManyEventoInput>
    skipDuplicates?: boolean
  }

  export type AdministradorCreateWithoutEventoInput = {
    username: string
    nome: string
    email: string
    password_hash: string
    Anuncio?: AnuncioCreateNestedManyWithoutAdministradorInput
    MensagemSuporte?: MensagemSuporteCreateNestedManyWithoutAdministradorInput
    Notificacao?: NotificacaoCreateNestedManyWithoutAdministradorInput
    Rifa?: RifaCreateNestedManyWithoutAdministradorInput
  }

  export type AdministradorUncheckedCreateWithoutEventoInput = {
    id?: number
    username: string
    nome: string
    email: string
    password_hash: string
    Anuncio?: AnuncioUncheckedCreateNestedManyWithoutAdministradorInput
    MensagemSuporte?: MensagemSuporteUncheckedCreateNestedManyWithoutAdministradorInput
    Notificacao?: NotificacaoUncheckedCreateNestedManyWithoutAdministradorInput
    Rifa?: RifaUncheckedCreateNestedManyWithoutAdministradorInput
  }

  export type AdministradorCreateOrConnectWithoutEventoInput = {
    where: AdministradorWhereUniqueInput
    create: XOR<AdministradorCreateWithoutEventoInput, AdministradorUncheckedCreateWithoutEventoInput>
  }

  export type CategoriaEventoCreateWithoutEventoInput = {
    nome: string
  }

  export type CategoriaEventoUncheckedCreateWithoutEventoInput = {
    id?: number
    nome: string
  }

  export type CategoriaEventoCreateOrConnectWithoutEventoInput = {
    where: CategoriaEventoWhereUniqueInput
    create: XOR<CategoriaEventoCreateWithoutEventoInput, CategoriaEventoUncheckedCreateWithoutEventoInput>
  }

  export type RifaCreateWithoutEventoInput = {
    nome: string
    preco: Decimal | DecimalJsLike | number | string
    quantidade: number
    descricao: string
    premio: string
    data_sorteio: Date | string
    CompraRifa?: CompraRifaCreateNestedManyWithoutRifaInput
    Administrador: AdministradorCreateNestedOneWithoutRifaInput
  }

  export type RifaUncheckedCreateWithoutEventoInput = {
    id?: number
    nome: string
    preco: Decimal | DecimalJsLike | number | string
    quantidade: number
    descricao: string
    premio: string
    data_sorteio: Date | string
    id_administrador: number
    CompraRifa?: CompraRifaUncheckedCreateNestedManyWithoutRifaInput
  }

  export type RifaCreateOrConnectWithoutEventoInput = {
    where: RifaWhereUniqueInput
    create: XOR<RifaCreateWithoutEventoInput, RifaUncheckedCreateWithoutEventoInput>
  }

  export type RifaCreateManyEventoInputEnvelope = {
    data: Enumerable<RifaCreateManyEventoInput>
    skipDuplicates?: boolean
  }

  export type AnuncioUpsertWithWhereUniqueWithoutEventoInput = {
    where: AnuncioWhereUniqueInput
    update: XOR<AnuncioUpdateWithoutEventoInput, AnuncioUncheckedUpdateWithoutEventoInput>
    create: XOR<AnuncioCreateWithoutEventoInput, AnuncioUncheckedCreateWithoutEventoInput>
  }

  export type AnuncioUpdateWithWhereUniqueWithoutEventoInput = {
    where: AnuncioWhereUniqueInput
    data: XOR<AnuncioUpdateWithoutEventoInput, AnuncioUncheckedUpdateWithoutEventoInput>
  }

  export type AnuncioUpdateManyWithWhereWithoutEventoInput = {
    where: AnuncioScalarWhereInput
    data: XOR<AnuncioUpdateManyMutationInput, AnuncioUncheckedUpdateManyWithoutAnuncioInput>
  }

  export type AvaliacaoEventoUpsertWithWhereUniqueWithoutEventoInput = {
    where: AvaliacaoEventoWhereUniqueInput
    update: XOR<AvaliacaoEventoUpdateWithoutEventoInput, AvaliacaoEventoUncheckedUpdateWithoutEventoInput>
    create: XOR<AvaliacaoEventoCreateWithoutEventoInput, AvaliacaoEventoUncheckedCreateWithoutEventoInput>
  }

  export type AvaliacaoEventoUpdateWithWhereUniqueWithoutEventoInput = {
    where: AvaliacaoEventoWhereUniqueInput
    data: XOR<AvaliacaoEventoUpdateWithoutEventoInput, AvaliacaoEventoUncheckedUpdateWithoutEventoInput>
  }

  export type AvaliacaoEventoUpdateManyWithWhereWithoutEventoInput = {
    where: AvaliacaoEventoScalarWhereInput
    data: XOR<AvaliacaoEventoUpdateManyMutationInput, AvaliacaoEventoUncheckedUpdateManyWithoutAvaliacaoEventoInput>
  }

  export type AvaliacaoEventoScalarWhereInput = {
    AND?: Enumerable<AvaliacaoEventoScalarWhereInput>
    OR?: Enumerable<AvaliacaoEventoScalarWhereInput>
    NOT?: Enumerable<AvaliacaoEventoScalarWhereInput>
    id?: IntFilter | number
    id_utilizador?: IntFilter | number
    id_evento?: IntFilter | number
    nota?: IntNullableFilter | number | null
    data_avaliacao?: DateTimeNullableFilter | Date | string | null
  }

  export type AdministradorUpsertWithoutEventoInput = {
    update: XOR<AdministradorUpdateWithoutEventoInput, AdministradorUncheckedUpdateWithoutEventoInput>
    create: XOR<AdministradorCreateWithoutEventoInput, AdministradorUncheckedCreateWithoutEventoInput>
  }

  export type AdministradorUpdateWithoutEventoInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    Anuncio?: AnuncioUpdateManyWithoutAdministradorNestedInput
    MensagemSuporte?: MensagemSuporteUpdateManyWithoutAdministradorNestedInput
    Notificacao?: NotificacaoUpdateManyWithoutAdministradorNestedInput
    Rifa?: RifaUpdateManyWithoutAdministradorNestedInput
  }

  export type AdministradorUncheckedUpdateWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    Anuncio?: AnuncioUncheckedUpdateManyWithoutAdministradorNestedInput
    MensagemSuporte?: MensagemSuporteUncheckedUpdateManyWithoutAdministradorNestedInput
    Notificacao?: NotificacaoUncheckedUpdateManyWithoutAdministradorNestedInput
    Rifa?: RifaUncheckedUpdateManyWithoutAdministradorNestedInput
  }

  export type CategoriaEventoUpsertWithoutEventoInput = {
    update: XOR<CategoriaEventoUpdateWithoutEventoInput, CategoriaEventoUncheckedUpdateWithoutEventoInput>
    create: XOR<CategoriaEventoCreateWithoutEventoInput, CategoriaEventoUncheckedCreateWithoutEventoInput>
  }

  export type CategoriaEventoUpdateWithoutEventoInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaEventoUncheckedUpdateWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type RifaUpsertWithWhereUniqueWithoutEventoInput = {
    where: RifaWhereUniqueInput
    update: XOR<RifaUpdateWithoutEventoInput, RifaUncheckedUpdateWithoutEventoInput>
    create: XOR<RifaCreateWithoutEventoInput, RifaUncheckedCreateWithoutEventoInput>
  }

  export type RifaUpdateWithWhereUniqueWithoutEventoInput = {
    where: RifaWhereUniqueInput
    data: XOR<RifaUpdateWithoutEventoInput, RifaUncheckedUpdateWithoutEventoInput>
  }

  export type RifaUpdateManyWithWhereWithoutEventoInput = {
    where: RifaScalarWhereInput
    data: XOR<RifaUpdateManyMutationInput, RifaUncheckedUpdateManyWithoutRifaInput>
  }

  export type UtilizadorCreateWithoutMensagemSuporteInput = {
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    AvaliacaoEvento?: AvaliacaoEventoCreateNestedManyWithoutUtilizadorInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoCreateNestedManyWithoutUtilizadorInput
    CompraRifa?: CompraRifaCreateNestedManyWithoutUtilizadorInput
    Doacao?: DoacaoCreateNestedManyWithoutUtilizadorInput
    Notificacao?: NotificacaoCreateNestedManyWithoutUtilizadorInput
    Pagamento?: PagamentoCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUncheckedCreateWithoutMensagemSuporteInput = {
    id?: number
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    AvaliacaoEvento?: AvaliacaoEventoUncheckedCreateNestedManyWithoutUtilizadorInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedCreateNestedManyWithoutUtilizadorInput
    CompraRifa?: CompraRifaUncheckedCreateNestedManyWithoutUtilizadorInput
    Doacao?: DoacaoUncheckedCreateNestedManyWithoutUtilizadorInput
    Notificacao?: NotificacaoUncheckedCreateNestedManyWithoutUtilizadorInput
    Pagamento?: PagamentoUncheckedCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorCreateOrConnectWithoutMensagemSuporteInput = {
    where: UtilizadorWhereUniqueInput
    create: XOR<UtilizadorCreateWithoutMensagemSuporteInput, UtilizadorUncheckedCreateWithoutMensagemSuporteInput>
  }

  export type AdministradorCreateWithoutMensagemSuporteInput = {
    username: string
    nome: string
    email: string
    password_hash: string
    Anuncio?: AnuncioCreateNestedManyWithoutAdministradorInput
    Evento?: EventoCreateNestedManyWithoutAdministradorInput
    Notificacao?: NotificacaoCreateNestedManyWithoutAdministradorInput
    Rifa?: RifaCreateNestedManyWithoutAdministradorInput
  }

  export type AdministradorUncheckedCreateWithoutMensagemSuporteInput = {
    id?: number
    username: string
    nome: string
    email: string
    password_hash: string
    Anuncio?: AnuncioUncheckedCreateNestedManyWithoutAdministradorInput
    Evento?: EventoUncheckedCreateNestedManyWithoutAdministradorInput
    Notificacao?: NotificacaoUncheckedCreateNestedManyWithoutAdministradorInput
    Rifa?: RifaUncheckedCreateNestedManyWithoutAdministradorInput
  }

  export type AdministradorCreateOrConnectWithoutMensagemSuporteInput = {
    where: AdministradorWhereUniqueInput
    create: XOR<AdministradorCreateWithoutMensagemSuporteInput, AdministradorUncheckedCreateWithoutMensagemSuporteInput>
  }

  export type UtilizadorUpsertWithoutMensagemSuporteInput = {
    update: XOR<UtilizadorUpdateWithoutMensagemSuporteInput, UtilizadorUncheckedUpdateWithoutMensagemSuporteInput>
    create: XOR<UtilizadorCreateWithoutMensagemSuporteInput, UtilizadorUncheckedCreateWithoutMensagemSuporteInput>
  }

  export type UtilizadorUpdateWithoutMensagemSuporteInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    AvaliacaoEvento?: AvaliacaoEventoUpdateManyWithoutUtilizadorNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUpdateManyWithoutUtilizadorNestedInput
    CompraRifa?: CompraRifaUpdateManyWithoutUtilizadorNestedInput
    Doacao?: DoacaoUpdateManyWithoutUtilizadorNestedInput
    Notificacao?: NotificacaoUpdateManyWithoutUtilizadorNestedInput
    Pagamento?: PagamentoUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorUncheckedUpdateWithoutMensagemSuporteInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    AvaliacaoEvento?: AvaliacaoEventoUncheckedUpdateManyWithoutUtilizadorNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedUpdateManyWithoutUtilizadorNestedInput
    CompraRifa?: CompraRifaUncheckedUpdateManyWithoutUtilizadorNestedInput
    Doacao?: DoacaoUncheckedUpdateManyWithoutUtilizadorNestedInput
    Notificacao?: NotificacaoUncheckedUpdateManyWithoutUtilizadorNestedInput
    Pagamento?: PagamentoUncheckedUpdateManyWithoutUtilizadorNestedInput
  }

  export type AdministradorUpsertWithoutMensagemSuporteInput = {
    update: XOR<AdministradorUpdateWithoutMensagemSuporteInput, AdministradorUncheckedUpdateWithoutMensagemSuporteInput>
    create: XOR<AdministradorCreateWithoutMensagemSuporteInput, AdministradorUncheckedCreateWithoutMensagemSuporteInput>
  }

  export type AdministradorUpdateWithoutMensagemSuporteInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    Anuncio?: AnuncioUpdateManyWithoutAdministradorNestedInput
    Evento?: EventoUpdateManyWithoutAdministradorNestedInput
    Notificacao?: NotificacaoUpdateManyWithoutAdministradorNestedInput
    Rifa?: RifaUpdateManyWithoutAdministradorNestedInput
  }

  export type AdministradorUncheckedUpdateWithoutMensagemSuporteInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    Anuncio?: AnuncioUncheckedUpdateManyWithoutAdministradorNestedInput
    Evento?: EventoUncheckedUpdateManyWithoutAdministradorNestedInput
    Notificacao?: NotificacaoUncheckedUpdateManyWithoutAdministradorNestedInput
    Rifa?: RifaUncheckedUpdateManyWithoutAdministradorNestedInput
  }

  export type UtilizadorCreateWithoutNotificacaoInput = {
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    AvaliacaoEvento?: AvaliacaoEventoCreateNestedManyWithoutUtilizadorInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoCreateNestedManyWithoutUtilizadorInput
    CompraRifa?: CompraRifaCreateNestedManyWithoutUtilizadorInput
    Doacao?: DoacaoCreateNestedManyWithoutUtilizadorInput
    MensagemSuporte?: MensagemSuporteCreateNestedManyWithoutUtilizadorInput
    Pagamento?: PagamentoCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUncheckedCreateWithoutNotificacaoInput = {
    id?: number
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    AvaliacaoEvento?: AvaliacaoEventoUncheckedCreateNestedManyWithoutUtilizadorInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedCreateNestedManyWithoutUtilizadorInput
    CompraRifa?: CompraRifaUncheckedCreateNestedManyWithoutUtilizadorInput
    Doacao?: DoacaoUncheckedCreateNestedManyWithoutUtilizadorInput
    MensagemSuporte?: MensagemSuporteUncheckedCreateNestedManyWithoutUtilizadorInput
    Pagamento?: PagamentoUncheckedCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorCreateOrConnectWithoutNotificacaoInput = {
    where: UtilizadorWhereUniqueInput
    create: XOR<UtilizadorCreateWithoutNotificacaoInput, UtilizadorUncheckedCreateWithoutNotificacaoInput>
  }

  export type AdministradorCreateWithoutNotificacaoInput = {
    username: string
    nome: string
    email: string
    password_hash: string
    Anuncio?: AnuncioCreateNestedManyWithoutAdministradorInput
    Evento?: EventoCreateNestedManyWithoutAdministradorInput
    MensagemSuporte?: MensagemSuporteCreateNestedManyWithoutAdministradorInput
    Rifa?: RifaCreateNestedManyWithoutAdministradorInput
  }

  export type AdministradorUncheckedCreateWithoutNotificacaoInput = {
    id?: number
    username: string
    nome: string
    email: string
    password_hash: string
    Anuncio?: AnuncioUncheckedCreateNestedManyWithoutAdministradorInput
    Evento?: EventoUncheckedCreateNestedManyWithoutAdministradorInput
    MensagemSuporte?: MensagemSuporteUncheckedCreateNestedManyWithoutAdministradorInput
    Rifa?: RifaUncheckedCreateNestedManyWithoutAdministradorInput
  }

  export type AdministradorCreateOrConnectWithoutNotificacaoInput = {
    where: AdministradorWhereUniqueInput
    create: XOR<AdministradorCreateWithoutNotificacaoInput, AdministradorUncheckedCreateWithoutNotificacaoInput>
  }

  export type UtilizadorUpsertWithoutNotificacaoInput = {
    update: XOR<UtilizadorUpdateWithoutNotificacaoInput, UtilizadorUncheckedUpdateWithoutNotificacaoInput>
    create: XOR<UtilizadorCreateWithoutNotificacaoInput, UtilizadorUncheckedCreateWithoutNotificacaoInput>
  }

  export type UtilizadorUpdateWithoutNotificacaoInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    AvaliacaoEvento?: AvaliacaoEventoUpdateManyWithoutUtilizadorNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUpdateManyWithoutUtilizadorNestedInput
    CompraRifa?: CompraRifaUpdateManyWithoutUtilizadorNestedInput
    Doacao?: DoacaoUpdateManyWithoutUtilizadorNestedInput
    MensagemSuporte?: MensagemSuporteUpdateManyWithoutUtilizadorNestedInput
    Pagamento?: PagamentoUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorUncheckedUpdateWithoutNotificacaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    AvaliacaoEvento?: AvaliacaoEventoUncheckedUpdateManyWithoutUtilizadorNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedUpdateManyWithoutUtilizadorNestedInput
    CompraRifa?: CompraRifaUncheckedUpdateManyWithoutUtilizadorNestedInput
    Doacao?: DoacaoUncheckedUpdateManyWithoutUtilizadorNestedInput
    MensagemSuporte?: MensagemSuporteUncheckedUpdateManyWithoutUtilizadorNestedInput
    Pagamento?: PagamentoUncheckedUpdateManyWithoutUtilizadorNestedInput
  }

  export type AdministradorUpsertWithoutNotificacaoInput = {
    update: XOR<AdministradorUpdateWithoutNotificacaoInput, AdministradorUncheckedUpdateWithoutNotificacaoInput>
    create: XOR<AdministradorCreateWithoutNotificacaoInput, AdministradorUncheckedCreateWithoutNotificacaoInput>
  }

  export type AdministradorUpdateWithoutNotificacaoInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    Anuncio?: AnuncioUpdateManyWithoutAdministradorNestedInput
    Evento?: EventoUpdateManyWithoutAdministradorNestedInput
    MensagemSuporte?: MensagemSuporteUpdateManyWithoutAdministradorNestedInput
    Rifa?: RifaUpdateManyWithoutAdministradorNestedInput
  }

  export type AdministradorUncheckedUpdateWithoutNotificacaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    Anuncio?: AnuncioUncheckedUpdateManyWithoutAdministradorNestedInput
    Evento?: EventoUncheckedUpdateManyWithoutAdministradorNestedInput
    MensagemSuporte?: MensagemSuporteUncheckedUpdateManyWithoutAdministradorNestedInput
    Rifa?: RifaUncheckedUpdateManyWithoutAdministradorNestedInput
  }

  export type UtilizadorCreateWithoutPagamentoInput = {
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    AvaliacaoEvento?: AvaliacaoEventoCreateNestedManyWithoutUtilizadorInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoCreateNestedManyWithoutUtilizadorInput
    CompraRifa?: CompraRifaCreateNestedManyWithoutUtilizadorInput
    Doacao?: DoacaoCreateNestedManyWithoutUtilizadorInput
    MensagemSuporte?: MensagemSuporteCreateNestedManyWithoutUtilizadorInput
    Notificacao?: NotificacaoCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUncheckedCreateWithoutPagamentoInput = {
    id?: number
    username: string
    nome: string
    email: string
    telefone: string
    password_hash: string
    morada?: string | null
    AvaliacaoEvento?: AvaliacaoEventoUncheckedCreateNestedManyWithoutUtilizadorInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedCreateNestedManyWithoutUtilizadorInput
    CompraRifa?: CompraRifaUncheckedCreateNestedManyWithoutUtilizadorInput
    Doacao?: DoacaoUncheckedCreateNestedManyWithoutUtilizadorInput
    MensagemSuporte?: MensagemSuporteUncheckedCreateNestedManyWithoutUtilizadorInput
    Notificacao?: NotificacaoUncheckedCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorCreateOrConnectWithoutPagamentoInput = {
    where: UtilizadorWhereUniqueInput
    create: XOR<UtilizadorCreateWithoutPagamentoInput, UtilizadorUncheckedCreateWithoutPagamentoInput>
  }

  export type UtilizadorUpsertWithoutPagamentoInput = {
    update: XOR<UtilizadorUpdateWithoutPagamentoInput, UtilizadorUncheckedUpdateWithoutPagamentoInput>
    create: XOR<UtilizadorCreateWithoutPagamentoInput, UtilizadorUncheckedCreateWithoutPagamentoInput>
  }

  export type UtilizadorUpdateWithoutPagamentoInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    AvaliacaoEvento?: AvaliacaoEventoUpdateManyWithoutUtilizadorNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUpdateManyWithoutUtilizadorNestedInput
    CompraRifa?: CompraRifaUpdateManyWithoutUtilizadorNestedInput
    Doacao?: DoacaoUpdateManyWithoutUtilizadorNestedInput
    MensagemSuporte?: MensagemSuporteUpdateManyWithoutUtilizadorNestedInput
    Notificacao?: NotificacaoUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorUncheckedUpdateWithoutPagamentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    morada?: NullableStringFieldUpdateOperationsInput | string | null
    AvaliacaoEvento?: AvaliacaoEventoUncheckedUpdateManyWithoutUtilizadorNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedUpdateManyWithoutUtilizadorNestedInput
    CompraRifa?: CompraRifaUncheckedUpdateManyWithoutUtilizadorNestedInput
    Doacao?: DoacaoUncheckedUpdateManyWithoutUtilizadorNestedInput
    MensagemSuporte?: MensagemSuporteUncheckedUpdateManyWithoutUtilizadorNestedInput
    Notificacao?: NotificacaoUncheckedUpdateManyWithoutUtilizadorNestedInput
  }

  export type CompraRifaCreateWithoutRifaInput = {
    quantidade: number
    data_compra?: Date | string | null
    estado?: CompraRifa_estado | null
    Utilizador: UtilizadorCreateNestedOneWithoutCompraRifaInput
  }

  export type CompraRifaUncheckedCreateWithoutRifaInput = {
    id?: number
    id_utilizador: number
    quantidade: number
    data_compra?: Date | string | null
    estado?: CompraRifa_estado | null
  }

  export type CompraRifaCreateOrConnectWithoutRifaInput = {
    where: CompraRifaWhereUniqueInput
    create: XOR<CompraRifaCreateWithoutRifaInput, CompraRifaUncheckedCreateWithoutRifaInput>
  }

  export type CompraRifaCreateManyRifaInputEnvelope = {
    data: Enumerable<CompraRifaCreateManyRifaInput>
    skipDuplicates?: boolean
  }

  export type AdministradorCreateWithoutRifaInput = {
    username: string
    nome: string
    email: string
    password_hash: string
    Anuncio?: AnuncioCreateNestedManyWithoutAdministradorInput
    Evento?: EventoCreateNestedManyWithoutAdministradorInput
    MensagemSuporte?: MensagemSuporteCreateNestedManyWithoutAdministradorInput
    Notificacao?: NotificacaoCreateNestedManyWithoutAdministradorInput
  }

  export type AdministradorUncheckedCreateWithoutRifaInput = {
    id?: number
    username: string
    nome: string
    email: string
    password_hash: string
    Anuncio?: AnuncioUncheckedCreateNestedManyWithoutAdministradorInput
    Evento?: EventoUncheckedCreateNestedManyWithoutAdministradorInput
    MensagemSuporte?: MensagemSuporteUncheckedCreateNestedManyWithoutAdministradorInput
    Notificacao?: NotificacaoUncheckedCreateNestedManyWithoutAdministradorInput
  }

  export type AdministradorCreateOrConnectWithoutRifaInput = {
    where: AdministradorWhereUniqueInput
    create: XOR<AdministradorCreateWithoutRifaInput, AdministradorUncheckedCreateWithoutRifaInput>
  }

  export type EventoCreateWithoutRifaInput = {
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    Anuncio?: AnuncioCreateNestedManyWithoutEventoInput
    AvaliacaoEvento?: AvaliacaoEventoCreateNestedManyWithoutEventoInput
    Administrador: AdministradorCreateNestedOneWithoutEventoInput
    CategoriaEvento: CategoriaEventoCreateNestedOneWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutRifaInput = {
    id?: number
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    id_administrador: number
    id_categoria: number
    Anuncio?: AnuncioUncheckedCreateNestedManyWithoutEventoInput
    AvaliacaoEvento?: AvaliacaoEventoUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutRifaInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutRifaInput, EventoUncheckedCreateWithoutRifaInput>
  }

  export type CompraRifaUpsertWithWhereUniqueWithoutRifaInput = {
    where: CompraRifaWhereUniqueInput
    update: XOR<CompraRifaUpdateWithoutRifaInput, CompraRifaUncheckedUpdateWithoutRifaInput>
    create: XOR<CompraRifaCreateWithoutRifaInput, CompraRifaUncheckedCreateWithoutRifaInput>
  }

  export type CompraRifaUpdateWithWhereUniqueWithoutRifaInput = {
    where: CompraRifaWhereUniqueInput
    data: XOR<CompraRifaUpdateWithoutRifaInput, CompraRifaUncheckedUpdateWithoutRifaInput>
  }

  export type CompraRifaUpdateManyWithWhereWithoutRifaInput = {
    where: CompraRifaScalarWhereInput
    data: XOR<CompraRifaUpdateManyMutationInput, CompraRifaUncheckedUpdateManyWithoutCompraRifaInput>
  }

  export type CompraRifaScalarWhereInput = {
    AND?: Enumerable<CompraRifaScalarWhereInput>
    OR?: Enumerable<CompraRifaScalarWhereInput>
    NOT?: Enumerable<CompraRifaScalarWhereInput>
    id?: IntFilter | number
    id_utilizador?: IntFilter | number
    id_rifa?: IntFilter | number
    quantidade?: IntFilter | number
    data_compra?: DateTimeNullableFilter | Date | string | null
    estado?: EnumCompraRifa_estadoNullableFilter | CompraRifa_estado | null
  }

  export type AdministradorUpsertWithoutRifaInput = {
    update: XOR<AdministradorUpdateWithoutRifaInput, AdministradorUncheckedUpdateWithoutRifaInput>
    create: XOR<AdministradorCreateWithoutRifaInput, AdministradorUncheckedCreateWithoutRifaInput>
  }

  export type AdministradorUpdateWithoutRifaInput = {
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    Anuncio?: AnuncioUpdateManyWithoutAdministradorNestedInput
    Evento?: EventoUpdateManyWithoutAdministradorNestedInput
    MensagemSuporte?: MensagemSuporteUpdateManyWithoutAdministradorNestedInput
    Notificacao?: NotificacaoUpdateManyWithoutAdministradorNestedInput
  }

  export type AdministradorUncheckedUpdateWithoutRifaInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    Anuncio?: AnuncioUncheckedUpdateManyWithoutAdministradorNestedInput
    Evento?: EventoUncheckedUpdateManyWithoutAdministradorNestedInput
    MensagemSuporte?: MensagemSuporteUncheckedUpdateManyWithoutAdministradorNestedInput
    Notificacao?: NotificacaoUncheckedUpdateManyWithoutAdministradorNestedInput
  }

  export type EventoUpsertWithoutRifaInput = {
    update: XOR<EventoUpdateWithoutRifaInput, EventoUncheckedUpdateWithoutRifaInput>
    create: XOR<EventoCreateWithoutRifaInput, EventoUncheckedCreateWithoutRifaInput>
  }

  export type EventoUpdateWithoutRifaInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
    Anuncio?: AnuncioUpdateManyWithoutEventoNestedInput
    AvaliacaoEvento?: AvaliacaoEventoUpdateManyWithoutEventoNestedInput
    Administrador?: AdministradorUpdateOneRequiredWithoutEventoNestedInput
    CategoriaEvento?: CategoriaEventoUpdateOneRequiredWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutRifaInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
    id_administrador?: IntFieldUpdateOperationsInput | number
    id_categoria?: IntFieldUpdateOperationsInput | number
    Anuncio?: AnuncioUncheckedUpdateManyWithoutEventoNestedInput
    AvaliacaoEvento?: AvaliacaoEventoUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type AvaliacaoEventoCreateWithoutUtilizadorInput = {
    nota?: number | null
    data_avaliacao?: Date | string | null
    Evento: EventoCreateNestedOneWithoutAvaliacaoEventoInput
  }

  export type AvaliacaoEventoUncheckedCreateWithoutUtilizadorInput = {
    id?: number
    id_evento: number
    nota?: number | null
    data_avaliacao?: Date | string | null
  }

  export type AvaliacaoEventoCreateOrConnectWithoutUtilizadorInput = {
    where: AvaliacaoEventoWhereUniqueInput
    create: XOR<AvaliacaoEventoCreateWithoutUtilizadorInput, AvaliacaoEventoUncheckedCreateWithoutUtilizadorInput>
  }

  export type AvaliacaoEventoCreateManyUtilizadorInputEnvelope = {
    data: Enumerable<AvaliacaoEventoCreateManyUtilizadorInput>
    skipDuplicates?: boolean
  }

  export type CandidaturaVoluntariadoCreateWithoutUtilizadorInput = {
    estado?: CandidaturaVoluntariado_estado | null
    Anuncio: AnuncioCreateNestedOneWithoutCandidaturaVoluntariadoInput
  }

  export type CandidaturaVoluntariadoUncheckedCreateWithoutUtilizadorInput = {
    id?: number
    id_anuncio: number
    estado?: CandidaturaVoluntariado_estado | null
  }

  export type CandidaturaVoluntariadoCreateOrConnectWithoutUtilizadorInput = {
    where: CandidaturaVoluntariadoWhereUniqueInput
    create: XOR<CandidaturaVoluntariadoCreateWithoutUtilizadorInput, CandidaturaVoluntariadoUncheckedCreateWithoutUtilizadorInput>
  }

  export type CandidaturaVoluntariadoCreateManyUtilizadorInputEnvelope = {
    data: Enumerable<CandidaturaVoluntariadoCreateManyUtilizadorInput>
    skipDuplicates?: boolean
  }

  export type CompraRifaCreateWithoutUtilizadorInput = {
    quantidade: number
    data_compra?: Date | string | null
    estado?: CompraRifa_estado | null
    Rifa: RifaCreateNestedOneWithoutCompraRifaInput
  }

  export type CompraRifaUncheckedCreateWithoutUtilizadorInput = {
    id?: number
    id_rifa: number
    quantidade: number
    data_compra?: Date | string | null
    estado?: CompraRifa_estado | null
  }

  export type CompraRifaCreateOrConnectWithoutUtilizadorInput = {
    where: CompraRifaWhereUniqueInput
    create: XOR<CompraRifaCreateWithoutUtilizadorInput, CompraRifaUncheckedCreateWithoutUtilizadorInput>
  }

  export type CompraRifaCreateManyUtilizadorInputEnvelope = {
    data: Enumerable<CompraRifaCreateManyUtilizadorInput>
    skipDuplicates?: boolean
  }

  export type DoacaoCreateWithoutUtilizadorInput = {
    valor: Decimal | DecimalJsLike | number | string
    data_doacao?: Date | string | null
    metodo_pagamento: Doacao_metodo_pagamento
  }

  export type DoacaoUncheckedCreateWithoutUtilizadorInput = {
    id?: number
    valor: Decimal | DecimalJsLike | number | string
    data_doacao?: Date | string | null
    metodo_pagamento: Doacao_metodo_pagamento
  }

  export type DoacaoCreateOrConnectWithoutUtilizadorInput = {
    where: DoacaoWhereUniqueInput
    create: XOR<DoacaoCreateWithoutUtilizadorInput, DoacaoUncheckedCreateWithoutUtilizadorInput>
  }

  export type DoacaoCreateManyUtilizadorInputEnvelope = {
    data: Enumerable<DoacaoCreateManyUtilizadorInput>
    skipDuplicates?: boolean
  }

  export type MensagemSuporteCreateWithoutUtilizadorInput = {
    mensagem: string
    data_abertura?: Date | string | null
    data_encerramento?: Date | string | null
    estado?: MensagemSuporte_estado | null
    Administrador: AdministradorCreateNestedOneWithoutMensagemSuporteInput
  }

  export type MensagemSuporteUncheckedCreateWithoutUtilizadorInput = {
    id?: number
    id_administrador: number
    mensagem: string
    data_abertura?: Date | string | null
    data_encerramento?: Date | string | null
    estado?: MensagemSuporte_estado | null
  }

  export type MensagemSuporteCreateOrConnectWithoutUtilizadorInput = {
    where: MensagemSuporteWhereUniqueInput
    create: XOR<MensagemSuporteCreateWithoutUtilizadorInput, MensagemSuporteUncheckedCreateWithoutUtilizadorInput>
  }

  export type MensagemSuporteCreateManyUtilizadorInputEnvelope = {
    data: Enumerable<MensagemSuporteCreateManyUtilizadorInput>
    skipDuplicates?: boolean
  }

  export type NotificacaoCreateWithoutUtilizadorInput = {
    mensagem: string
    data_envio?: Date | string | null
    estado?: Notificacao_estado | null
    Administrador: AdministradorCreateNestedOneWithoutNotificacaoInput
  }

  export type NotificacaoUncheckedCreateWithoutUtilizadorInput = {
    id?: number
    id_administrador: number
    mensagem: string
    data_envio?: Date | string | null
    estado?: Notificacao_estado | null
  }

  export type NotificacaoCreateOrConnectWithoutUtilizadorInput = {
    where: NotificacaoWhereUniqueInput
    create: XOR<NotificacaoCreateWithoutUtilizadorInput, NotificacaoUncheckedCreateWithoutUtilizadorInput>
  }

  export type NotificacaoCreateManyUtilizadorInputEnvelope = {
    data: Enumerable<NotificacaoCreateManyUtilizadorInput>
    skipDuplicates?: boolean
  }

  export type PagamentoCreateWithoutUtilizadorInput = {
    valor: Decimal | DecimalJsLike | number | string
    metodo_pagamento: Pagamento_metodo_pagamento
    estado?: Pagamento_estado | null
    data_pagamento?: Date | string | null
  }

  export type PagamentoUncheckedCreateWithoutUtilizadorInput = {
    id?: number
    valor: Decimal | DecimalJsLike | number | string
    metodo_pagamento: Pagamento_metodo_pagamento
    estado?: Pagamento_estado | null
    data_pagamento?: Date | string | null
  }

  export type PagamentoCreateOrConnectWithoutUtilizadorInput = {
    where: PagamentoWhereUniqueInput
    create: XOR<PagamentoCreateWithoutUtilizadorInput, PagamentoUncheckedCreateWithoutUtilizadorInput>
  }

  export type PagamentoCreateManyUtilizadorInputEnvelope = {
    data: Enumerable<PagamentoCreateManyUtilizadorInput>
    skipDuplicates?: boolean
  }

  export type AvaliacaoEventoUpsertWithWhereUniqueWithoutUtilizadorInput = {
    where: AvaliacaoEventoWhereUniqueInput
    update: XOR<AvaliacaoEventoUpdateWithoutUtilizadorInput, AvaliacaoEventoUncheckedUpdateWithoutUtilizadorInput>
    create: XOR<AvaliacaoEventoCreateWithoutUtilizadorInput, AvaliacaoEventoUncheckedCreateWithoutUtilizadorInput>
  }

  export type AvaliacaoEventoUpdateWithWhereUniqueWithoutUtilizadorInput = {
    where: AvaliacaoEventoWhereUniqueInput
    data: XOR<AvaliacaoEventoUpdateWithoutUtilizadorInput, AvaliacaoEventoUncheckedUpdateWithoutUtilizadorInput>
  }

  export type AvaliacaoEventoUpdateManyWithWhereWithoutUtilizadorInput = {
    where: AvaliacaoEventoScalarWhereInput
    data: XOR<AvaliacaoEventoUpdateManyMutationInput, AvaliacaoEventoUncheckedUpdateManyWithoutAvaliacaoEventoInput>
  }

  export type CandidaturaVoluntariadoUpsertWithWhereUniqueWithoutUtilizadorInput = {
    where: CandidaturaVoluntariadoWhereUniqueInput
    update: XOR<CandidaturaVoluntariadoUpdateWithoutUtilizadorInput, CandidaturaVoluntariadoUncheckedUpdateWithoutUtilizadorInput>
    create: XOR<CandidaturaVoluntariadoCreateWithoutUtilizadorInput, CandidaturaVoluntariadoUncheckedCreateWithoutUtilizadorInput>
  }

  export type CandidaturaVoluntariadoUpdateWithWhereUniqueWithoutUtilizadorInput = {
    where: CandidaturaVoluntariadoWhereUniqueInput
    data: XOR<CandidaturaVoluntariadoUpdateWithoutUtilizadorInput, CandidaturaVoluntariadoUncheckedUpdateWithoutUtilizadorInput>
  }

  export type CandidaturaVoluntariadoUpdateManyWithWhereWithoutUtilizadorInput = {
    where: CandidaturaVoluntariadoScalarWhereInput
    data: XOR<CandidaturaVoluntariadoUpdateManyMutationInput, CandidaturaVoluntariadoUncheckedUpdateManyWithoutCandidaturaVoluntariadoInput>
  }

  export type CompraRifaUpsertWithWhereUniqueWithoutUtilizadorInput = {
    where: CompraRifaWhereUniqueInput
    update: XOR<CompraRifaUpdateWithoutUtilizadorInput, CompraRifaUncheckedUpdateWithoutUtilizadorInput>
    create: XOR<CompraRifaCreateWithoutUtilizadorInput, CompraRifaUncheckedCreateWithoutUtilizadorInput>
  }

  export type CompraRifaUpdateWithWhereUniqueWithoutUtilizadorInput = {
    where: CompraRifaWhereUniqueInput
    data: XOR<CompraRifaUpdateWithoutUtilizadorInput, CompraRifaUncheckedUpdateWithoutUtilizadorInput>
  }

  export type CompraRifaUpdateManyWithWhereWithoutUtilizadorInput = {
    where: CompraRifaScalarWhereInput
    data: XOR<CompraRifaUpdateManyMutationInput, CompraRifaUncheckedUpdateManyWithoutCompraRifaInput>
  }

  export type DoacaoUpsertWithWhereUniqueWithoutUtilizadorInput = {
    where: DoacaoWhereUniqueInput
    update: XOR<DoacaoUpdateWithoutUtilizadorInput, DoacaoUncheckedUpdateWithoutUtilizadorInput>
    create: XOR<DoacaoCreateWithoutUtilizadorInput, DoacaoUncheckedCreateWithoutUtilizadorInput>
  }

  export type DoacaoUpdateWithWhereUniqueWithoutUtilizadorInput = {
    where: DoacaoWhereUniqueInput
    data: XOR<DoacaoUpdateWithoutUtilizadorInput, DoacaoUncheckedUpdateWithoutUtilizadorInput>
  }

  export type DoacaoUpdateManyWithWhereWithoutUtilizadorInput = {
    where: DoacaoScalarWhereInput
    data: XOR<DoacaoUpdateManyMutationInput, DoacaoUncheckedUpdateManyWithoutDoacaoInput>
  }

  export type DoacaoScalarWhereInput = {
    AND?: Enumerable<DoacaoScalarWhereInput>
    OR?: Enumerable<DoacaoScalarWhereInput>
    NOT?: Enumerable<DoacaoScalarWhereInput>
    id?: IntFilter | number
    id_utilizador?: IntFilter | number
    valor?: DecimalFilter | Decimal | DecimalJsLike | number | string
    data_doacao?: DateTimeNullableFilter | Date | string | null
    metodo_pagamento?: EnumDoacao_metodo_pagamentoFilter | Doacao_metodo_pagamento
  }

  export type MensagemSuporteUpsertWithWhereUniqueWithoutUtilizadorInput = {
    where: MensagemSuporteWhereUniqueInput
    update: XOR<MensagemSuporteUpdateWithoutUtilizadorInput, MensagemSuporteUncheckedUpdateWithoutUtilizadorInput>
    create: XOR<MensagemSuporteCreateWithoutUtilizadorInput, MensagemSuporteUncheckedCreateWithoutUtilizadorInput>
  }

  export type MensagemSuporteUpdateWithWhereUniqueWithoutUtilizadorInput = {
    where: MensagemSuporteWhereUniqueInput
    data: XOR<MensagemSuporteUpdateWithoutUtilizadorInput, MensagemSuporteUncheckedUpdateWithoutUtilizadorInput>
  }

  export type MensagemSuporteUpdateManyWithWhereWithoutUtilizadorInput = {
    where: MensagemSuporteScalarWhereInput
    data: XOR<MensagemSuporteUpdateManyMutationInput, MensagemSuporteUncheckedUpdateManyWithoutMensagemSuporteInput>
  }

  export type NotificacaoUpsertWithWhereUniqueWithoutUtilizadorInput = {
    where: NotificacaoWhereUniqueInput
    update: XOR<NotificacaoUpdateWithoutUtilizadorInput, NotificacaoUncheckedUpdateWithoutUtilizadorInput>
    create: XOR<NotificacaoCreateWithoutUtilizadorInput, NotificacaoUncheckedCreateWithoutUtilizadorInput>
  }

  export type NotificacaoUpdateWithWhereUniqueWithoutUtilizadorInput = {
    where: NotificacaoWhereUniqueInput
    data: XOR<NotificacaoUpdateWithoutUtilizadorInput, NotificacaoUncheckedUpdateWithoutUtilizadorInput>
  }

  export type NotificacaoUpdateManyWithWhereWithoutUtilizadorInput = {
    where: NotificacaoScalarWhereInput
    data: XOR<NotificacaoUpdateManyMutationInput, NotificacaoUncheckedUpdateManyWithoutNotificacaoInput>
  }

  export type PagamentoUpsertWithWhereUniqueWithoutUtilizadorInput = {
    where: PagamentoWhereUniqueInput
    update: XOR<PagamentoUpdateWithoutUtilizadorInput, PagamentoUncheckedUpdateWithoutUtilizadorInput>
    create: XOR<PagamentoCreateWithoutUtilizadorInput, PagamentoUncheckedCreateWithoutUtilizadorInput>
  }

  export type PagamentoUpdateWithWhereUniqueWithoutUtilizadorInput = {
    where: PagamentoWhereUniqueInput
    data: XOR<PagamentoUpdateWithoutUtilizadorInput, PagamentoUncheckedUpdateWithoutUtilizadorInput>
  }

  export type PagamentoUpdateManyWithWhereWithoutUtilizadorInput = {
    where: PagamentoScalarWhereInput
    data: XOR<PagamentoUpdateManyMutationInput, PagamentoUncheckedUpdateManyWithoutPagamentoInput>
  }

  export type PagamentoScalarWhereInput = {
    AND?: Enumerable<PagamentoScalarWhereInput>
    OR?: Enumerable<PagamentoScalarWhereInput>
    NOT?: Enumerable<PagamentoScalarWhereInput>
    id?: IntFilter | number
    id_utilizador?: IntFilter | number
    valor?: DecimalFilter | Decimal | DecimalJsLike | number | string
    metodo_pagamento?: EnumPagamento_metodo_pagamentoFilter | Pagamento_metodo_pagamento
    estado?: EnumPagamento_estadoNullableFilter | Pagamento_estado | null
    data_pagamento?: DateTimeNullableFilter | Date | string | null
  }

  export type AnuncioCreateManyAdministradorInput = {
    id?: number
    cargo: string
    descricao: string
    data_publicacao?: Date | string | null
    id_evento: number
  }

  export type EventoCreateManyAdministradorInput = {
    id?: number
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    id_categoria: number
  }

  export type MensagemSuporteCreateManyAdministradorInput = {
    id?: number
    id_utilizador: number
    mensagem: string
    data_abertura?: Date | string | null
    data_encerramento?: Date | string | null
    estado?: MensagemSuporte_estado | null
  }

  export type NotificacaoCreateManyAdministradorInput = {
    id?: number
    id_utilizador: number
    mensagem: string
    data_envio?: Date | string | null
    estado?: Notificacao_estado | null
  }

  export type RifaCreateManyAdministradorInput = {
    id?: number
    nome: string
    preco: Decimal | DecimalJsLike | number | string
    quantidade: number
    descricao: string
    premio: string
    data_sorteio: Date | string
    id_evento: number
  }

  export type AnuncioUpdateWithoutAdministradorInput = {
    cargo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data_publicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Evento?: EventoUpdateOneRequiredWithoutAnuncioNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUpdateManyWithoutAnuncioNestedInput
  }

  export type AnuncioUncheckedUpdateWithoutAdministradorInput = {
    id?: IntFieldUpdateOperationsInput | number
    cargo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data_publicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_evento?: IntFieldUpdateOperationsInput | number
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedUpdateManyWithoutAnuncioNestedInput
  }

  export type AnuncioUncheckedUpdateManyWithoutAnuncioInput = {
    id?: IntFieldUpdateOperationsInput | number
    cargo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data_publicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_evento?: IntFieldUpdateOperationsInput | number
  }

  export type EventoUpdateWithoutAdministradorInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
    Anuncio?: AnuncioUpdateManyWithoutEventoNestedInput
    AvaliacaoEvento?: AvaliacaoEventoUpdateManyWithoutEventoNestedInput
    CategoriaEvento?: CategoriaEventoUpdateOneRequiredWithoutEventoNestedInput
    Rifa?: RifaUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutAdministradorInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
    id_categoria?: IntFieldUpdateOperationsInput | number
    Anuncio?: AnuncioUncheckedUpdateManyWithoutEventoNestedInput
    AvaliacaoEvento?: AvaliacaoEventoUncheckedUpdateManyWithoutEventoNestedInput
    Rifa?: RifaUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateManyWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
    id_categoria?: IntFieldUpdateOperationsInput | number
  }

  export type MensagemSuporteUpdateWithoutAdministradorInput = {
    mensagem?: StringFieldUpdateOperationsInput | string
    data_abertura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_encerramento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumMensagemSuporte_estadoFieldUpdateOperationsInput | MensagemSuporte_estado | null
    Utilizador?: UtilizadorUpdateOneRequiredWithoutMensagemSuporteNestedInput
  }

  export type MensagemSuporteUncheckedUpdateWithoutAdministradorInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    mensagem?: StringFieldUpdateOperationsInput | string
    data_abertura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_encerramento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumMensagemSuporte_estadoFieldUpdateOperationsInput | MensagemSuporte_estado | null
  }

  export type MensagemSuporteUncheckedUpdateManyWithoutMensagemSuporteInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    mensagem?: StringFieldUpdateOperationsInput | string
    data_abertura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_encerramento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumMensagemSuporte_estadoFieldUpdateOperationsInput | MensagemSuporte_estado | null
  }

  export type NotificacaoUpdateWithoutAdministradorInput = {
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumNotificacao_estadoFieldUpdateOperationsInput | Notificacao_estado | null
    Utilizador?: UtilizadorUpdateOneRequiredWithoutNotificacaoNestedInput
  }

  export type NotificacaoUncheckedUpdateWithoutAdministradorInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumNotificacao_estadoFieldUpdateOperationsInput | Notificacao_estado | null
  }

  export type NotificacaoUncheckedUpdateManyWithoutNotificacaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumNotificacao_estadoFieldUpdateOperationsInput | Notificacao_estado | null
  }

  export type RifaUpdateWithoutAdministradorInput = {
    nome?: StringFieldUpdateOperationsInput | string
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    premio?: StringFieldUpdateOperationsInput | string
    data_sorteio?: DateTimeFieldUpdateOperationsInput | Date | string
    CompraRifa?: CompraRifaUpdateManyWithoutRifaNestedInput
    Evento?: EventoUpdateOneRequiredWithoutRifaNestedInput
  }

  export type RifaUncheckedUpdateWithoutAdministradorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    premio?: StringFieldUpdateOperationsInput | string
    data_sorteio?: DateTimeFieldUpdateOperationsInput | Date | string
    id_evento?: IntFieldUpdateOperationsInput | number
    CompraRifa?: CompraRifaUncheckedUpdateManyWithoutRifaNestedInput
  }

  export type RifaUncheckedUpdateManyWithoutRifaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    premio?: StringFieldUpdateOperationsInput | string
    data_sorteio?: DateTimeFieldUpdateOperationsInput | Date | string
    id_evento?: IntFieldUpdateOperationsInput | number
  }

  export type CandidaturaVoluntariadoCreateManyAnuncioInput = {
    id?: number
    id_utilizador: number
    estado?: CandidaturaVoluntariado_estado | null
  }

  export type CandidaturaVoluntariadoUpdateWithoutAnuncioInput = {
    estado?: NullableEnumCandidaturaVoluntariado_estadoFieldUpdateOperationsInput | CandidaturaVoluntariado_estado | null
    Utilizador?: UtilizadorUpdateOneRequiredWithoutCandidaturaVoluntariadoNestedInput
  }

  export type CandidaturaVoluntariadoUncheckedUpdateWithoutAnuncioInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    estado?: NullableEnumCandidaturaVoluntariado_estadoFieldUpdateOperationsInput | CandidaturaVoluntariado_estado | null
  }

  export type CandidaturaVoluntariadoUncheckedUpdateManyWithoutCandidaturaVoluntariadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    estado?: NullableEnumCandidaturaVoluntariado_estadoFieldUpdateOperationsInput | CandidaturaVoluntariado_estado | null
  }

  export type EventoCreateManyCategoriaEventoInput = {
    id?: number
    titulo: string
    localizacao: string
    descricao?: string | null
    data_evento: Date | string
    fotografia: string
    estado?: Evento_estado | null
    id_administrador: number
  }

  export type EventoUpdateWithoutCategoriaEventoInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
    Anuncio?: AnuncioUpdateManyWithoutEventoNestedInput
    AvaliacaoEvento?: AvaliacaoEventoUpdateManyWithoutEventoNestedInput
    Administrador?: AdministradorUpdateOneRequiredWithoutEventoNestedInput
    Rifa?: RifaUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutCategoriaEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    data_evento?: DateTimeFieldUpdateOperationsInput | Date | string
    fotografia?: StringFieldUpdateOperationsInput | string
    estado?: NullableEnumEvento_estadoFieldUpdateOperationsInput | Evento_estado | null
    id_administrador?: IntFieldUpdateOperationsInput | number
    Anuncio?: AnuncioUncheckedUpdateManyWithoutEventoNestedInput
    AvaliacaoEvento?: AvaliacaoEventoUncheckedUpdateManyWithoutEventoNestedInput
    Rifa?: RifaUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type AnuncioCreateManyEventoInput = {
    id?: number
    cargo: string
    descricao: string
    data_publicacao?: Date | string | null
    id_administrador: number
  }

  export type AvaliacaoEventoCreateManyEventoInput = {
    id?: number
    id_utilizador: number
    nota?: number | null
    data_avaliacao?: Date | string | null
  }

  export type RifaCreateManyEventoInput = {
    id?: number
    nome: string
    preco: Decimal | DecimalJsLike | number | string
    quantidade: number
    descricao: string
    premio: string
    data_sorteio: Date | string
    id_administrador: number
  }

  export type AnuncioUpdateWithoutEventoInput = {
    cargo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data_publicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Administrador?: AdministradorUpdateOneRequiredWithoutAnuncioNestedInput
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUpdateManyWithoutAnuncioNestedInput
  }

  export type AnuncioUncheckedUpdateWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    cargo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data_publicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_administrador?: IntFieldUpdateOperationsInput | number
    CandidaturaVoluntariado?: CandidaturaVoluntariadoUncheckedUpdateManyWithoutAnuncioNestedInput
  }

  export type AvaliacaoEventoUpdateWithoutEventoInput = {
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Utilizador?: UtilizadorUpdateOneRequiredWithoutAvaliacaoEventoNestedInput
  }

  export type AvaliacaoEventoUncheckedUpdateWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AvaliacaoEventoUncheckedUpdateManyWithoutAvaliacaoEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RifaUpdateWithoutEventoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    premio?: StringFieldUpdateOperationsInput | string
    data_sorteio?: DateTimeFieldUpdateOperationsInput | Date | string
    CompraRifa?: CompraRifaUpdateManyWithoutRifaNestedInput
    Administrador?: AdministradorUpdateOneRequiredWithoutRifaNestedInput
  }

  export type RifaUncheckedUpdateWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantidade?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    premio?: StringFieldUpdateOperationsInput | string
    data_sorteio?: DateTimeFieldUpdateOperationsInput | Date | string
    id_administrador?: IntFieldUpdateOperationsInput | number
    CompraRifa?: CompraRifaUncheckedUpdateManyWithoutRifaNestedInput
  }

  export type CompraRifaCreateManyRifaInput = {
    id?: number
    id_utilizador: number
    quantidade: number
    data_compra?: Date | string | null
    estado?: CompraRifa_estado | null
  }

  export type CompraRifaUpdateWithoutRifaInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    data_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumCompraRifa_estadoFieldUpdateOperationsInput | CompraRifa_estado | null
    Utilizador?: UtilizadorUpdateOneRequiredWithoutCompraRifaNestedInput
  }

  export type CompraRifaUncheckedUpdateWithoutRifaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    data_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumCompraRifa_estadoFieldUpdateOperationsInput | CompraRifa_estado | null
  }

  export type CompraRifaUncheckedUpdateManyWithoutCompraRifaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_utilizador?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    data_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumCompraRifa_estadoFieldUpdateOperationsInput | CompraRifa_estado | null
  }

  export type AvaliacaoEventoCreateManyUtilizadorInput = {
    id?: number
    id_evento: number
    nota?: number | null
    data_avaliacao?: Date | string | null
  }

  export type CandidaturaVoluntariadoCreateManyUtilizadorInput = {
    id?: number
    id_anuncio: number
    estado?: CandidaturaVoluntariado_estado | null
  }

  export type CompraRifaCreateManyUtilizadorInput = {
    id?: number
    id_rifa: number
    quantidade: number
    data_compra?: Date | string | null
    estado?: CompraRifa_estado | null
  }

  export type DoacaoCreateManyUtilizadorInput = {
    id?: number
    valor: Decimal | DecimalJsLike | number | string
    data_doacao?: Date | string | null
    metodo_pagamento: Doacao_metodo_pagamento
  }

  export type MensagemSuporteCreateManyUtilizadorInput = {
    id?: number
    id_administrador: number
    mensagem: string
    data_abertura?: Date | string | null
    data_encerramento?: Date | string | null
    estado?: MensagemSuporte_estado | null
  }

  export type NotificacaoCreateManyUtilizadorInput = {
    id?: number
    id_administrador: number
    mensagem: string
    data_envio?: Date | string | null
    estado?: Notificacao_estado | null
  }

  export type PagamentoCreateManyUtilizadorInput = {
    id?: number
    valor: Decimal | DecimalJsLike | number | string
    metodo_pagamento: Pagamento_metodo_pagamento
    estado?: Pagamento_estado | null
    data_pagamento?: Date | string | null
  }

  export type AvaliacaoEventoUpdateWithoutUtilizadorInput = {
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Evento?: EventoUpdateOneRequiredWithoutAvaliacaoEventoNestedInput
  }

  export type AvaliacaoEventoUncheckedUpdateWithoutUtilizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_evento?: IntFieldUpdateOperationsInput | number
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    data_avaliacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CandidaturaVoluntariadoUpdateWithoutUtilizadorInput = {
    estado?: NullableEnumCandidaturaVoluntariado_estadoFieldUpdateOperationsInput | CandidaturaVoluntariado_estado | null
    Anuncio?: AnuncioUpdateOneRequiredWithoutCandidaturaVoluntariadoNestedInput
  }

  export type CandidaturaVoluntariadoUncheckedUpdateWithoutUtilizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_anuncio?: IntFieldUpdateOperationsInput | number
    estado?: NullableEnumCandidaturaVoluntariado_estadoFieldUpdateOperationsInput | CandidaturaVoluntariado_estado | null
  }

  export type CompraRifaUpdateWithoutUtilizadorInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    data_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumCompraRifa_estadoFieldUpdateOperationsInput | CompraRifa_estado | null
    Rifa?: RifaUpdateOneRequiredWithoutCompraRifaNestedInput
  }

  export type CompraRifaUncheckedUpdateWithoutUtilizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_rifa?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    data_compra?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumCompraRifa_estadoFieldUpdateOperationsInput | CompraRifa_estado | null
  }

  export type DoacaoUpdateWithoutUtilizadorInput = {
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    data_doacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodo_pagamento?: EnumDoacao_metodo_pagamentoFieldUpdateOperationsInput | Doacao_metodo_pagamento
  }

  export type DoacaoUncheckedUpdateWithoutUtilizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    data_doacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodo_pagamento?: EnumDoacao_metodo_pagamentoFieldUpdateOperationsInput | Doacao_metodo_pagamento
  }

  export type DoacaoUncheckedUpdateManyWithoutDoacaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    data_doacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metodo_pagamento?: EnumDoacao_metodo_pagamentoFieldUpdateOperationsInput | Doacao_metodo_pagamento
  }

  export type MensagemSuporteUpdateWithoutUtilizadorInput = {
    mensagem?: StringFieldUpdateOperationsInput | string
    data_abertura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_encerramento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumMensagemSuporte_estadoFieldUpdateOperationsInput | MensagemSuporte_estado | null
    Administrador?: AdministradorUpdateOneRequiredWithoutMensagemSuporteNestedInput
  }

  export type MensagemSuporteUncheckedUpdateWithoutUtilizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_administrador?: IntFieldUpdateOperationsInput | number
    mensagem?: StringFieldUpdateOperationsInput | string
    data_abertura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_encerramento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumMensagemSuporte_estadoFieldUpdateOperationsInput | MensagemSuporte_estado | null
  }

  export type NotificacaoUpdateWithoutUtilizadorInput = {
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumNotificacao_estadoFieldUpdateOperationsInput | Notificacao_estado | null
    Administrador?: AdministradorUpdateOneRequiredWithoutNotificacaoNestedInput
  }

  export type NotificacaoUncheckedUpdateWithoutUtilizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_administrador?: IntFieldUpdateOperationsInput | number
    mensagem?: StringFieldUpdateOperationsInput | string
    data_envio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estado?: NullableEnumNotificacao_estadoFieldUpdateOperationsInput | Notificacao_estado | null
  }

  export type PagamentoUpdateWithoutUtilizadorInput = {
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    metodo_pagamento?: EnumPagamento_metodo_pagamentoFieldUpdateOperationsInput | Pagamento_metodo_pagamento
    estado?: NullableEnumPagamento_estadoFieldUpdateOperationsInput | Pagamento_estado | null
    data_pagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PagamentoUncheckedUpdateWithoutUtilizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    metodo_pagamento?: EnumPagamento_metodo_pagamentoFieldUpdateOperationsInput | Pagamento_metodo_pagamento
    estado?: NullableEnumPagamento_estadoFieldUpdateOperationsInput | Pagamento_estado | null
    data_pagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PagamentoUncheckedUpdateManyWithoutPagamentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    metodo_pagamento?: EnumPagamento_metodo_pagamentoFieldUpdateOperationsInput | Pagamento_metodo_pagamento
    estado?: NullableEnumPagamento_estadoFieldUpdateOperationsInput | Pagamento_estado | null
    data_pagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}